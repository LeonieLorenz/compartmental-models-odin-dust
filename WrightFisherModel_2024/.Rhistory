Nepal_model_start_pop <- (sapply((Nepal_cluster_freqs_preVac + rexp(n = length(Nepal_cluster_freqs_preVac), rate = exp_noise)) * expand_factor, rpois, n=1))
# visual check for the "sampling"
plot(Nepal_cluster_freqs_preVac/sum(Nepal_cluster_freqs_preVac))
points(Nepal_model_start_pop/sum(Nepal_model_start_pop), col = "red")
Nepal_model_start_pop <- (sapply((Nepal_cluster_freqs[[5]] + rexp(n = length(Nepal_cluster_freqs[[5]]), rate = exp_noise)) * expand_factor, rpois, n=1))
# visual check for the "sampling"
plot(Nepal_cluster_freqs[[5]]/sum(Nepal_cluster_freqs[[5]]))
points(Nepal_model_start_pop/sum(Nepal_model_start_pop), col = "red")
saveRDS(Nepal_model_start_pop, "Nepal_model_start_pop.rds")
length(seq_no_per_year)
seq_no_per_year
seq_no_per_year[14]
# calculate gene frequencies first, separate for three time points
#Nepal_gene_freq_preVac <- apply(Nepal_ggCaller_intermed_preVac[-1,-1], 1, sum_as_int)
#Nepal_gene_freq_postVac <- apply(Nepal_ggCaller_byYear_intermed[[length(Nepal_ggCaller_byYear_intermed)]][-1,-1], 1, sum_as_int)
Nepal_gene_freq_preVac <- Nepal_cluster_freqs[[5]]
Nepal_gene_freq_postVac <- Nepal_cluster_freqs[[14]]
# first, calculate pre/peri and post vacc frequencies of genes:
Nepal_gene_freq_preVac_rel <- Nepal_gene_freq_preVac/sum(Nepal_gene_freq_preVac)
Nepal_gene_freq_postVac_rel <- Nepal_gene_freq_postVac/sum(Nepal_gene_freq_postVac)
# calculate delta statistic (refer to Corander et al. for more info)
Nepal_delta_data <- (Nepal_gene_freq_postVac_rel - Nepal_gene_freq_preVac_rel) ^ 2 / (1 - Nepal_gene_freq_preVac_rel * (1 - Nepal_gene_freq_preVac_rel))
Nepal_delta_ranking <- rank(Nepal_delta_data)
saveRDS(Nepal_delta_ranking,"Nepal_delta_ranking.rds")
head(Nepal_delta_ranking)
### Loading packages
#install.packages("drat") # -- if you don't have drat installed
#drat:::add("ncov-ic")
# install.packages("/nfs/research/jlees/leonie/WF_fitting_2024/Nepal/dust-master", repos = NULL, type="source")
library(dust)
#install.packages("/nfs/research/jlees/leonie/WF_fitting_2024/Nepal/odin-1.5.10", repos = NULL, type="source")
library(odin)
#install.packages("odin.dust",repos = c("https://mrc-ide.r-universe.dev", "https://cloud.r-project.org"))
#install.packages("odin.dust")
library(odin.dust)
#install.packages("mcstate")
library(mcstate)
library(coda)
# read in model from file
WF <- odin.dust::odin_dust("NFDS_Model.R")
# likelihood for fitting:
ll_pois <<- function(obs, model) {
exp_noise <- 1e6
if (is.na(obs)) {
# Creates vector of zeros in ll with same length, if no data
ll_obs <- numeric(length(model))
} else {
lambda <- model + rexp(n = length(model), rate = exp_noise)
ll_obs <- dpois(x = obs, lambda = lambda, log = TRUE)
}
ll_obs
}
combined_compare <- function(state, observed, pars = NULL) {
result <- 0
#data_size <- sum(mass_cluster_freq_1)
#model_size = 15000
#data_size <- sum(unlist(observed))
data_size <- sum(unlist(observed[as.character(1:(nrow(state)-1))]))
#model_size = sum(unlist(state))
model_size = sum(unlist(state[-1, , drop = TRUE]))
exp_noise <- 1e6
for (i in 1:(nrow(state)-1)){
if (is.na(observed[[as.character(i)]])) {
# Creates vector of zeros in ll with same length, if no data
ll_obs <- numeric(length( state[1+i, , drop = TRUE]/model_size * data_size))
} else {
lambda <-  state[1+i, , drop = TRUE]/model_size * data_size + rexp(n = length( state[1+i, , drop = TRUE]/model_size * data_size), rate = exp_noise)
ll_obs <- dpois(x = observed[[as.character(i)]], lambda = lambda, log = TRUE)
}
result <- result + ll_obs
}
result
}
if(args[1] == "ggCaller" & args[2] == "PopPUNK"){
seq_clusters <- readRDS("PopPUNK_clusters.rds")
intermed_gene_presence_absence_consensus <- readRDS(file = "ggCPP_intermed_gene_presence_absence_consensus.rds")
intermed_gene_presence_absence_consensus_matrix <- sapply(intermed_gene_presence_absence_consensus[-1,-1],as.double)
model_start_pop <- readRDS(file = "PP_model_start_pop.rds")
delta_ranking <- readRDS(file = "ggC_delta_ranking.rds")
#delta_ranking <- readRDS(file = "ggC_delta_ranking3.rds")
mass_cluster_freq_1 <- readRDS(file = "PP_mass_cluster_freq_1.rds")
mass_cluster_freq_2 <- readRDS(file = "PP_mass_cluster_freq_2.rds")
mass_cluster_freq_3 <- readRDS(file = "PP_mass_cluster_freq_3.rds")
#mass_VT <- readRDS(file = "PP_mass_VT_mean.rds")
mass_VT <- readRDS(file = "PP_mass_VT.rds")
mass_clusters <- length(unique(seq_clusters$Cluster))
avg_cluster_freq <- rep(1/mass_clusters, mass_clusters)
output_filename <- "4param_ggCaller_PopPUNK"
# process data with particle filter:
dt <- 1/36 # we assume that the generation time of Strep. pneumo is 1 month
# we have data from 2001, 2004, 2007, so we want 3 (years) * 12 (months) = 36 updates in-between
peripost_mass_cluster_freq <- data.frame("year" = c(1, 2), rbind(mass_cluster_freq_2, mass_cluster_freq_3))
names(peripost_mass_cluster_freq) <- c("year", as.character(1:mass_clusters))
vacc_time <- 0
} else if(args[1] == "COGtriangles" & args[2] == "PopPUNK"){
seq_clusters <- readRDS("PopPUNK_clusters.rds")
intermed_gene_presence_absence_consensus <- readRDS(file = "PP_intermed_gene_presence_absence_consensus.rds")
intermed_gene_presence_absence_consensus_matrix <- sapply(intermed_gene_presence_absence_consensus[-1,-1],as.double)
model_start_pop <- readRDS(file = "PP_model_start_pop.rds")
delta_ranking <- readRDS(file = "delta_ranking.rds")
mass_cluster_freq_1 <- readRDS(file = "PP_mass_cluster_freq_1.rds")
mass_cluster_freq_2 <- readRDS(file = "PP_mass_cluster_freq_2.rds")
mass_cluster_freq_3 <- readRDS(file = "PP_mass_cluster_freq_3.rds")
mass_VT <- readRDS(file = "PP_mass_VT.rds")
mass_clusters <- length(unique(seq_clusters$Cluster))
avg_cluster_freq <- rep(1/mass_clusters, mass_clusters)
output_filename <- "4param_COGtriangles_PopPUNK"
# process data with particle filter:
dt <- 1/36 # we assume that the generation time of Strep. pneumo is 1 month
# we have data from 2001, 2004, 2007, so we want 3 (years) * 12 (months) = 36 updates in-between
peripost_mass_cluster_freq <- data.frame("year" = c(1, 2), rbind(mass_cluster_freq_2, mass_cluster_freq_3))
names(peripost_mass_cluster_freq) <- c("year", as.character(1:mass_clusters))
vacc_time <- 0
} else if(args[1] == "ggCaller" & args[2] == "manualSeqClusters"){
seq_clusters <- readRDS("Mass_Samples_accCodes.rds")
intermed_gene_presence_absence_consensus <- readRDS(file = "ggC_intermed_gene_presence_absence_consensus.rds")
intermed_gene_presence_absence_consensus_matrix <- sapply(intermed_gene_presence_absence_consensus[-1,-1],as.double)
model_start_pop <- readRDS(file = "model_start_pop.rds")
delta_ranking <- readRDS(file = "ggC_delta_ranking.rds")
mass_cluster_freq_1 <- readRDS(file = "mass_cluster_freq_1.rds")
mass_cluster_freq_2 <- readRDS(file = "mass_cluster_freq_2.rds")
mass_cluster_freq_3 <- readRDS(file = "mass_cluster_freq_3.rds")
mass_VT <- readRDS(file = "mass_VT.rds")
mass_clusters <- length(unique(seq_clusters$SequenceCluster))
avg_cluster_freq <- rep(1/mass_clusters, mass_clusters)
output_filename <- "4param_ggCaller_manSeqClusters"
# process data with particle filter:
dt <- 1/36 # we assume that the generation time of Strep. pneumo is 1 month
# we have data from 2001, 2004, 2007, so we want 3 (years) * 12 (months) = 36 updates in-between
peripost_mass_cluster_freq <- data.frame("year" = c(1, 2), rbind(mass_cluster_freq_2, mass_cluster_freq_3))
names(peripost_mass_cluster_freq) <- c("year", as.character(1:mass_clusters))
vacc_time <- 0
} else if(args[1] == "COGtriangles" & args[2] == "manualSeqClusters"){
seq_clusters <- readRDS("Mass_Samples_accCodes.rds")
intermed_gene_presence_absence_consensus <- readRDS(file = "intermed_gene_presence_absence_consensus.rds")
intermed_gene_presence_absence_consensus_matrix <- sapply(intermed_gene_presence_absence_consensus[-1,-1],as.double)
model_start_pop <- readRDS(file = "model_start_pop.rds")
delta_ranking <- readRDS(file = "delta_ranking.rds")
mass_cluster_freq_1 <- readRDS(file = "mass_cluster_freq_1.rds")
mass_cluster_freq_2 <- readRDS(file = "mass_cluster_freq_2.rds")
mass_cluster_freq_3 <- readRDS(file = "mass_cluster_freq_3.rds")
mass_VT <- readRDS(file = "mass_VT.rds")
mass_clusters <- length(unique(seq_clusters$SequenceCluster))
avg_cluster_freq <- rep(1/mass_clusters, mass_clusters)
output_filename <- "4param_COGtriangles_manSeqClusters"
# process data with particle filter:
dt <- 1/36 # we assume that the generation time of Strep. pneumo is 1 month
# we have data from 2001, 2004, 2007, so we want 3 (years) * 12 (months) = 36 updates in-between
peripost_mass_cluster_freq <- data.frame("year" = c(1, 2), rbind(mass_cluster_freq_2, mass_cluster_freq_3))
names(peripost_mass_cluster_freq) <- c("year", as.character(1:mass_clusters))
vacc_time <- 0
} else if(args[1] == "Nepal" & args[2] == "PopPUNK"){
seq_clusters <- readRDS("Nepal_PP.rds")
intermed_gene_presence_absence_consensus <- readRDS(file = "Nepal_ggCaller_intermed_consensus.rds")
intermed_gene_presence_absence_consensus_matrix <- sapply(intermed_gene_presence_absence_consensus[-1,-1],as.double)
model_start_pop <- readRDS(file = "Nepal_model_start_pop.rds")
delta_ranking <- readRDS(file = "Nepal_delta_ranking.rds")
#mass_cluster_freq_1 <- readRDS(file = "Nepal_cluster_freqs_1.rds")
#mass_cluster_freq_2 <- readRDS(file = "Nepal_cluster_freqs_2.rds")
#mass_cluster_freq_3 <- readRDS(file = "Nepal_cluster_freqs_3.rds")
#mass_cluster_freq_4 <- readRDS(file = "Nepal_cluster_freqs_4.rds")
#mass_cluster_freq_5 <- readRDS(file = "Nepal_cluster_freqs_5.rds")
mass_cluster_freq_6 <- readRDS(file = "Nepal_cluster_freqs_6.rds")
mass_cluster_freq_7 <- readRDS(file = "Nepal_cluster_freqs_7.rds")
mass_cluster_freq_8 <- readRDS(file = "Nepal_cluster_freqs_8.rds")
mass_cluster_freq_9 <- readRDS(file = "Nepal_cluster_freqs_9.rds")
mass_cluster_freq_10 <- readRDS(file = "Nepal_cluster_freqs_10.rds")
mass_cluster_freq_11 <- readRDS(file = "Nepal_cluster_freqs_11.rds")
mass_cluster_freq_12 <- readRDS(file = "Nepal_cluster_freqs_12.rds")
mass_cluster_freq_13 <- readRDS(file = "Nepal_cluster_freqs_13.rds")
mass_cluster_freq_14 <- readRDS(file = "Nepal_cluster_freqs_14.rds")
mass_VT <- readRDS(file = "Nepal_VT.rds")
mass_clusters <- length(unique(seq_clusters$Cluster))
avg_cluster_freq <- rep(1/mass_clusters, mass_clusters)
output_filename <- "Nepal_ggCaller_PopPUNK"
dt <- 1/12
#peripost_mass_cluster_freq <- data.frame("year" = 1:13, rbind(mass_cluster_freq_2, mass_cluster_freq_3, mass_cluster_freq_4, mass_cluster_freq_5, mass_cluster_freq_6, mass_cluster_freq_7, mass_cluster_freq_8, mass_cluster_freq_9,mass_cluster_freq_10, mass_cluster_freq_11, mass_cluster_freq_12, mass_cluster_freq_13,mass_cluster_freq_14))
# now using 2009 as the start population (Nepal_cluster_freqs_5.rds)
peripost_mass_cluster_freq <- data.frame("year" = 1:9, rbind(mass_cluster_freq_6, mass_cluster_freq_7, mass_cluster_freq_8, mass_cluster_freq_9,mass_cluster_freq_10, mass_cluster_freq_11, mass_cluster_freq_12, mass_cluster_freq_13,mass_cluster_freq_14))
names(peripost_mass_cluster_freq) <- c("year", as.character(1:mass_clusters))
vacc_time <- 6
} else if(args[1] == "Navajo" & args[2] == "PopPUNK"){
seq_clusters <- readRDS("Navajo_PP.rds")
intermed_gene_presence_absence_consensus <- readRDS(file = "Navajo_ggCaller_intermed_consensus.rds")
intermed_gene_presence_absence_consensus_matrix <- sapply(intermed_gene_presence_absence_consensus[-1,-1],as.double)
model_start_pop <- readRDS(file = "Navajo_model_start_pop.rds")
delta_ranking <- readRDS(file = "Navajo_delta_ranking.rds")
mass_cluster_freq_1 <- readRDS(file = "Navajo_cluster_freqs_1.rds")
mass_cluster_freq_2 <- readRDS(file = "Navajo_cluster_freqs_2.rds")
mass_cluster_freq_3 <- readRDS(file = "Navajo_cluster_freqs_3.rds")
mass_cluster_freq_4 <- readRDS(file = "Navajo_cluster_freqs_4.rds")
mass_cluster_freq_5 <- readRDS(file = "Navajo_cluster_freqs_5.rds")
mass_cluster_freq_6 <- readRDS(file = "Navajo_cluster_freqs_6.rds")
mass_cluster_freq_7 <- readRDS(file = "Navajo_cluster_freqs_7.rds")
mass_cluster_freq_8 <- readRDS(file = "Navajo_cluster_freqs_8.rds")
mass_cluster_freq_9 <- readRDS(file = "Navajo_cluster_freqs_9.rds")
mass_cluster_freq_10 <- readRDS(file = "Navajo_cluster_freqs_10.rds")
mass_cluster_freq_11 <- readRDS(file = "Navajo_cluster_freqs_11.rds")
mass_cluster_freq_12 <- readRDS(file = "Navajo_cluster_freqs_12.rds")
mass_cluster_freq_13 <- readRDS(file = "Navajo_cluster_freqs_13.rds")
mass_cluster_freq_14 <- readRDS(file = "Navajo_cluster_freqs_14.rds")
mass_cluster_freq_15 <- readRDS(file = "Navajo_cluster_freqs_15.rds")
mass_VT <- readRDS(file = "Navajo_VT.rds")
mass_clusters <- length(unique(seq_clusters$Cluster))
avg_cluster_freq <- rep(1/mass_clusters, mass_clusters)
output_filename <- "Navajo_ggCaller_PopPUNK"
dt <- 1/12
peripost_mass_cluster_freq <- data.frame("year" = 1:14, rbind(mass_cluster_freq_2,mass_cluster_freq_3,mass_cluster_freq_4,mass_cluster_freq_5,mass_cluster_freq_6, mass_cluster_freq_7, mass_cluster_freq_8, mass_cluster_freq_9,mass_cluster_freq_10, mass_cluster_freq_11, mass_cluster_freq_12, mass_cluster_freq_13,mass_cluster_freq_14,mass_cluster_freq_15))
names(peripost_mass_cluster_freq) <- c("year", as.character(1:mass_clusters))
vacc_time <- 2 # trying vacc time =2 instead of 5 as before
} else if(args[1] == "UK" & args[2] == "PopPUNK"){
seq_clusters <- readRDS("UK_PP.rds")
intermed_gene_presence_absence_consensus <- readRDS(file = "UK_ggCaller_intermed_consensus.rds")
intermed_gene_presence_absence_consensus_matrix <- sapply(intermed_gene_presence_absence_consensus[-1,-1],as.double)
model_start_pop <- readRDS(file = "UK_model_start_pop.rds")
delta_ranking <- readRDS(file = "UK_delta_ranking.rds")
mass_cluster_freq_1 <- readRDS(file = "UK_cluster_freqs_1.rds")
mass_cluster_freq_2 <- readRDS(file = "UK_cluster_freqs_2.rds")
mass_cluster_freq_3 <- readRDS(file = "UK_cluster_freqs_3.rds")
mass_cluster_freq_4 <- readRDS(file = "UK_cluster_freqs_4.rds")
mass_cluster_freq_5 <- readRDS(file = "UK_cluster_freqs_5.rds")
mass_cluster_freq_6 <- readRDS(file = "UK_cluster_freqs_6.rds")
mass_cluster_freq_7 <- readRDS(file = "UK_cluster_freqs_7.rds")
mass_VT <- readRDS(file = "UK_VT.rds")
mass_clusters <- length(unique(seq_clusters$Cluster))
avg_cluster_freq <- rep(1/mass_clusters, mass_clusters)
output_filename <- "UK_ggCaller_PopPUNK"
dt <- 1/12
peripost_mass_cluster_freq <- data.frame("year" = 1:6, rbind(mass_cluster_freq_2,mass_cluster_freq_3,mass_cluster_freq_4,mass_cluster_freq_5,mass_cluster_freq_6, mass_cluster_freq_7))
names(peripost_mass_cluster_freq) <- c("year", as.character(1:mass_clusters))
vacc_time <- 0
}
seq_clusters <- readRDS("Nepal_PP.rds")
intermed_gene_presence_absence_consensus <- readRDS(file = "Nepal_ggCaller_intermed_consensus.rds")
intermed_gene_presence_absence_consensus_matrix <- sapply(intermed_gene_presence_absence_consensus[-1,-1],as.double)
model_start_pop <- readRDS(file = "Nepal_model_start_pop.rds")
delta_ranking <- readRDS(file = "Nepal_delta_ranking.rds")
#mass_cluster_freq_1 <- readRDS(file = "Nepal_cluster_freqs_1.rds")
#mass_cluster_freq_2 <- readRDS(file = "Nepal_cluster_freqs_2.rds")
#mass_cluster_freq_3 <- readRDS(file = "Nepal_cluster_freqs_3.rds")
#mass_cluster_freq_4 <- readRDS(file = "Nepal_cluster_freqs_4.rds")
#mass_cluster_freq_5 <- readRDS(file = "Nepal_cluster_freqs_5.rds")
mass_cluster_freq_6 <- readRDS(file = "Nepal_cluster_freqs_6.rds")
mass_cluster_freq_7 <- readRDS(file = "Nepal_cluster_freqs_7.rds")
mass_cluster_freq_8 <- readRDS(file = "Nepal_cluster_freqs_8.rds")
mass_cluster_freq_9 <- readRDS(file = "Nepal_cluster_freqs_9.rds")
mass_cluster_freq_10 <- readRDS(file = "Nepal_cluster_freqs_10.rds")
mass_cluster_freq_11 <- readRDS(file = "Nepal_cluster_freqs_11.rds")
mass_cluster_freq_12 <- readRDS(file = "Nepal_cluster_freqs_12.rds")
mass_cluster_freq_13 <- readRDS(file = "Nepal_cluster_freqs_13.rds")
mass_cluster_freq_14 <- readRDS(file = "Nepal_cluster_freqs_14.rds")
mass_cluster_freq_14 <- readRDS(file = "Nepal_cluster_freqs_14.rds")
mass_cluster_freq_15 <- readRDS(file = "Nepal_cluster_freqs_15.rds")
mass_cluster_freq_16 <- readRDS(file = "Nepal_cluster_freqs_16.rds")
mass_VT <- readRDS(file = "Nepal_VT.rds")
mass_clusters <- length(unique(seq_clusters$Cluster))
avg_cluster_freq <- rep(1/mass_clusters, mass_clusters)
output_filename <- "Nepal_ggCaller_PopPUNK"
dt <- 1/12
#peripost_mass_cluster_freq <- data.frame("year" = 1:13, rbind(mass_cluster_freq_2, mass_cluster_freq_3, mass_cluster_freq_4, mass_cluster_freq_5, mass_cluster_freq_6, mass_cluster_freq_7, mass_cluster_freq_8, mass_cluster_freq_9,mass_cluster_freq_10, mass_cluster_freq_11, mass_cluster_freq_12, mass_cluster_freq_13,mass_cluster_freq_14))
# now using 2009 as the start population (Nepal_cluster_freqs_5.rds)
peripost_mass_cluster_freq <- data.frame("year" = 1:11, rbind(mass_cluster_freq_6, mass_cluster_freq_7, mass_cluster_freq_8, mass_cluster_freq_9,mass_cluster_freq_10, mass_cluster_freq_11, mass_cluster_freq_12, mass_cluster_freq_13,mass_cluster_freq_14, mass_cluster_freq_15, mass_cluster_freq_16))
names(peripost_mass_cluster_freq) <- c("year", as.character(1:mass_clusters))
vacc_time <- 7
vacc_time <- 6
threads_total <- 1
worker_nodes <- 1
stoch_run <- FALSE
fitting_mass_data <- mcstate::particle_filter_data(data = peripost_mass_cluster_freq,
time = "year",
rate = 1 / dt,
initial_time = 0)
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
# Using MCMC to infer parameters
pmcmc_sigma_f <- mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0, max = 1)
#pmcmc_sigma_w <- 0
pmcmc_sigma_w <- -1000
pmcmc_prop_f <- mcstate::pmcmc_parameter("prop_f", 0.2, min = 0, max = 1)
pmcmc_m <- mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1)
pmcmc_v <- mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)
species_no <- mass_clusters
no_clusters <- mass_clusters
gene_no <- nrow(intermed_gene_presence_absence_consensus_matrix)
Pop_ini <- model_start_pop
Pop_eq <- model_start_pop
Genotypes <- intermed_gene_presence_absence_consensus_matrix
capacity <- sum(model_start_pop)
delta <- delta_ranking
vaccTypes <- mass_VT
#vacc_time <- 0
#dt <- 1/36
migVec <- avg_cluster_freq
as_double_mtx <- function(x){
sapply(x,as.double)
}
complex_params = list(species_no = species_no, Pop_ini = Pop_ini, Pop_eq = Pop_eq, Genotypes = intermed_gene_presence_absence_consensus[-1,-1], capacity = capacity, delta = delta, vaccTypes = vaccTypes, gene_no = gene_no, vacc_time = vacc_time, dt = dt, migVec = migVec, sigma_w = pmcmc_sigma_w)
complex_params = list(species_no = species_no, Pop_ini = Pop_ini, Pop_eq = Pop_eq, Genotypes = lapply(intermed_gene_presence_absence_consensus[-1,-1],as_double_mtx), capacity = capacity, delta = delta, vaccTypes = vaccTypes, gene_no = gene_no, vacc_time = vacc_time, dt = dt, migVec = migVec, sigma_w = pmcmc_sigma_w)
transform <- function(complex_data) {
mcstate_transform <- function(mcstate_params) {
odin_dust_params <- c(complex_data, as.list(mcstate_params))
odin_dust_params
}
mcstate_transform
}
make_transform <- function(m) {
function(theta) {
as_double_mtx <- function(x){
sapply(x,as.double)
}
c(lapply(m, as_double_mtx), as.list(theta))
}
}
take_list <- function(x){
print(x$Genotype)
}
transform <- function() {
make_transform(complex_params)}
transformed_params <<- make_transform(complex_params)
proposal_matrix <- diag(0.1,4) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 01), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, transform(complex_params))
mcmc_pars$initial()
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 01), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars$initial()
#WF$public_methods$has_openmp()
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
n_steps <- 5
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 1)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
length(Nepal_delta_ranking)
length(Nepal_gene_freq_preVac)
length(Nepal_ggCaller_byYear_intermed)
length(Nepal_cluster_freqs)
length(seq_no_per_year)
length(Nepal_time_points_selected)
length(Nepal_time_points_selected)
Nepal_time_points_selected
Nepal_ggCaller_byYear_intermed <- vector(mode = "list", length = length(Nepal_time_points_selected))
for (i in 1:length(Nepal_time_points_selected)) {
Nepal_ggCaller_year <- data.frame(matrix(0, nrow = sum(Nepal_gene_filter)+1,ncol = length(which(Nepal_meta_dataPP$Year==Nepal_time_points_selected[i]))+1))
if(ncol(Nepal_ggCaller_byYear[[i]])>1){
Nepal_ggCaller_year <-  Nepal_ggCaller_byYear[[i]][c(1,which(Nepal_gene_filter==1)+1),]
}
else{
Nepal_ggCaller_year <-  data.frame(matrix(Nepal_ggCaller_byYear[[6]][c(1,which(Nepal_gene_filter==1)+1),1], nrow = sum(Nepal_gene_filter)+1,ncol = 1))
}
Nepal_ggCaller_byYear_intermed[[i]] <- Nepal_ggCaller_year
}
Nepal_cluster_freqs <- vector(mode = "list", length = length(Nepal_time_points_selected))
for(j in 1:length(Nepal_time_points_selected)){
Nepal_cluster_freqs[[j]] <- rep(0, no_Nepal_PP)
for (i in unique(Nepal_PP$Cluster)){
Nepal_cluster_freqs[[j]][which(unique(Nepal_PP$Cluster) == i)] <- length(which(Nepal_meta_dataPP[Nepal_meta_IDtoIndPP[Nepal_PP[Nepal_PP$Cluster == i,"Taxon"]],]$Year==Nepal_time_points_selected[j]))
}
}
Nepal_time_points_selected[6]
Nepal_cluster_freqs[[6]] <- rep(NA, no_Nepal_PP)
# I will use 2009 as start population I think
Nepal_cluster_freqs_preVac <- Nepal_cluster_freqs[[5]]
for (i in 1:length(Nepal_time_points_selected)) {
file_name <- paste("Nepal_cluster_freqs_", as.character(i),".rds", sep = "")
saveRDS(Nepal_cluster_freqs[[i]], file_name)
}
### create initial population that is based on the first time point data set
# sample from it with an Poisson process
expand_factor <- 15000 / sum(Nepal_cluster_freqs_preVac)
exp_noise <- 10
Nepal_model_start_pop <- (sapply((Nepal_cluster_freqs_preVac + rexp(n = length(Nepal_cluster_freqs_preVac), rate = exp_noise)) * expand_factor, rpois, n=1))
# visual check for the "sampling"
plot(Nepal_cluster_freqs_preVac/sum(Nepal_cluster_freqs_preVac))
points(Nepal_model_start_pop/sum(Nepal_model_start_pop), col = "red")
Nepal_model_start_pop <- (sapply((Nepal_cluster_freqs[[5]] + rexp(n = length(Nepal_cluster_freqs[[5]]), rate = exp_noise)) * expand_factor, rpois, n=1))
# visual check for the "sampling"
plot(Nepal_cluster_freqs[[5]]/sum(Nepal_cluster_freqs[[5]]))
points(Nepal_model_start_pop/sum(Nepal_model_start_pop), col = "red")
saveRDS(Nepal_model_start_pop, "Nepal_model_start_pop.rds")
# calculate gene frequencies first, separate for three time points
#Nepal_gene_freq_preVac <- apply(Nepal_ggCaller_intermed_preVac[-1,-1], 1, sum_as_int)
#Nepal_gene_freq_postVac <- apply(Nepal_ggCaller_byYear_intermed[[length(Nepal_ggCaller_byYear_intermed)]][-1,-1], 1, sum_as_int)
Nepal_gene_freq_preVac <- Nepal_cluster_freqs[[5]]
Nepal_gene_freq_postVac <- Nepal_cluster_freqs[[14]]
Nepal_gene_freq_postVac <- Nepal_cluster_freqs[[15]]
length(Nepal_ggCaller_byYear_intermed)
Nepal_time_points_selected
# use 2009 as preVac reference
Nepal_ggCaller_intermed_preVac <- Nepal_ggCaller_byYear_intermed[[5]]
# calculate gene frequencies first, separate for three time points
#Nepal_gene_freq_preVac <- apply(Nepal_ggCaller_intermed_preVac[-1,-1], 1, sum_as_int)
#Nepal_gene_freq_postVac <- apply(Nepal_ggCaller_byYear_intermed[[length(Nepal_ggCaller_byYear_intermed)]][-1,-1], 1, sum_as_int)
Nepal_gene_freq_preVac <- apply(Nepal_ggCaller_intermed_preVac[-1,-1], 1, sum_as_int)
Nepal_gene_freq_postVac <- apply(Nepal_ggCaller_byYear_intermed[[15]][-1,-1], 1, sum_as_int)
# first, calculate pre/peri and post vacc frequencies of genes:
Nepal_gene_freq_preVac_rel <- Nepal_gene_freq_preVac/sum(Nepal_gene_freq_preVac)
Nepal_gene_freq_postVac_rel <- Nepal_gene_freq_postVac/sum(Nepal_gene_freq_postVac)
# calculate delta statistic (refer to Corander et al. for more info)
Nepal_delta_data <- (Nepal_gene_freq_postVac_rel - Nepal_gene_freq_preVac_rel) ^ 2 / (1 - Nepal_gene_freq_preVac_rel * (1 - Nepal_gene_freq_preVac_rel))
Nepal_delta_ranking <- rank(Nepal_delta_data)
saveRDS(Nepal_delta_ranking,"Nepal_delta_ranking.rds")
length(Nepal_delta_ranking)
delta_ranking <- readRDS(file = "Nepal_delta_ranking.rds")
fitting_mass_data <- mcstate::particle_filter_data(data = peripost_mass_cluster_freq,
time = "year",
rate = 1 / dt,
initial_time = 0)
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
# Using MCMC to infer parameters
pmcmc_sigma_f <- mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0, max = 1)
#pmcmc_sigma_w <- 0
pmcmc_sigma_w <- -1000
pmcmc_prop_f <- mcstate::pmcmc_parameter("prop_f", 0.2, min = 0, max = 1)
pmcmc_m <- mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1)
pmcmc_v <- mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)
species_no <- mass_clusters
no_clusters <- mass_clusters
gene_no <- nrow(intermed_gene_presence_absence_consensus_matrix)
Pop_ini <- model_start_pop
Pop_eq <- model_start_pop
Genotypes <- intermed_gene_presence_absence_consensus_matrix
capacity <- sum(model_start_pop)
delta <- delta_ranking
vaccTypes <- mass_VT
#vacc_time <- 0
#dt <- 1/36
migVec <- avg_cluster_freq
as_double_mtx <- function(x){
sapply(x,as.double)
}
complex_params = list(species_no = species_no, Pop_ini = Pop_ini, Pop_eq = Pop_eq, Genotypes = intermed_gene_presence_absence_consensus[-1,-1], capacity = capacity, delta = delta, vaccTypes = vaccTypes, gene_no = gene_no, vacc_time = vacc_time, dt = dt, migVec = migVec, sigma_w = pmcmc_sigma_w)
complex_params = list(species_no = species_no, Pop_ini = Pop_ini, Pop_eq = Pop_eq, Genotypes = lapply(intermed_gene_presence_absence_consensus[-1,-1],as_double_mtx), capacity = capacity, delta = delta, vaccTypes = vaccTypes, gene_no = gene_no, vacc_time = vacc_time, dt = dt, migVec = migVec, sigma_w = pmcmc_sigma_w)
transform <- function(complex_data) {
mcstate_transform <- function(mcstate_params) {
odin_dust_params <- c(complex_data, as.list(mcstate_params))
odin_dust_params
}
mcstate_transform
}
make_transform <- function(m) {
function(theta) {
as_double_mtx <- function(x){
sapply(x,as.double)
}
c(lapply(m, as_double_mtx), as.list(theta))
}
}
take_list <- function(x){
print(x$Genotype)
}
transform <- function() {
make_transform(complex_params)}
transformed_params <<- make_transform(complex_params)
proposal_matrix <- diag(0.1,4) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 01), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars$initial()
#WF$public_methods$has_openmp()
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
n_steps <- 5
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 1)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
n_steps <- 1000
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains =4, n_workers = 4,
n_threads_total = 4)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run, burnin = 250, thin = 1)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
print(parameter_mean_hpd)
det_mcmc1 <- coda::as.mcmc(cbind(det_pmcmc_run$probabilities, det_pmcmc_run$pars))
plot(det_mcmc1)
plot(det_mcmc1)
det_mcmc1 <- coda::as.mcmc(cbind(det_pmcmc_run$probabilities, det_pmcmc_run$pars))
plot(det_mcmc1)
plot(det_mcmc1)
print("det_mcmc_1 final log likelihood")
processed_chains$probabilities[nrow(processed_chains$probabilities),2]
print("det_mcmc_1 mean log likelihood")
mean(processed_chains$probabilities[,2])
det_proposal_matrix <- cov(processed_chains$pars)
barplot(seq_no_per_year, xlab = "Sequencing Years", ylim = c(0, 1200), ylab = "Sequence Counts")
length(seq_no_per_year)
seq_no_per_year[15]
seq_no_per_year[16]
