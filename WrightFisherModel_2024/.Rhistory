complex_params <- c(Pop_ini, Pop_eq, Genotypes, capacity, delta, vaccTypes, species_no, gene_no, vacc_time, dt, migVec)
make_transform <- function(p) {
function(theta){
c(list(Pop_ini = p[1:mass_clusters],
Pop_eq = p[(mass_clusters +1) : (mass_clusters + mass_clusters)],
Genotypes = matrix(p[(mass_clusters + mass_clusters + 1): ((mass_clusters + mass_clusters + 1) + (gene_no * species_no) - 1)], nrow = gene_no, ncol = species_no),
capacity = p[((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 1],
delta = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2) : (((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no -1)],
vaccTypes = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) : ((((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters -1)],
species_no = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters],
gene_no = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 1],
vacc_time = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 2],
dt = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 3],
migVec = p[((((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 4):((((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 4 + species_no - 1)]), as.list(theta))
}
}
transform <- function(x) {
make_transform(complex_params)}
proposal_matrix <- diag(0.1, 5) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
log(0.15)
log(1)
# here, all parameters are proposed independently.
# think about this, this might not actually be true
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(pmcmc_sigma_f, pmcmc_sigma_w, pmcmc_prop_f, pmcmc_m, pmcmc_v), proposal_matrix, transform)
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -2, min =-1000, max = 0), mcstate::pmcmc_parameter("sigma_w", -10, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
#= make_transform(c(Pop_ini, Pop_eq, Genotypes, capacity, delta, vaccTypes, species_no, gene_no, vacc_time)))
#mcmc_pars$names()
#mcmc_pars$model(mcmc_pars$initial())
mcmc_pars$initial()
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("sigma_w", 0.0011, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
n_steps <- 1000
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 4)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run, burnin = 250, thin = 1)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
print(parameter_mean_hpd)
log(0.4828107)
log(0.4303210)
det_mcmc1 <- coda::as.mcmc(cbind(det_pmcmc_run$probabilities, det_pmcmc_run$pars))
plot(det_mcmc1)
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("sigma_w", 0.0011, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -2, min =-1000, max = 0), mcstate::pmcmc_parameter("sigma_w", -10, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
n_steps <- 1000
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 4)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run, burnin = 250, thin = 1)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
print(parameter_mean_hpd)
log(-2.01469911)
exp(-2.01469911)
exp(-9.78887975)
det_mcmc1 <- coda::as.mcmc(cbind(det_pmcmc_run$probabilities, det_pmcmc_run$pars))
plot(det_mcmc1)
# read in model from file
WF <- odin.dust::odin_dust("NFDS_Model_exp.R")
# likelihood for fitting:
ll_pois <- function(obs, model) {
exp_noise <- 1e6
if (is.na(obs)) {
# Creates vector of zeros in ll with same length, if no data
ll_obs <- numeric(length(model))
} else {
lambda <- model + rexp(n = length(model), rate = exp_noise)
ll_obs <- dpois(x = obs, lambda = lambda, log = TRUE)
}
ll_obs
}
combined_compare <- function(state, observed, pars = NULL) {
result <- 0
#data_size <- sum(mass_cluster_freq_1)
#model_size = 15000
data_size <- sum(unlist(observed))
model_size = sum(unlist(state))
for (i in 1:mass_clusters){
result <- result + ll_pois(observed[[as.character(i)]], state[1+i, , drop = TRUE]/model_size * data_size)
}
result
}
seq_clusters <- readRDS("PopPUNK_clusters.rds")
intermed_gene_presence_absence_consensus <- readRDS(file = "ggCPP_intermed_gene_presence_absence_consensus.rds")
intermed_gene_presence_absence_consensus_matrix <- sapply(intermed_gene_presence_absence_consensus[-1,-1],as.double)
model_start_pop <- readRDS(file = "PP_model_start_pop.rds")
delta_ranking <- readRDS(file = "ggC_inv_delta_ranking.rds")
mass_cluster_freq_1 <- readRDS(file = "PP_mass_cluster_freq_1.rds")
mass_cluster_freq_2 <- readRDS(file = "PP_mass_cluster_freq_2.rds")
mass_cluster_freq_3 <- readRDS(file = "PP_mass_cluster_freq_3.rds")
mass_VT <- readRDS(file = "PP_mass_VT.rds")
mass_clusters <- length(unique(seq_clusters$Cluster))
avg_cluster_freq <- rep(1/mass_clusters, mass_clusters)
output_filename <- "ggCaller_PopPUNK_exp"
# process data with particle filter:
dt <- 1/36 # we assume that the generation time of Strep. pneumo is 1 month
peripost_mass_cluster_freq <- data.frame("year" = c(1, 2), rbind(mass_cluster_freq_2, mass_cluster_freq_3))
names(peripost_mass_cluster_freq) <- c("year", as.character(1:mass_clusters))
fitting_mass_data <- mcstate::particle_filter_data(data = peripost_mass_cluster_freq,
time = "year",
rate = 1 / dt,
initial_time = 0)
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
# Using MCMC to infer parameters
pmcmc_L <- mcstate::pmcmc_parameter("L", 0.15, min = 0, max = 1)
pmcmc_K <- mcstate::pmcmc_parameter("K", 0.02, min = 0, max = 10)
pmcmc_x0 <- mcstate::pmcmc_parameter("x0", 0.2, min = 0, max = 1)
pmcmc_m <- mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1)
pmcmc_v <- mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)
species_no <- mass_clusters
no_clusters <- mass_clusters
gene_no <- nrow(intermed_gene_presence_absence_consensus_matrix)
Pop_ini <- model_start_pop
Pop_eq <- model_start_pop
Genotypes <- intermed_gene_presence_absence_consensus_matrix
capacity <- sum(model_start_pop)
delta <- delta_ranking
vaccTypes <- mass_VT
vacc_time <- 0
dt <- 1/36
migVec <- avg_cluster_freq
complex_params <- c(Pop_ini, Pop_eq, Genotypes, capacity, delta, vaccTypes, species_no, gene_no, vacc_time, dt, migVec)
make_transform <- function(p) {
function(theta){
c(list(Pop_ini = p[1:mass_clusters],
Pop_eq = p[(mass_clusters +1) : (mass_clusters + mass_clusters)],
Genotypes = matrix(p[(mass_clusters + mass_clusters + 1): ((mass_clusters + mass_clusters + 1) + (gene_no * species_no) - 1)], nrow = gene_no, ncol = species_no),
capacity = p[((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 1],
delta = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2) : (((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no -1)],
vaccTypes = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) : ((((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters -1)],
species_no = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters],
gene_no = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 1],
vacc_time = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 2],
dt = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 3],
migVec = p[((((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 4):((((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 4 + species_no - 1)]), as.list(theta))
}
}
transform <- function(x) {
make_transform(complex_params)}
proposal_matrix <- diag(0.1, 5) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("L", 0.5, min = 0, max = 1), mcstate::pmcmc_parameter("K", 0.004, min = 0, max = 10),mcstate::pmcmc_parameter("x0", -10, min = -100, max = 10), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars$initial()
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
n_steps <- 1000
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 4)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run, burnin = 250, thin = 1)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
print(parameter_mean_hpd)
print("det_mcmc_1 mean log likelihood")
mean(processed_chains$probabilities[,2])
det_mcmc1 <- coda::as.mcmc(cbind(det_pmcmc_run$probabilities, det_pmcmc_run$pars))
plot(det_mcmc1)
View(likelihood_grid)
# parameters from ggCPP fit with 4 parameter model (15.4.2024)
# but with transformed sigma_f, sigma_w and m because that is the current version of my model
ggCPP_params <- list(dt = 1/36, species_no = PP_mass_clusters,  gene_no = nrow(ggCPP_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(PP_model_start_pop), Pop_eq = as.double(PP_model_start_pop), capacity = sum(PP_model_start_pop), Genotypes = ggCPP_intermed_gene_presence_absence_consensus_matrix, sigma_f = log(0.11313856), sigma_w = -1000, prop_f = 0.37657870, delta = ggC_delta_ranking, m = log(0.01107152), migVec = PP_avg_cluster_freq, vaccTypes = PP_mass_VT, v = 0.14340557, vacc_time = 0)
WFmodel_ggCPP <- WF_nG_h_vP$new(pars = ggCPP_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
WF_nG_h_vP <- odin.dust::odin_dust("NFDS_Model.R")
PopPUNK_clusters <- readRDS("PopPUNK_clusters.rds")
ggCPP_intermed_gene_presence_absence_consensus <- readRDS(file = "ggCPP_intermed_gene_presence_absence_consensus.rds")
ggCPP_intermed_gene_presence_absence_consensus_matrix <- sapply(ggCPP_intermed_gene_presence_absence_consensus[-1,-1],as.double)
PP_model_start_pop <- readRDS(file = "PP_model_start_pop.rds")
ggC_delta_ranking <- readRDS(file = "ggC_delta_ranking.rds")
PP_mass_cluster_freq_1 <- readRDS(file = "PP_mass_cluster_freq_1.rds")
PP_mass_cluster_freq_2 <- readRDS(file = "PP_mass_cluster_freq_2.rds")
PP_mass_cluster_freq_3 <- readRDS(file = "PP_mass_cluster_freq_3.rds")
PP_mass_VT <- readRDS(file = "PP_mass_VT.rds")
gridSearch <- function(sigma_f_vals, prop_f_vals){
likelihood_vals <- data.frame(matrix(0, nrow = length(sigma_f_vals), ncol = length(prop_f_vals)))
for (i in 1:length(sigma_f_vals)) {
for (j in 1:length(prop_f_vals)) {
ggCPP_params <- list(dt = 1/36, species_no = PP_mass_clusters,  gene_no = nrow(ggCPP_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(PP_model_start_pop), Pop_eq = as.double(PP_model_start_pop), capacity = sum(PP_model_start_pop), Genotypes = ggCPP_intermed_gene_presence_absence_consensus_matrix, sigma_f = log(sigma_f_vals[i]), sigma_w = -1000, prop_f = prop_f_vals[j], delta = ggC_delta_ranking, m = log(0.01107152), migVec = PP_avg_cluster_freq, vaccTypes = PP_mass_VT, v = 0.14340557, vacc_time = 0)
WFmodel_ggCPP <- WF_nG_h_vP$new(pars = ggCPP_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(WFmodel_ggCPP$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel_ggCPP$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
likelihood_vals[i,j] <- combined_compare(x[,1,37],PP_mass_cluster_freq_2) + combined_compare(x[,1,73],PP_mass_cluster_freq_3)
}
}
likelihood_vals
}
likelihood_grid <- gridSearch(sigma_f_vals = (1:20)/20, prop_f_vals = (1:20)/20)
rownames(likelihood_grid) <- (1:20)/20
colnames(likelihood_grid) <- (1:20)/20
PopPUNK_clusters <- readRDS("PopPUNK_clusters.rds")
ggCPP_intermed_gene_presence_absence_consensus <- readRDS(file = "ggCPP_intermed_gene_presence_absence_consensus.rds")
ggCPP_intermed_gene_presence_absence_consensus_matrix <- sapply(ggCPP_intermed_gene_presence_absence_consensus[-1,-1],as.double)
PP_model_start_pop <- readRDS(file = "PP_model_start_pop.rds")
ggC_delta_ranking <- readRDS(file = "ggC_delta_ranking.rds")
PP_mass_cluster_freq_1 <- readRDS(file = "PP_mass_cluster_freq_1.rds")
PP_mass_cluster_freq_2 <- readRDS(file = "PP_mass_cluster_freq_2.rds")
PP_mass_cluster_freq_3 <- readRDS(file = "PP_mass_cluster_freq_3.rds")
PP_mass_VT <- readRDS(file = "PP_mass_VT.rds")
gridSearch <- function(sigma_f_vals, prop_f_vals){
likelihood_vals <- data.frame(matrix(0, nrow = length(sigma_f_vals), ncol = length(prop_f_vals)))
for (i in 1:length(sigma_f_vals)) {
for (j in 1:length(prop_f_vals)) {
ggCPP_params <- list(dt = 1/36, species_no = PP_mass_clusters,  gene_no = nrow(ggCPP_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(PP_model_start_pop), Pop_eq = as.double(PP_model_start_pop), capacity = sum(PP_model_start_pop), Genotypes = ggCPP_intermed_gene_presence_absence_consensus_matrix, sigma_f = log(sigma_f_vals[i]), sigma_w = -1000, prop_f = prop_f_vals[j], delta = ggC_delta_ranking, m = log(0.01107152), migVec = PP_avg_cluster_freq, vaccTypes = PP_mass_VT, v = 0.14340557, vacc_time = 0)
WFmodel_ggCPP <- WF_nG_h_vP$new(pars = ggCPP_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(WFmodel_ggCPP$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel_ggCPP$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
likelihood_vals[i,j] <- combined_compare(x[,1,37],PP_mass_cluster_freq_2) + combined_compare(x[,1,73],PP_mass_cluster_freq_3)
}
}
likelihood_vals
}
likelihood_grid <- gridSearch(sigma_f_vals = (1:20)/20, prop_f_vals = (1:20)/20)
# try using dfoptim with likelihood
ll_pois <- function(obs, model) {
exp_noise <- 1e6
if (is.na(obs)) {
# Creates vector of zeros in ll with same length, if no data
ll_obs <- numeric(length(model))
} else {
lambda <- model + rexp(n = length(model), rate = exp_noise)
ll_obs <- dpois(x = obs, lambda = lambda, log = TRUE)
}
ll_obs
}
combined_compare <- function(state, observed, pars = NULL) {
result <- 0
#data_size <- sum(mass_cluster_freq_1)
#model_size = 15000
data_size <- sum(observed)
model_size = sum(state)
for (i in 1:length(observed)){
result <- result + ll_pois(observed[i], state[i]/model_size * data_size)
}
result
}
gridSearch <- function(sigma_f_vals, prop_f_vals){
likelihood_vals <- data.frame(matrix(0, nrow = length(sigma_f_vals), ncol = length(prop_f_vals)))
for (i in 1:length(sigma_f_vals)) {
for (j in 1:length(prop_f_vals)) {
ggCPP_params <- list(dt = 1/36, species_no = PP_mass_clusters,  gene_no = nrow(ggCPP_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(PP_model_start_pop), Pop_eq = as.double(PP_model_start_pop), capacity = sum(PP_model_start_pop), Genotypes = ggCPP_intermed_gene_presence_absence_consensus_matrix, sigma_f = log(sigma_f_vals[i]), sigma_w = -1000, prop_f = prop_f_vals[j], delta = ggC_delta_ranking, m = log(0.01107152), migVec = PP_avg_cluster_freq, vaccTypes = PP_mass_VT, v = 0.14340557, vacc_time = 0)
WFmodel_ggCPP <- WF_nG_h_vP$new(pars = ggCPP_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(WFmodel_ggCPP$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel_ggCPP$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
likelihood_vals[i,j] <- combined_compare(x[,1,37],PP_mass_cluster_freq_2) + combined_compare(x[,1,73],PP_mass_cluster_freq_3)
}
}
likelihood_vals
}
likelihood_grid <- gridSearch(sigma_f_vals = (1:20)/20, prop_f_vals = (1:20)/20)
rownames(likelihood_grid) <- (1:20)/20
colnames(likelihood_grid) <- (1:20)/20
# max: -240.126 for sigma_f_vals = 0.1, prop_f_vals = 0.4
saveRDS(likelihood_grid,"likelihood_grid.rds")
View(likelihood_grid)
plot(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.05", type = "l")
col_clb <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") #8 colorblind friendly colors
plot(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.05", type = "l")
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.1", col = col_clb[2])
plot(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.05", type = "l", ylim = c(-400, -240))
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.1", col = col_clb[2])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.15", col = col_clb[3])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.2", col = col_clb[4])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.25", col = col_clb[5])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.3", col = col_clb[6])
plot(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.05", type = "l", ylim = c(-450, -240))
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.1", col = col_clb[2])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.15", col = col_clb[3])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.2", col = col_clb[4])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.25", col = col_clb[5])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.3", col = col_clb[6])
legend(0, -400, legend=c("sigma_f 0.05", "sigma_f 0.1", "sigma_f 0.15", "sigma_f 0.2", "sigma_f 0.25", "sigma_f 0.3"),
col=col_clb, lty=1, cex=0.8)
plot(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.05", type = "l", ylim = c(-450, -240), xlab = "sigma_f", ylab = "likelihood")
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.1", col = col_clb[2])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.15", col = col_clb[3])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.2", col = col_clb[4])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.25", col = col_clb[5])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.3", col = col_clb[6])
legend(0, -400, legend=c("prop_f 0.05", "prop_f 0.1", "prop_f 0.15", "prop_f 0.2", "prop_f 0.25", "prop_f 0.3"),
col=col_clb, lty=1, cex=0.8)
plot(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.05", type = "l", ylim = c(-500, -240), xlab = "sigma_f", ylab = "likelihood")
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.1", col = col_clb[2])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.15", col = col_clb[3])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.2", col = col_clb[4])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.25", col = col_clb[5])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.3", col = col_clb[6])
legend(0, -400, legend=c("prop_f 0.05", "prop_f 0.1", "prop_f 0.15", "prop_f 0.2", "prop_f 0.25", "prop_f 0.3"),
col=col_clb, lty=1, cex=0.8)
plot(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.05", type = "l", ylim = c(-500, -240), xlab = "sigma_f", ylab = "likelihood")
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.1", col = col_clb[2])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.15", col = col_clb[3])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.2", col = col_clb[4])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.25", col = col_clb[5])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.3", col = col_clb[6])
legend(0, -400, legend=c("prop_f 0.05", "prop_f 0.1", "prop_f 0.15", "prop_f 0.2", "prop_f 0.25", "prop_f 0.3"),
col=col_clb, lty=1, cex=0.8)
plot(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.05", type = "l", ylim = c(-500, -240), xlab = "sigma_f", ylab = "likelihood")
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.1", col = col_clb[2])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.15", col = col_clb[3])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.2", col = col_clb[4])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.25", col = col_clb[5])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.3", col = col_clb[6])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.35", col = col_clb[7])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.4", col = col_clb[8])
legend(0, -400, legend=c("prop_f 0.05", "prop_f 0.1", "prop_f 0.15", "prop_f 0.2", "prop_f 0.25", "prop_f 0.3", "prop_f 0.35", "prop_f 0.4"),
col=col_clb, lty=1, cex=0.8)
plot(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.05", type = "l", ylim = c(-500, -240), xlab = "sigma_f", ylab = "likelihood", xaxt='n')
axis(1,at=(1:20)/20)
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.1", col = col_clb[2])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.15", col = col_clb[3])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.2", col = col_clb[4])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.25", col = col_clb[5])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.3", col = col_clb[6])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.35", col = col_clb[7])
lines(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.4", col = col_clb[8])
legend(0, -400, legend=c("prop_f 0.05", "prop_f 0.1", "prop_f 0.15", "prop_f 0.2", "prop_f 0.25", "prop_f 0.3", "prop_f 0.35", "prop_f 0.4"),
col=col_clb, lty=1, cex=0.8)
plot(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.05", ylim = c(-500, -240), xlab = "sigma_f", ylab = "likelihood", xaxt='n')
axis(1,at=(1:20)/20)
points(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.1", col = col_clb[2])
points(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.15", col = col_clb[3])
points(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.2", col = col_clb[4])
points(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.25", col = col_clb[5])
points(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.3", col = col_clb[6])
points(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.35", col = col_clb[7])
points(as.numeric(rownames(likelihood_grid)),likelihood_grid$"0.4", col = col_clb[8])
exp(-4.7588227)
exp(-2.3541900
)
((10:30)/20)
((10:30)/200)
((20:30)/200)
((50:70)/200)
((50:70)/100)
((35:45)/100)
((70:90)/200)
((10:30)/200)
# make grid around those values
likelihood_grid2 <- gridSearch(sigma_f_vals = ((10:30)/200), prop_f_vals = ((70:90)/200))
rownames(likelihood_grid2) <- ((10:30)/20)
colnames(likelihood_grid2) <- ((70:90)/200)
max(likelihood_grid2)
View(likelihood_grid2)
rownames(likelihood_grid2) <- ((10:30)/200)
colnames(likelihood_grid2) <- ((70:90)/200)
View(likelihood_grid2)
# max: -232.2814 for sigma_f_vals = 0.105, prop_f_vals = 0.38
saveRDS(likelihood_grid2,"likelihood_grid2.rds")
View(likelihood_grid)
((10:30)/200)
((60:80)/200)
((30:50)/200))
((30:50)/200)
exp(-2.3512797)
exp(-454.9737132)
exp(-4.7641440 )
# make grid around 2nd max values
likelihood_grid3 <- gridSearch(sigma_f_vals = ((60:80)/200), prop_f_vals = ((30:50)/200))
exp(3)
rownames(likelihood_grid3) <- ((60:80)/200)
colnames(likelihood_grid3) <- ((30:50)/200))
colnames(likelihood_grid3) <- ((30:50)/200)
# max: -232.2814 for sigma_f_vals = 0.105, prop_f_vals = 0.38
saveRDS(likelihood_grid3,"likelihood_grid3.rds")
View(likelihood_grid3)
max(likelihood_grid3)
plot(as.numeric(rownames(likelihood_grid)), as.numeric(colnames(likelihood_grid)), xlab = "sigma_f", ylab = "prop_f", xaxt='n')
a <- data.frame( x=rnorm(20000, 10, 1.9), y=rnorm(20000, 10, 1.2) )
b <- data.frame( x=rnorm(20000, 14.5, 1.9), y=rnorm(20000, 14.5, 1.9) )
c <- data.frame( x=rnorm(20000, 9.5, 1.9), y=rnorm(20000, 15.5, 1.9) )
data <- rbind(a,b,c)
View(data)
grid_results_df <- data.frame(matrix(0, nrow = 400, ncol = 3))
colnames(grid_results_df) <- c("sigma_f","prop_f","likelihood")
grid_results_df <- rep(((1:20)/20),20)
grid_results_df <- data.frame(matrix(0, nrow = 400, ncol = 3))
colnames(grid_results_df) <- c("sigma_f","prop_f","likelihood")
grid_results_df$sigma_f <- rep(((1:20)/20),20)
(1:20)/20)
(1:20)/20
rep(((1:20)/20),20)
(1:20)/20)
(1:20)/20
(1:20)/20[rep(1,20)]
((1:20)/20)[rep(1,20)]
((1:20)/20)[rep(1,20):rep(20,20)]
sort(((1:20)/20))
sort(rep(((1:20)/20),20))
grid_results_df$prop_f <- sort(rep(((1:20)/20),20))
c(likelihood_grid[,1:3])
likelihood_grid[,1]
c(likelihood_grid[,1],likelihood_grid[,2])
grid_results_df$likelihood <- c(likelihood_grid[,1],likelihood_grid[,2],likelihood_grid[,3],likelihood_grid[,4], likelihood_grid[,5],likelihood_grid[,6],likelihood_grid[,7],likelihood_grid[,8], likelihood_grid[,9],likelihood_grid[,10], likelihood_grid[,11],likelihood_grid[,12], likelihood_grid[,13],likelihood_grid[,14], likelihood_grid[,15],likelihood_grid[,16], likelihood_grid[,17],likelihood_grid[,18], likelihood_grid[,19],likelihood_grid[,20],)
grid_results_df$likelihood <- c(likelihood_grid[,1],likelihood_grid[,2],likelihood_grid[,3],likelihood_grid[,4], likelihood_grid[,5],likelihood_grid[,6],likelihood_grid[,7],likelihood_grid[,8], likelihood_grid[,9],likelihood_grid[,10], likelihood_grid[,11],likelihood_grid[,12], likelihood_grid[,13],likelihood_grid[,14], likelihood_grid[,15],likelihood_grid[,16], likelihood_grid[,17],likelihood_grid[,18], likelihood_grid[,19],likelihood_grid[,20])
View(grid_results_df)
View(likelihood_grid)
ggplot(grid_results_df, aes(x="sigma_f", y="prop_f") ) +
geom_point()
library(ggplot2)
ggplot(grid_results_df, aes(x="sigma_f", y="prop_f") ) +
geom_point()
ggplot(grid_results_df, aes(x=sigma_f, y=prop_f) ) +
geom_point()
ggplot(grid_results_df, aes(x=sigma_f, y=prop_f) ) +
geom_point() +
scale_fill_continuous(type = "viridis")
ggplot(grid_results_df, aes(x=sigma_f, y=prop_f) ) +
geom_point(aes(color = likelihood))
ggplot(grid_results_df, aes(x=sigma_f, y=prop_f) ) +
geom_point(aes(color = exp(likelihood)))
exp(-389.2107)
exp(-2409.9099)
log(-2409.9099)
log(2409.9099)
log(389.2107)
ggplot(grid_results_df, aes(x=sigma_f, y=prop_f) ) +
geom_point(aes(color = log(-likelihood)))
ggplot(grid_results_df, aes(x=sigma_f, y=prop_f) ) +
geom_point(aes(color = likelihood))
ggplot(grid_results_df, aes(x=sigma_f, y=prop_f) ) +
geom_point(aes(color = likelihood),type = "viridis")
ggplot(grid_results_df, aes(x=sigma_f, y=prop_f) ) +
geom_point(aes(color = likelihood,type = "viridis"))
ggplot(grid_results_df, aes(x=sigma_f, y=prop_f) ) +
geom_point(aes(fill = likelihood,))
ggplot(grid_results_df, aes(x=sigma_f, y=prop_f) ) +
geom_point(aes(color = likelihood))
ggplot(grid_results_df[1:200], aes(x=sigma_f, y=prop_f) ) +
geom_point(aes(color = likelihood))
ggplot(grid_results_df[1:200,], aes(x=sigma_f, y=prop_f) ) +
geom_point(aes(color = likelihood))
ggplot(grid_results_df[1:200,], aes(x=sigma_f, y=prop_f) ) +
geom_point(aes(color = log(-likelihood)))
grid_results_df2 <- data.frame(matrix(0, nrow = 400, ncol = 3))
colnames(grid_results_df2) <- c("sigma_f","prop_f","likelihood")
grid_results_df2$sigma_f <- rep(((1:20)/20),20)
grid_results_df2$prop_f <- sort(rep(((1:20)/20),20))
grid_results_df2$likelihood <- c(likelihood_grid2[,1],likelihood_grid2[,2],likelihood_grid2[,3],likelihood_grid2[,4], likelihood_grid2[,5],likelihood_grid2[,6],likelihood_grid2[,7],likelihood_grid2[,8], likelihood_grid2[,9],likelihood_grid2[,10], likelihood_grid2[,11],likelihood_grid2[,12], likelihood_grid2[,13],likelihood_grid2[,14], likelihood_grid2[,15],likelihood_grid2[,16], likelihood_grid2[,17],likelihood_grid2[,18], likelihood_grid2[,19],likelihood_grid2[,20])
length(rep(((10:30)/200)))
length((10:30)/200))
length((10:30)/200)
length((70:90)/200))
length((70:90)/200)
21*21
grid_results_df2 <- data.frame(matrix(0, nrow = 441, ncol = 3))
colnames(grid_results_df2) <- c("sigma_f","prop_f","likelihood")
grid_results_df2$sigma_f <- rep(((10:30)/200),21)
grid_results_df2$prop_f <- sort(rep(((70:90)/200),21))
grid_results_df2$likelihood <- c(likelihood_grid2[,1],likelihood_grid2[,2],likelihood_grid2[,3],likelihood_grid2[,4], likelihood_grid2[,5],likelihood_grid2[,6],likelihood_grid2[,7],likelihood_grid2[,8], likelihood_grid2[,9],likelihood_grid2[,10], likelihood_grid2[,11],likelihood_grid2[,12], likelihood_grid2[,13],likelihood_grid2[,14], likelihood_grid2[,15],likelihood_grid2[,16], likelihood_grid2[,17],likelihood_grid2[,18], likelihood_grid2[,19],likelihood_grid2[,20])
grid_results_df2$likelihood <- c(likelihood_grid2[,1],likelihood_grid2[,2],likelihood_grid2[,3],likelihood_grid2[,4], likelihood_grid2[,5],likelihood_grid2[,6],likelihood_grid2[,7],likelihood_grid2[,8], likelihood_grid2[,9],likelihood_grid2[,10], likelihood_grid2[,11],likelihood_grid2[,12], likelihood_grid2[,13],likelihood_grid2[,14], likelihood_grid2[,15],likelihood_grid2[,16], likelihood_grid2[,17],likelihood_grid2[,18], likelihood_grid2[,19],likelihood_grid2[,20], likelihood_grid2[,21])
ggplot(grid_results_df2, aes(x=sigma_f, y=prop_f) ) +
geom_point(aes(color = likelihood))
ggplot(grid_results_df, aes(x=sigma_f, y=prop_f) ) +
geom_point(aes(color = likelihood))
exp(-5)
exp(10)
