pmcmc_sigma_w <- -1000
pmcmc_prop_f <- mcstate::pmcmc_parameter("prop_f", 0.2, min = 0, max = 1)
pmcmc_m <- mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1)
pmcmc_v <- mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)
species_no <- mass_clusters
no_clusters <- mass_clusters
gene_no <- nrow(intermed_gene_presence_absence_consensus_matrix)
Pop_ini <- data.frame(model_start_pop)
Pop_eq <- rowSums(model_start_pop)
Genotypes <- intermed_gene_presence_absence_consensus_matrix
capacity <- sum(model_start_pop)
delta <- delta_ranking
vaccTypes1 <- vaccTypes1
vaccTypes2 <- vaccTypes2
migVec <- data.frame(avg_cluster_freq)
complex_params = list(species_no = species_no, Pop_ini = Pop_ini, Pop_eq = Pop_eq, Genotypes = intermed_gene_presence_absence_consensus[-1,-1], capacity = capacity, delta = delta, vaccTypes1 = vaccTypes1, vaccTypes2 = vaccTypes2, gene_no = gene_no, vacc_time1 = vacc_time1, vacc_time2 = vacc_time2, dt = dt, sigma_w = pmcmc_sigma_w, migVec = (migVec), sero_no = sero_no)
make_transform <- function(m) {
function(theta) {
as_double_mtx <- function(x){
sapply(x,as.double)
}
c(lapply(m, as_double_mtx), as.list(theta))
}
}
proposal_matrix <- diag(0.1,4) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
index <- function(info) {
list(run = c(sum_clust = info$index$Pop_tot),
state = c(Pop = info$index$Pop))
}
#proposal_matrix <- diag(0.1,4) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
# here, all parameters are proposed independently.
# think about this, this might not actually be true
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(pmcmc_sigma_f, pmcmc_sigma_w, pmcmc_prop_f, pmcmc_m, pmcmc_v), proposal_matrix, transform)
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 01), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
proposal_matrix <- diag(c(exp(1), 0.1, exp(1), 0.1))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", runif(n=1, min=-10, max=0), min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", runif(n=1, min=0, max=1), min = 0, max = 1), mcstate::pmcmc_parameter("m", runif(n=1, min=-10, max=0), min = -1000, max = 0), mcstate::pmcmc_parameter("v", runif(n=1, min=0, max=1), min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars$initial()
#WF$public_methods$has_openmp()
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
index = index,
compare = combined_compare)
n_steps <- 5
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 1)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
n_steps <- 100
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains =4, n_workers = 4,
n_threads_total = 4)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run, burnin = 25, thin = 1)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
print(parameter_mean_hpd)
det_mcmc1 <- coda::as.mcmc(cbind(det_pmcmc_run$probabilities, det_pmcmc_run$pars))
plot(det_mcmc1)
processed_chains$probabilities[nrow(processed_chains$probabilities),2]
print("det_mcmc_1 mean log likelihood")
mean(processed_chains$probabilities[,2])
summary(coda::as.mcmc(Navajo_PPxSero_mcmc))
exp(-4.0370)
exp(-4.0370) - exp(0.31855)
exp(-4.0370 - 0.31855)
exp(-4.0370 + 0.31855)
0.8789 - 0.05312
0.8789 + 0.05312
-778.2323 - 1.47582
-778.2323 + 1.47582
exp(-3.3016)
exp(-3.3016 - 0.29131)
exp(-4.3740)
exp(-3.6812)
exp(-3.3016 + 0.29131)
0.3290 - 0.15311
0.3290 + 0.15311
cluster_samples_ParamVar <- readRDS("cluster_samples_ParamVar1000.rds")
head(cluster_samples_ParamVar)
#Data
mass_cluster_freq_1 <- readRDS(file = "PP_mass_cluster_freq_1.rds")
mass_cluster_freq_2 <- readRDS(file = "PP_mass_cluster_freq_2.rds")
mass_cluster_freq_3 <- readRDS(file = "PP_mass_cluster_freq_3.rds")
PP_mass_sero_freq_1 <- readRDS(file = "PP_mass_sero_freq_1.rds")
PP_mass_sero_freq_2 <- readRDS(file = "PP_mass_sero_freq_2.rds")
PP_mass_sero_freq_3 <- readRDS(file = "PP_mass_sero_freq_3.rds")
mass_cluster_freq_3
colMeans(cluster_samples_ParamVar)
colMeans(cluster_samples_ParamVar)/rowSums(cluster_samples_ParamVar)
rowSums(cluster_samples_ParamVar)
cluster_samples_ParamVar_rel <- cluster_samples_ParamVar/rowSums(cluster_samples_ParamVar)
colMeans(cluster_samples_ParamVar_rel)
mass_cluster_freq_3/sum(mass_cluster_freq_3)
plot(mass_cluster_freq_3/sum(mass_cluster_freq_3))
points(colMeans(cluster_samples_ParamVar_rel), col = "red")
sd_Mass_ParamSamples <- apply(cluster_samples_ParamVar_rel, 2,sd)
mean_Mass_ParamSamples <- apply(cluster_samples_ParamVar_rel,2,mean)
sd_Mass_ParamSamples/mean_Mass_ParamSamples
plot(sd_Mass_ParamSamples/mean_Mass_ParamSamples)
plot(mass_cluster_freq_3/sum(mass_cluster_freq_3))
plot(mass_cluster_freq_3/sum(mass_cluster_freq_3), ylim = c(0, .7))
lines(sd_Mass_ParamSamples/mean_Mass_ParamSamples)
sd(c(90, 100, 110))
sum(c(90, 100, 110))/mean(c(90, 100, 110))
sqrt(sum(c(90, 100, 110))/mean(c(90, 100, 110)))
sqrt(sum(c(90, 100, 110))/3)
sqrt(sum(c(90, 100, 110))/2)
rmultinom(1,1,mass_cluster_freq_3/sum(mass_cluster_freq_3))
rmultinom(1,sum(mass_cluster_freq_3),mass_cluster_freq_3/sum(mass_cluster_freq_3))
rmultinom(1000,sum(mass_cluster_freq_3),mass_cluster_freq_3/sum(mass_cluster_freq_3))
data_range <- rmultinom(1000,sum(mass_cluster_freq_3),mass_cluster_freq_3/sum(mass_cluster_freq_3))
data_range_rel <- data_range/colSums(data_range)
dim(data_range)
sd_Mass_data <- apply(data_range_rel, 1,sd)
sd_Mass_data
mean_Mass_data <- apply(data_range_rel,1,mean)
sd_Mass_data/mean_Mass_data
sd_Mass_ParamSamples/mean_Mass_ParamSamples
plot(sd_Mass_data/mean_Mass_data)
points(sd_Mass_ParamSamples/mean_Mass_ParamSamples, col = "red")
sd_Mass_ParamSamples/sqrt(1000)
sd_Mass_data/sqrt(1000)
1/sd_Mass_data
var(data_range_rel)
sd(data_range_rel)
1/sd(data_range_rel)
1/(sd(data_range_rel)*sd(data_range_rel))
1/sd_Mass_ParamSamples
sd_Mass_ParamSamples
mean_Mass_ParamSamples
# percent error
(mean_Mass_data - mean_Mass_ParamSamples)/mean_Mass_data*100
# percent error
(mass_cluster_freq_3 - mean_Mass_ParamSamples)/mass_cluster_freq_3*100
mass_cluster_freq_3_rel <- mass_cluster_freq_3/sum(mass_cluster_freq_3)
# percent error
(mass_cluster_freq_3_rel - mean_Mass_ParamSamples)/mass_cluster_freq_3_rel*100
dim(cluster_samples_ParamVar_rel)
head( matrix(rep(mass_cluster_freq_3_rel,1000), byrow = TRUE))
head(matrix(rep(mass_cluster_freq_3_rel,1000), nrow = 1000, ncol = 55, byrow = TRUE))
# average deviation
abs_deviation <- cluster_samples_ParamVar_rel - matrix(rep(mass_cluster_freq_3_rel,1000), nrow = 1000, ncol = 55, byrow = TRUE)
head(abs_deviation)
# average deviation
abs_deviation <- abs(cluster_samples_ParamVar_rel - matrix(rep(mass_cluster_freq_3_rel,1000), nrow = 1000, ncol = 55, byrow = TRUE))
average_deviation <- colMeans(abs_deviation)
average_deviation
# abs error
abs_error <- abs(cluster_samples_ParamVar_rel - mass_cluster_freq_3_rel)
abs_error
# abs error
abs_error <- abs(mean_Mass_ParamSamples - mass_cluster_freq_3_rel)
abs_error
plot(abs_error)
mean(abs_error)
sum(mass_cluster_freq_3_rel)
average_deviation
cluster_samples_ParamVar_rel[,1]
mass_cluster_freq_3_rel[1]
plot(mass_cluster_freq_3_rel)
plot(mass_cluster_freq_3_rel, ylim = c(0,0.3))
points(mass_cluster_freq_3_rel - abs_error, col ="red")
points(mass_cluster_freq_3_rel + abs_error, col ="red")
which(mass_cluster_freq_3_rel==0)
#rel error for those that are not zero
rel_error <- abs(mean_Mass_ParamSamples[which(mass_cluster_freq_3_rel!=0)] - mass_cluster_freq_3_rel[which(mass_cluster_freq_3_rel!=0)])/(mass_cluster_freq_3_rel[which(mass_cluster_freq_3_rel!=0)]
)
rel_error
plot(rel_error)
# abs error
abs_error <- abs(mean_Mass_ParamSamples - mass_cluster_freq_3_rel)
abs_error
mean(rel_error)
ggplot(data_and_model_with_errors_and_null_large_clusters, aes(fill = VT,y=values, x=xvals,group = Group, color = Group)) +
geom_bar(position = position_dodge(.9), stat="identity",size = 1.5) +
geom_errorbar( aes(ymin=lower, ymax=upper), width=0.8, colour="black", alpha=0.9, size=1,position=position_dodge(.9)) +
scale_x_continuous("Strains", breaks = 1:(length(non_small_cluster_idx)), labels = unique(PopPUNK_clusters$Cluster)[non_small_cluster_idx]) +
scale_fill_manual(values=c( "orange","#999999","#D32F2F"),labels = c("Mixed", "Non-Vaccine Types","Vaccine Types"))+theme_minimal() +
scale_color_manual(values = c("black", "#0072B2", "#CC79A7"),labels = c("Data", "NFDS Model","Neutral Model")) +
labs(x = "Strains", y = "Frequency") +
ggtitle("Massachusetts 2007 Data vs. NFDS Model vs. Neutral Model\n with 66% binomial confidence intervals on data and 95th percentiles on model values") +  # Add the plot title
theme(
axis.title.x = element_text(size = 16),  # Increase x-axis label size
axis.title.y = element_text(size = 16),  # Increase y-axis label size
axis.text.x = element_text(size = 14),   # Increase x-axis tick label size
axis.text.y = element_text(size = 14),    # Increase y-axis tick label size
legend.text = element_text(size = 12),  # Increase legend text size
legend.title = element_text(size = 14),  # Increase legend title size
plot.title = element_text(size = 20, face = "bold", hjust = 0.5)
) +
ylim(0, 0.25)
library(ggplot2)
ggplot(data_and_model_with_errors_and_null_large_clusters, aes(fill = VT,y=values, x=xvals,group = Group, color = Group)) +
geom_bar(position = position_dodge(.9), stat="identity",size = 1.5) +
geom_errorbar( aes(ymin=lower, ymax=upper), width=0.8, colour="black", alpha=0.9, size=1,position=position_dodge(.9)) +
scale_x_continuous("Strains", breaks = 1:(length(non_small_cluster_idx)), labels = unique(PopPUNK_clusters$Cluster)[non_small_cluster_idx]) +
scale_fill_manual(values=c( "orange","#999999","#D32F2F"),labels = c("Mixed", "Non-Vaccine Types","Vaccine Types"))+theme_minimal() +
scale_color_manual(values = c("black", "#0072B2", "#CC79A7"),labels = c("Data", "NFDS Model","Neutral Model")) +
labs(x = "Strains", y = "Frequency") +
ggtitle("Massachusetts 2007 Data vs. NFDS Model vs. Neutral Model\n with 66% binomial confidence intervals on data and 95th percentiles on model values") +  # Add the plot title
theme(
axis.title.x = element_text(size = 16),  # Increase x-axis label size
axis.title.y = element_text(size = 16),  # Increase y-axis label size
axis.text.x = element_text(size = 14),   # Increase x-axis tick label size
axis.text.y = element_text(size = 14),    # Increase y-axis tick label size
legend.text = element_text(size = 12),  # Increase legend text size
legend.title = element_text(size = 14),  # Increase legend title size
plot.title = element_text(size = 20, face = "bold", hjust = 0.5)
) +
ylim(0, 0.25)
data_and_model_with_errors_and_null_large_clusters <- data.frame(
cluster=rep(unique(PopPUNK_clusters$Cluster)[non_small_cluster_idx],3),
xvals = rep(1:length(non_small_cluster_idx),3),
Group = c(rep("Data",length(non_small_cluster_idx)),rep("NFDS Model",length(non_small_cluster_idx)),rep("Null Model",length(non_small_cluster_idx))),
VT = rep(PPcluster_VTs[non_small_cluster_idx],3),
values=c((PP_mass_cluster_freq_3/sum(PP_mass_cluster_freq_3))[non_small_cluster_idx], mean_Mass_ParamSamples[non_small_cluster_idx], mean_Mass_ParamSamples_Null[non_small_cluster_idx]),
upper=c(binom_conf_data[non_small_cluster_idx,2], quantile_Mass_ParamSamples_low[non_small_cluster_idx],quantile_Mass_ParamSamples_low_Null[non_small_cluster_idx]),
lower = c(binom_conf_data[non_small_cluster_idx,3], quantile_Mass_ParamSamples_up[non_small_cluster_idx],quantile_Mass_ParamSamples_up_Null[non_small_cluster_idx])
)
mass_cluster_freq_3_rel
abs_error
plot(abs_error)
plot(mass_cluster_freq_3_rel)
points(abs_error, col = "red")
plot(mass_cluster_freq_3_rel, abs_error)
plot(mass_cluster_freq_3_rel, abs_error)
PPcluster_VTs
PPcluster_VTs <- readRDS("PPcluster_VTs_3groups.rds")
PPcluster_VTs
plot(mass_cluster_freq_3_rel[which(PPcluster_VTs=="VT")], abs_error[which(PPcluster_VTs=="VT")], col = "red")
plot(mass_cluster_freq_3_rel[which(PPcluster_VTs=="mixed")], abs_error[which(PPcluster_VTs=="mixed")], col = "orange")
plot(mass_cluster_freq_3_rel[which(PPcluster_VTs=="VT")], abs_error[which(PPcluster_VTs=="VT")], col = "red")
points(mass_cluster_freq_3_rel[which(PPcluster_VTs=="mixed")], abs_error[which(PPcluster_VTs=="mixed")], col = "orange")
plot(mass_cluster_freq_3_rel[which(PPcluster_VTs=="VT")], abs_error[which(PPcluster_VTs=="VT")], col = "red")
points(mass_cluster_freq_3_rel[which(PPcluster_VTs=="mixed")], abs_error[which(PPcluster_VTs=="mixed")], col = "orange")
points(mass_cluster_freq_3_rel[which(PPcluster_VTs=="NVT")], abs_error[which(PPcluster_VTs=="NVT")], col = "orange")
plot(mass_cluster_freq_3_rel[which(PPcluster_VTs=="VT")], abs_error[which(PPcluster_VTs=="VT")], col = "red")
points(mass_cluster_freq_3_rel[which(PPcluster_VTs=="mixed")], abs_error[which(PPcluster_VTs=="mixed")], col = "orange")
points(mass_cluster_freq_3_rel[which(PPcluster_VTs=="NVT")], abs_error[which(PPcluster_VTs=="NVT")], col = "grey")
plot((mass_cluster_freq_3_rel[which(PPcluster_VTs=="mixed")], abs_error[which(PPcluster_VTs=="mixed")], col = "orange"))
plot(mass_cluster_freq_3_rel[which(PPcluster_VTs=="mixed")], abs_error[which(PPcluster_VTs=="mixed")], col = "orange")
plot(mass_cluster_freq_3_rel[which(PPcluster_VTs=="VT")], abs_error[which(PPcluster_VTs=="VT")], col = "red", ylim = c(0,0.25), xlim = c(0,0.1))
points(mass_cluster_freq_3_rel[which(PPcluster_VTs=="mixed")], abs_error[which(PPcluster_VTs=="mixed")], col = "orange")
points(mass_cluster_freq_3_rel[which(PPcluster_VTs=="NVT")], abs_error[which(PPcluster_VTs=="NVT")], col = "grey")
plot(mass_cluster_freq_3_rel[which(PPcluster_VTs=="VT")], abs_error[which(PPcluster_VTs=="VT")], col = "red", ylim = c(0,0.025), xlim = c(0,0.1))
plot(mass_cluster_freq_3_rel[which(PPcluster_VTs=="VT")], abs_error[which(PPcluster_VTs=="VT")], col = "red")
plot(mass_cluster_freq_3_rel[which(PPcluster_VTs=="VT")], abs_error[which(PPcluster_VTs=="VT")], col = "red", ylim = c(0,0.025), xlim = c(0,0.12))
plot(mass_cluster_freq_3_rel[which(PPcluster_VTs=="VT")], abs_error[which(PPcluster_VTs=="VT")], col = "red")
plot(mass_cluster_freq_3_rel[which(PPcluster_VTs=="VT")], abs_error[which(PPcluster_VTs=="VT")], col = "red", ylim = c(0,0.025), xlim = c(0,0.1))
points(mass_cluster_freq_3_rel[which(PPcluster_VTs=="mixed")], abs_error[which(PPcluster_VTs=="mixed")], col = "orange")
points(mass_cluster_freq_3_rel[which(PPcluster_VTs=="NVT")], abs_error[which(PPcluster_VTs=="NVT")], col = "grey")
points(mass_cluster_freq_3_rel[which(PPcluster_VTs=="NVT")], abs_error[which(PPcluster_VTs=="NVT")], col = "black")
rel_error
plot(rel_error)
plot(mass_cluster_freq_3_rel, rel_error)
plot(mass_cluster_freq_3_rel[which(mass_cluster_freq_3_rel!=0)], rel_error)
mass_cluster_freq_3_rel[which(mass_cluster_freq_3_rel!=0) && [which(PPcluster_VTs=="VT")]
mass_cluster_freq_3_rel[which(mass_cluster_freq_3_rel!=0) && which(PPcluster_VTs=="VT")]
intersect(which(mass_cluster_freq_3_rel!=0), which(PPcluster_VTs=="VT"))
which(mass_cluster_freq_3_rel!=0)
rel_error_VT <- abs(mean_Mass_ParamSamples[intersect(which(mass_cluster_freq_3_rel!=0), which(PPcluster_VTs=="VT"))] - mass_cluster_freq_3_rel[intersect(which(mass_cluster_freq_3_rel!=0), which(PPcluster_VTs=="VT"))])/(mass_cluster_freq_3_rel[intersect(which(mass_cluster_freq_3_rel!=0), which(PPcluster_VTs=="VT"))])
rel_error_VT
rel_error_NVT <- abs(mean_Mass_ParamSamples[intersect(which(mass_cluster_freq_3_rel!=0), which(PPcluster_VTs=="NVT"))] - mass_cluster_freq_3_rel[intersect(which(mass_cluster_freq_3_rel!=0), which(PPcluster_VTs=="NVT"))])/(mass_cluster_freq_3_rel[intersect(which(mass_cluster_freq_3_rel!=0), which(PPcluster_VTs=="NVT"))])
rel_error_mixed <- abs(mean_Mass_ParamSamples[intersect(which(mass_cluster_freq_3_rel!=0), which(PPcluster_VTs=="mixed"))] - mass_cluster_freq_3_rel[intersect(which(mass_cluster_freq_3_rel!=0), which(PPcluster_VTs=="mixed"))])/(mass_cluster_freq_3_rel[intersect(which(mass_cluster_freq_3_rel!=0), which(PPcluster_VTs=="mixed"))])
plot(mass_cluster_freq_3_rel[intersect(which(mass_cluster_freq_3_rel!=0), which(PPcluster_VTs=="VT"))], rel_error_VT)
plot(mass_cluster_freq_3_rel[intersect(which(mass_cluster_freq_3_rel!=0), which(PPcluster_VTs=="NVT"))], rel_error_NVT)
plot(mass_cluster_freq_3_rel[intersect(which(mass_cluster_freq_3_rel!=0), which(PPcluster_VTs=="VT"))], rel_error_VT, col = "red")
points(mass_cluster_freq_3_rel[intersect(which(mass_cluster_freq_3_rel!=0), which(PPcluster_VTs=="NVT"))], rel_error_NVT, col = "black")
max(rel_error)
max(mass_cluster_freq_3_rel)
plot(mass_cluster_freq_3_rel[intersect(which(mass_cluster_freq_3_rel!=0), which(PPcluster_VTs=="VT"))], rel_error_VT, col = "red", ylim = c(0,3.2), xlim = c(0,0.2))
points(mass_cluster_freq_3_rel[intersect(which(mass_cluster_freq_3_rel!=0), which(PPcluster_VTs=="NVT"))], rel_error_NVT, col = "black")
points(mass_cluster_freq_3_rel[intersect(which(mass_cluster_freq_3_rel!=0), which(PPcluster_VTs=="mixed"))], rel_error_mixed, col = "orange")
### Loading packages
# install.packages("drat") # -- if you don't have drat installed
# drat:::add("ncov-ic")
# install.packages("odin.dust")
library(odin.dust)
#install.packages("mcstate")
library(mcstate)
#install.packages("mcstate")
library(mcstate)
library(coda)
# read in model from file
WF <- odin.dust::odin_dust("NFDS_Model_PPxSero.R")
combined_compare <- function(state, observed, pars = NULL) {
result <- 0
#data_size <- sum(unlist(observed))
data_size <- sum(unlist(observed[as.character(1:(length(unlist(observed))-4))]))
model_size = sum(unlist(state[-1, , drop = TRUE]))
exp_noise <- 1e6
data_vals <- unlist(observed[as.character(1:(length(unlist(observed))-4))])
#model_vals <- state[-1, , drop = TRUE]
model_vals <- rep(0, length(unlist(observed))-4)
data_missing <- FALSE
for (i in 1:(length(unlist(observed))-4)){
state_name <- paste("sum_clust", i, sep = "")
model_vals[i] <- state[state_name, , drop = TRUE]
if (is.na(observed[[as.character(i)]])) {
#Creates vector of zeros in ll with same length, if no data
#ll_obs <- numeric(length( state[state_name, , drop = TRUE]))
data_missing <- TRUE
}
}
models_vals_err <- model_vals + rexp(n = length(model_vals), rate = exp_noise)
if(data_missing){
ll_obs <- 0
}
else{
ll_obs <- dmultinom(x = (data_vals), prob = models_vals_err/model_size, log = TRUE)
}
result <- ll_obs
#for (i in 1:(length(unlist(observed))-4)){
#  state_name <- paste("sum_clust", i, sep = "")
#  if (is.na(observed[[as.character(i)]])) {
#    #Creates vector of zeros in ll with same length, if no data
#    ll_obs <- numeric(length( state[state_name, , drop = TRUE]))
#  } else {
#lambda <-  state[state_name, , drop = TRUE]/model_size * data_size + rexp(n = length( state[state_name, , drop = TRUE]/model_size * data_size), rate = exp_noise)
#ll_obs <- dpois(x = observed[[as.character(i)]], lambda = lambda, log = TRUE)
#    ll_obs <- dmultinom(x = (data_vals), prob = model_vals/model_size, log = TRUE)
#  }
#  result <- result + ll_obs
#}
result
}
seq_clusters <- readRDS("Navajo_PP.rds")
intermed_gene_presence_absence_consensus <- readRDS(file = "Navajo_ggCaller_intermed_consensus.rds")
intermed_gene_presence_absence_consensus_matrix <- sapply(intermed_gene_presence_absence_consensus[-1,-1],as.double)
delta_ranking <- readRDS(file = "Navajo_delta_ranking.rds")
mass_cluster_freq_1 <- readRDS(file = "Navajo_cluster_freqs_1.rds")
mass_cluster_freq_2 <- readRDS(file = "Navajo_cluster_freqs_2.rds")
mass_cluster_freq_3 <- readRDS(file = "Navajo_cluster_freqs_3.rds")
mass_cluster_freq_4 <- readRDS(file = "Navajo_cluster_freqs_4.rds")
mass_cluster_freq_5 <- readRDS(file = "Navajo_cluster_freqs_5.rds")
mass_cluster_freq_6 <- readRDS(file = "Navajo_cluster_freqs_6.rds")
mass_cluster_freq_7 <- readRDS(file = "Navajo_cluster_freqs_7.rds")
mass_cluster_freq_8 <- readRDS(file = "Navajo_cluster_freqs_8.rds")
mass_cluster_freq_9 <- readRDS(file = "Navajo_cluster_freqs_9.rds")
mass_cluster_freq_10 <- readRDS(file = "Navajo_cluster_freqs_10.rds")
mass_cluster_freq_11 <- readRDS(file = "Navajo_cluster_freqs_11.rds")
mass_cluster_freq_12 <- readRDS(file = "Navajo_cluster_freqs_12.rds")
mass_cluster_freq_13 <- readRDS(file = "Navajo_cluster_freqs_13.rds")
mass_cluster_freq_14 <- readRDS(file = "Navajo_cluster_freqs_14.rds")
mass_cluster_freq_15 <- readRDS(file = "Navajo_cluster_freqs_15.rds")
mass_clusters <- length(unique(seq_clusters$Cluster))
sero_no = length(unique(seq_clusters$Serotype))
#model_start_pop <- readRDS(file = "Navajo_PPsero_startpop.rds")
model_start_pop <- readRDS(file = "Navajo_PPsero_startpop.rds")
# add 6A to PCV7 because there is strong cross-immunity btw PVC7 and 6A (4.Croucher, N. J. et al. Population genomics of post-vaccine changes in pneumococcal epidemiology. Nat. Genet. 45, 656–663 (2013).)
#PCV7_VTs <- rep(0,sero_no)
#names(PCV7_VTs) <- unique(seq_clusters$Serotype)
#PCV7_VTs[intersect(PCV7_VTs,c("4", "6A","6B", "9V", "14", "18C", "19F", "23F"))] <- 1
#vaccTypes1 <- unname(PCV7_VTs)
#vaccTypes1 <- readRDS("Navajo_SeroVT.rds")
#vaccTypes2 <- readRDS("Navajo_SeroVT_PCV13.rds")
vaccTypes <- readRDS("Navajo_SeroVT.rds")
mass_clusters <- length(unique(seq_clusters$Cluster))
avg_cluster_freq <- readRDS(file = "Navajo_PPsero_mig.rds")
dt <- 1/12
peripost_mass_cluster_freq <- data.frame("year" = 1:14, rbind(mass_cluster_freq_2,mass_cluster_freq_3,mass_cluster_freq_4,mass_cluster_freq_5,mass_cluster_freq_6, mass_cluster_freq_7,mass_cluster_freq_8,mass_cluster_freq_9, mass_cluster_freq_10, mass_cluster_freq_11,mass_cluster_freq_12, mass_cluster_freq_13, mass_cluster_freq_14,mass_cluster_freq_15))
names(peripost_mass_cluster_freq) <- c("year", as.character(1:mass_clusters))
vacc_time <- 2
#vacc_time2 <- 12
output_filename <- "Navajo_PPxSero_ggCaller_PopPUNK"
fitting_mass_data <- mcstate::particle_filter_data(data = peripost_mass_cluster_freq,
time = "year",
rate = 1 / dt,
initial_time = 0)
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
# Using MCMC to infer parameters
pmcmc_sigma_f <- mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0, max = 1)
#pmcmc_sigma_w <- 0
pmcmc_sigma_w <- -1000
pmcmc_prop_f <- mcstate::pmcmc_parameter("prop_f", 0.2, min = 0, max = 1)
pmcmc_m <- mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1)
pmcmc_v <- mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)
species_no <- mass_clusters
no_clusters <- mass_clusters
gene_no <- nrow(intermed_gene_presence_absence_consensus_matrix)
Pop_ini <- data.frame(model_start_pop)
Pop_eq <- rowSums(model_start_pop)
Genotypes <- intermed_gene_presence_absence_consensus_matrix
capacity <- sum(model_start_pop)
delta <- delta_ranking
vaccTypes <- mass_VT
migVec <- data.frame(avg_cluster_freq)
complex_params = list(species_no = species_no, Pop_ini = Pop_ini, Pop_eq = Pop_eq, Genotypes = intermed_gene_presence_absence_consensus[-1,-1], capacity = capacity, delta = delta, vaccTypes = vaccTypes, gene_no = gene_no, vacc_time = vacc_time, dt = dt, sigma_w = pmcmc_sigma_w, migVec = (migVec), sero_no = sero_no)
make_transform <- function(m) {
function(theta) {
as_double_mtx <- function(x){
sapply(x,as.double)
}
c(lapply(m, as_double_mtx), as.list(theta))
}
}
proposal_matrix <- diag(0.1,4) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
index <- function(info) {
list(run = c(sum_clust = info$index$Pop_tot),
state = c(Pop = info$index$Pop))
}
#proposal_matrix <- diag(0.1,4) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
# here, all parameters are proposed independently.
# think about this, this might not actually be true
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(pmcmc_sigma_f, pmcmc_sigma_w, pmcmc_prop_f, pmcmc_m, pmcmc_v), proposal_matrix, transform)
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 01), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = -2), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
proposal_matrix <- diag(c(exp(1), 0.1, exp(1), 0.1))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", runif(n=1, min=-10, max=0), min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", runif(n=1, min=0, max=1), min = 0, max = 1), mcstate::pmcmc_parameter("m", runif(n=1, min=-10, max=0), min = -1000, max = 0), mcstate::pmcmc_parameter("v", runif(n=1, min=0, max=1), min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars$initial()
#WF$public_methods$has_openmp()
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
index = index,
compare = combined_compare)
n_steps <- 5
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 1)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
n_steps <- 100
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains =4, n_workers = 4,
n_threads_total = 4)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run, burnin = 25, thin = 1)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
print(parameter_mean_hpd)
det_mcmc1 <- coda::as.mcmc(cbind(det_pmcmc_run$probabilities, det_pmcmc_run$pars))
plot(det_mcmc1)
print("det_mcmc_1 final log likelihood")
processed_chains$probabilities[nrow(processed_chains$probabilities),2]
print("det_mcmc_1 mean log likelihood")
mean(processed_chains$probabilities[,2])
det_proposal_matrix <- cov(processed_chains$pars)
det_mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", parameter_mean_hpd[1], min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", parameter_mean_hpd[2], min = 0, max = 1),mcstate::pmcmc_parameter("m", parameter_mean_hpd[3], min = -1000, max = 0), mcstate::pmcmc_parameter("v", parameter_mean_hpd[4], min = 0, max = 1)), det_proposal_matrix, make_transform(complex_params))
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
index = index,
compare = combined_compare)
n_steps <- 5
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 1)
det_pmcmc_run <- mcstate::pmcmc(det_mcmc_pars, det_filter, control = control)
n_steps <- 100
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 4, n_workers = 4, n_threads_total = 4)
det_pmcmc_run2 <- mcstate::pmcmc(det_mcmc_pars, det_filter, control = control)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run2, burnin = 25, thin = 1)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
print(parameter_mean_hpd)
det_mcmc2 <- coda::as.mcmc(cbind(det_pmcmc_run2$probabilities, det_pmcmc_run2$pars))
plot(det_mcmc2)
# average deviation
abs_deviation <- abs(cluster_samples_ParamVar_rel - matrix(rep(mean_Mass_ParamSamples,1000), nrow = 1000, ncol = 55, byrow = TRUE))
average_deviation <- colMeans(abs_deviation)
average_deviation
plot(average_deviation)
mean_Mass_ParamSamples
plot(mean_Mass_ParamSamples,average_deviation)
plot(cluster_samples_ParamVar_rel[which(PPcluster_VTs=="VT")], average_deviation[which(PPcluster_VTs=="VT")], col = "red", ylim = c(0,0.025), xlim = c(0,0.1))
points(cluster_samples_ParamVar_rel[which(PPcluster_VTs=="mixed")], average_deviation[which(PPcluster_VTs=="mixed")], col = "orange")
points(cluster_samples_ParamVar_rel[which(PPcluster_VTs=="NVT")], average_deviation[which(PPcluster_VTs=="NVT")], col = "black")
max(average_deviation)
max(cluster_samples_ParamVar_rel)
plot(cluster_samples_ParamVar_rel[which(PPcluster_VTs=="VT")], average_deviation[which(PPcluster_VTs=="VT")], col = "red", ylim = c(0,0.007), xlim = c(0,0.2))
points(cluster_samples_ParamVar_rel[which(PPcluster_VTs=="mixed")], average_deviation[which(PPcluster_VTs=="mixed")], col = "orange")
points(cluster_samples_ParamVar_rel[which(PPcluster_VTs=="NVT")], average_deviation[which(PPcluster_VTs=="NVT")], col = "black")
max(cluster_samples_ParamVar_rel)
max(average_deviation)
which(cluster_samples_ParamVar_rel == max(cluster_samples_ParamVar_rel))
max(mean_Mass_ParamSamples)
plot(mean_Mass_ParamSamples[which(PPcluster_VTs=="VT")], average_deviation[which(PPcluster_VTs=="VT")], col = "red", ylim = c(0,0.007), xlim = c(0,0.15))
points(mean_Mass_ParamSamples[which(PPcluster_VTs=="mixed")], average_deviation[which(PPcluster_VTs=="mixed")], col = "orange")
points(mean_Mass_ParamSamples[which(PPcluster_VTs=="NVT")], average_deviation[which(PPcluster_VTs=="NVT")], col = "black")
