View(intermed_gene_presence_absence_consensus_2001)
# read in gene presence absence matrix
intermed_gene_presence_absence_consensus <- readRDS(file = "intermed_gene_presence_absence_consensus.rds")
intermed_gene_presence_absence_consensus_2001 <- readRDS(file = "intermed_gene_presence_absence_consensus_2001.rds")
intermed_gene_presence_absence_consensus_2004 <- readRDS(file = "intermed_gene_presence_absence_consensus_2004.rds")
intermed_gene_presence_absence_consensus_2007 <- readRDS(file = "intermed_gene_presence_absence_consensus_2007.rds")
subset(Mass_Samples_accCodes,Mass_Samples_accCodes$SequenceCluster == i-1)$VT
Mass_Samples_accCodes[Mass_Samples_accCodes$SequenceCluster == 0]
Mass_Samples_accCodes[Mass_Samples_accCodes$SequenceCluster == 0,]
Mass_Samples_accCodes[Mass_Samples_accCodes$SequenceCluster == 0,"Vaccine Type"]
Mass_Samples_accCodes[Mass_Samples_accCodes$SequenceCluster == 0,"Vaccine Type"]=="VT"
as.int(Mass_Samples_accCodes[Mass_Samples_accCodes$SequenceCluster == 0,"Vaccine Type"]=="VT")
as.integer(Mass_Samples_accCodes[Mass_Samples_accCodes$SequenceCluster == 0,"Vaccine Type"]=="VT")
ceiling(median(as.integer(Mass_Samples_accCodes[Mass_Samples_accCodes$SequenceCluster == 0,"Vaccine Type"]=="VT"))
)
(median(as.integer(Mass_Samples_accCodes[Mass_Samples_accCodes$SequenceCluster == 0,"Vaccine Type"]=="VT"))
)
for (i in 1:mass_clusters){
mass_VT[i] <- ceiling(median(as.integer(Mass_Samples_accCodes[Mass_Samples_accCodes$SequenceCluster == i-1,"Vaccine Type"]=="VT")))
}
# calculate Vaccine Type consensus for clusters
mass_clusters <- length(unique(Mass_Samples_accCodes$SequenceCluster))
mass_VT <- rep(0, mass_clusters)
for (i in 1:mass_clusters){
mass_VT[i] <- ceiling(median(as.integer(Mass_Samples_accCodes[Mass_Samples_accCodes$SequenceCluster == i-1,"Vaccine Type"]=="VT")))
}
mass_VT
# install.packages("drat") # -- if you don't have drat installed
# drat:::add("ncov-ic")
# install.packages("odin.dust")
library(odin.dust)
#install.packages("mcstate")
library(mcstate)
Mass_Samples_accCodes <- readRDS(file = "Mass_Samples_accCodes.rds")
intermed_gene_presence_absence_consensus <- readRDS(file = "intermed_gene_presence_absence_consensus.rds")
intermed_gene_presence_absence_consensus <- sapply(intermed_gene_presence_absence_consensus,as.double)
model_start_pop <- readRDS(file = "model_start_pop.rds")
delta_ranking <- readRDS(file = "delta_ranking.rds")
mass_cluster_freq_1 <- readRDS(file = "mass_cluster_freq_1.rds")
mass_cluster_freq_2 <- readRDS(file = "mass_cluster_freq_2.rds")
mass_cluster_freq_3 <- readRDS(file = "mass_cluster_freq_3.rds")
mass_VT <- readRDS(file = "mass_VT.rds")
intermed_gene_presence_absence_consensus <- readRDS(file = "intermed_gene_presence_absence_consensus.rds")
intermed_gene_presence_absence_consensus[-1,-1] <- sapply(intermed_gene_presence_absence_consensus[-1,-1],as.double)
View(intermed_gene_presence_absence_consensus)
typeof(intermed_gene_presence_absence_consensus[2,2])
typeof(as.double(intermed_gene_presence_absence_consensus[2,2]))
intermed_gene_presence_absence_consensus[-1,-1] <- sapply(intermed_gene_presence_absence_consensus[-1,-1],as.double)
typeof(intermed_gene_presence_absence_consensus[2,2])
View(intermed_gene_presence_absence_consensus)
intermed_gene_presence_absence_consensus_matrix <- sapply(intermed_gene_presence_absence_consensus[-1,-1],as.double)
intermed_gene_presence_absence_consensus_matrix
typeof(intermed_gene_presence_absence_consensus_matrix[1,1])
Mass_Samples_accCodes <- readRDS(file = "Mass_Samples_accCodes.rds")
intermed_gene_presence_absence_consensus <- readRDS(file = "intermed_gene_presence_absence_consensus.rds")
intermed_gene_presence_absence_consensus_matrix <- sapply(intermed_gene_presence_absence_consensus[-1,-1],as.double)
model_start_pop <- readRDS(file = "model_start_pop.rds")
delta_ranking <- readRDS(file = "delta_ranking.rds")
mass_cluster_freq_1 <- readRDS(file = "mass_cluster_freq_1.rds")
mass_cluster_freq_2 <- readRDS(file = "mass_cluster_freq_2.rds")
mass_cluster_freq_3 <- readRDS(file = "mass_cluster_freq_3.rds")
mass_VT <- readRDS(file = "mass_VT.rds")
WF_nG_h_vP <- odin.dust::odin_dust("NFDS_Model.R")
# copy of WrightFisherModel/WrightFisher_newData_nGenotypes_haploid_PopsizeVariablePois.R
mass_clusters <- length(unique(Mass_Samples_accCodes$SequenceCluster))
avg_cluster_freq <- (mass_cluster_freq_1 + mass_cluster_freq_2 + mass_cluster_freq_3)/(sum(mass_cluster_freq_1)+sum(mass_cluster_freq_2)+sum(mass_cluster_freq_3))
params_n_vP <- list(dt = 1/36, species_no = mass_clusters,  gene_no = nrow(intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(model_start_pop), Pop_eq = as.double(model_start_pop), capacity = sum(model_start_pop), Genotypes = intermed_gene_presence_absence_consensus_matrix, sigma_f = 0.2193191513, sigma_w = 0.0007111157, prop_f = 0.3735531590, delta = delta_ranking, m = 0.0052207254, migVec = avg_cluster_freq, vaccTypes = mass_VT, v = 0.1321567425, vacc_time = 0)
WFmodel_nG_h_vP <- WF_nG_h_vP$new(pars = params_n_vP,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
# this is expecting doubles. I need to work on that.
WFmodel_nG_h_vP$run(36)
create_model <- function(params){
WF_nG_h_vP$new(pars = params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
}
create_model <- function(params){
all_params <- list(dt = 1/36, species_no = mass_clusters,  gene_no = nrow(intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(model_start_pop), Pop_eq = as.double(model_start_pop), capacity = sum(model_start_pop), Genotypes = intermed_gene_presence_absence_consensus_matrix, sigma_f = params[1], sigma_w = params[2], prop_f = params[3], delta = delta_ranking, m = params[4], migVec = avg_cluster_freq, vaccTypes = mass_VT, v = params[5], vacc_time = 0)
WF_nG_h_vP$new(pars = params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
}
optim_params <- c(0.2193191513, 0.0007111157, 0.3735531590, 0.0052207254, 0.1321567425)
WFmodel_optim <- create_model(optim_params)
typeof(optim_params)
optim_params <- c(0.2193191513, 0.0007111157, 0.3735531590, 0.0052207254, 0.1321567425)
optim_params <- c(0.2193191513, 0.0007111157, 0.3735531590, 0.0052207254, 0.1321567425)
WFmodel_optim <- create_model(optim_params)
c(0.2193191513, 0.0007111157, 0.3735531590, 0.0052207254, 0.1321567425)
WFmodel_optim <- create_model(c(0.2193191513, 0.0007111157, 0.3735531590, 0.0052207254, 0.1321567425))
create_model <- function(params){
all_params <- list(dt = 1/36, species_no = mass_clusters,  gene_no = nrow(intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(model_start_pop), Pop_eq = as.double(model_start_pop), capacity = sum(model_start_pop), Genotypes = intermed_gene_presence_absence_consensus_matrix, sigma_f = params[1], sigma_w = params[2], prop_f = params[3], delta = delta_ranking, m = params[4], migVec = avg_cluster_freq, vaccTypes = mass_VT, v = params[5], vacc_time = 0)
WF_nG_h_vP$new(pars = all_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
}
optim_params <- c(0.2193191513, 0.0007111157, 0.3735531590, 0.0052207254, 0.1321567425)
WFmodel_optim <- create_model(optim_params)
WFmodel_optim$run(10)
optim(par = c(0.15, 0.05, 0.25, 0.03, 0.05), fn = create_model, method = "L-BFGS-B")
create_model <- function(params){
all_params <- list(dt = 1/36, species_no = mass_clusters,  gene_no = nrow(intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(model_start_pop), Pop_eq = as.double(model_start_pop), capacity = sum(model_start_pop), Genotypes = intermed_gene_presence_absence_consensus_matrix, sigma_f = params[1], sigma_w = params[2], prop_f = params[3], delta = delta_ranking, m = params[4], migVec = avg_cluster_freq, vaccTypes = mass_VT, v = params[5], vacc_time = 0)
WFmodel <- WF_nG_h_vP$new(pars = all_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_times <- 73
x <- array(NA, dim = c(WFmodel$info()$len, 1, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
head(x[,1,37])
#x[,1,37], model3 = x[,1,73])
}
optim_params <- c(0.2193191513, 0.0007111157, 0.3735531590, 0.0052207254, 0.1321567425)
WFmodel_optim <- create_model(optim_params)
create_model <- function(params){
all_params <- list(dt = 1/36, species_no = mass_clusters,  gene_no = nrow(intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(model_start_pop), Pop_eq = as.double(model_start_pop), capacity = sum(model_start_pop), Genotypes = intermed_gene_presence_absence_consensus_matrix, sigma_f = params[1], sigma_w = params[2], prop_f = params[3], delta = delta_ranking, m = params[4], migVec = avg_cluster_freq, vaccTypes = mass_VT, v = params[5], vacc_time = 0)
WFmodel <- WF_nG_h_vP$new(pars = all_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(WFmodel$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
head(x[,1,37])
#x[,1,37], model3 = x[,1,73])
}
optim_params <- c(0.2193191513, 0.0007111157, 0.3735531590, 0.0052207254, 0.1321567425)
WFmodel_optim <- create_model(optim_params)
WFmodel_optim
create_model <- function(params){
all_params <- list(dt = 1/36, species_no = mass_clusters,  gene_no = nrow(intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(model_start_pop), Pop_eq = as.double(model_start_pop), capacity = sum(model_start_pop), Genotypes = intermed_gene_presence_absence_consensus_matrix, sigma_f = params[1], sigma_w = params[2], prop_f = params[3], delta = delta_ranking, m = params[4], migVec = avg_cluster_freq, vaccTypes = mass_VT, v = params[5], vacc_time = 0)
WFmodel <- WF_nG_h_vP$new(pars = all_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(WFmodel$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
sum((x[,1,37]/sum(x[,1,37]) - (mass_cluster_freq_2/sum(mass_cluster_freq_2)))^2) + sum((x[,1,73]/sum(x[,1,73]) - (mass_cluster_freq_3/sum(mass_cluster_freq_3)))^2)
}
optim_params <- c(0.2193191513, 0.0007111157, 0.3735531590, 0.0052207254, 0.1321567425)
create_model(optim_params)
model_squaredError <- function(params){
all_params <- list(dt = 1/36, species_no = mass_clusters,  gene_no = nrow(intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(model_start_pop), Pop_eq = as.double(model_start_pop), capacity = sum(model_start_pop), Genotypes = intermed_gene_presence_absence_consensus_matrix, sigma_f = params[1], sigma_w = params[2], prop_f = params[3], delta = delta_ranking, m = params[4], migVec = avg_cluster_freq, vaccTypes = mass_VT, v = params[5], vacc_time = 0)
WFmodel <- WF_nG_h_vP$new(pars = all_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(WFmodel$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
sum((x[,1,37]/sum(x[,1,37]) - (mass_cluster_freq_2/sum(mass_cluster_freq_2)))^2) + sum((x[,1,73]/sum(x[,1,73]) - (mass_cluster_freq_3/sum(mass_cluster_freq_3)))^2)
}
optim_params <- c(0.2193191513, 0.0007111157, 0.3735531590, 0.0052207254, 0.1321567425)
model_squaredError(optim_params)
optim(par = c(0.15, 0.05, 0.25, 0.03, 0.05), fn = model_squaredError, method = "L-BFGS-B")
optim(par = c(0.15, 0.05, 0.25, 0.03, 0.05), fn = model_squaredError, method = "L-BFGS-B", lower = c(0,0,0,0,0), upper = c(1,1,1,1,1))
optim(par = c(0.15, 0.05, 0.25, 0.03, 0.05), fn = model_squaredError, method = "L-BFGS-B", lower = c(0,0,0,0,0), upper = c(1,1,1,1,1))
library(dfoptim)
install.packages("dfoptim")
library(dfoptim)
nmkb(c(0.15, 0.05, 0.25, 0.03, 0.05), model_squaredError, lower=c(0,0,0,0,0), upper=c(1,1,1,1,1))
### this one is working: converges
# Parameters:
# [1] 0.0054001943 0.0004283355 0.1921911809 0.9505684999 0.0009345195
nmkb(c(0.2193191513, 0.0007111157, 0.3735531590, 0.0052207254, 0.1321567425), model_squaredError, lower=c(0,0,0,0,0), upper=c(1,1,1,1,1))
mass_clusters <- length(unique(Mass_Samples_accCodes$SequenceCluster))
avg_cluster_freq <- rep(1/mass_clusters, mass_clusters)
params_n_vP <- list(dt = 1/36, species_no = mass_clusters,  gene_no = nrow(intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(model_start_pop), Pop_eq = as.double(model_start_pop), capacity = sum(model_start_pop), Genotypes = intermed_gene_presence_absence_consensus_matrix, sigma_f = 0.2193191513, sigma_w = 0.0007111157, prop_f = 0.3735531590, delta = delta_ranking, m = 0.0052207254, migVec = avg_cluster_freq, vaccTypes = mass_VT, v = 0.1321567425, vacc_time = 0)
model_squaredError <- function(params){
all_params <- list(dt = 1/36, species_no = mass_clusters,  gene_no = nrow(intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(model_start_pop), Pop_eq = as.double(model_start_pop), capacity = sum(model_start_pop), Genotypes = intermed_gene_presence_absence_consensus_matrix, sigma_f = params[1], sigma_w = params[2], prop_f = params[3], delta = delta_ranking, m = params[4], migVec = avg_cluster_freq, vaccTypes = mass_VT, v = params[5], vacc_time = 0)
WFmodel <- WF_nG_h_vP$new(pars = all_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(WFmodel$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
sum((x[,1,37]/sum(x[,1,37]) - (mass_cluster_freq_2/sum(mass_cluster_freq_2)))^2) + sum((x[,1,73]/sum(x[,1,73]) - (mass_cluster_freq_3/sum(mass_cluster_freq_3)))^2)
}
#pmcmc_sigma_f <- mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0, max = 1)
#pmcmc_sigma_w <- mcstate::pmcmc_parameter("sigma_w", 0.05, min = 0, max = 1)
#pmcmc_prop_f <- mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1)
#pmcmc_m <- mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1)
#pmcmc_v <- mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)
optim_params <- c(0.2193191513, 0.0007111157, 0.3735531590, 0.0052207254, 0.1321567425)
model_squaredError(optim_params)
nmkb(c(0.15, 0.05, 0.25, 0.03, 0.05), model_squaredError, lower=c(0,0,0,0,0), upper=c(1,1,1,1,1))
### this one is working: converges
# Parameters:
# [1] 2.400584e-01 9.981659e-05 2.948024e-01 7.317635e-03 9.683020e-02
# error: 0.01071532
nmkb(c(0.2193191513, 0.0007111157, 0.3735531590, 0.0052207254, 0.1321567425), model_squaredError, lower=c(0,0,0,0,0), upper=c(1,1,1,1,1))
1.e-06
nmkb(c(0.15, 0.05, 0.25, 0.03, 0.05), model_squaredError, lower=c(0,0,0,0,0), upper=c(1,1,1,1,1), control = [tol=1e-09])
nmkb(c(0.15, 0.05, 0.25, 0.03, 0.05), model_squaredError, lower=c(0,0,0,0,0), upper=c(1,1,1,1,1), control = c(tol=1e-09)]
nmkb(c(0.15, 0.05, 0.25, 0.03, 0.05), model_squaredError, lower=c(0,0,0,0,0), upper=c(1,1,1,1,1), control = c(tol=1e-09))
PopPUNK_clusters <- read.csv("~/Documents/PhD_Project/Code/1st_project/odin-dust-examples/Data/refined_modelfitk3_clusters.csv")
no_clusters <- max(PopPUNK_clusters[,2]) # number of clusters in dataset
no_clusters
View(PopPUNK_clusters)
no_PopPUNK_clusters <- max(PopPUNK_clusters[,2]) # number of clusters in dataset
#save model start population
saveRDS(PopPUNK_clusters, file = "PopPUNK_clusters.rds")
#need the information of when probes were taken
accNo_to_filename <- read.delim("~/Documents/PhD_Project/Code/1st_project/odin-dust-examples/Data/filereport_read_run_PRJEB2632_tsv.txt")
accNo_to_filename <- accNo_to_filename[,c(1,8)]
head(accNo_to_filename)
accNo_to_filename[,3] <- matrix(unlist(strsplit(accNo_to_filename[,2],"/")), ncol=6, byrow = TRUE)[,6]
accNo_to_filename[,3] <- matrix(unlist(strsplit(accNo_to_filename[,3],"[.]")), ncol=2, byrow = TRUE)[,1]
accNo_to_filename <- accNo_to_filename[,c(1,3)]
colnames(accNo_to_filename) <- c(colnames(accNo_to_filename)[1], "filenames")
head(accNo_to_filename)
filenameToAccNo_dict <- accNo_to_filename$run_accession
names(filenameToAccNo_dict) <- accNo_to_filename$filenames
AccNoToIsolate_dict <- Mass_Samples_accCodes$`Isolate Name`
names(AccNoToIsolate_dict) <- Mass_Samples_accCodes$`Accession Code`
AccNoToIsolate_dict[filenameToAccNo_dict[6930_8#8]]
filenameToAccNo_dict[6930_8#8]
AccNoToIsolate_dict[filenameToAccNo_dict["6930_8#8"]]
PopPUNK_clusters$IsolateName <- AccNoToIsolate_dict[filenameToAccNo_dict[PopPUNK_clusters$Taxon]]
#save model start population
saveRDS(PopPUNK_clusters, file = "PopPUNK_clusters.rds")
#Compute consensus genomes for sequence clusters
PP_Mass_seq_clusters_dict <- PopPUNK_clusters$Cluster
names(PP_Mass_seq_clusters_dict) <- PopPUNK_clusters$IsolateName
length(unique(PopPUNK_clusters$Cluster))
PP_intermed_gene_presence_absence_consensus <- data.frame(matrix(0, nrow = sum(cog_filter)+1, ncol = length(unique(PopPUNK_clusters$Cluster))+1))
PP_intermed_gene_presence_absence_consensus[1,-1] <- paste("SeqCl_",unique(PopPUNK_clusters$Cluster),sep = "")
PP_intermed_gene_presence_absence_consensus_2001 <- data.frame(matrix(0, nrow = sum(cog_filter)+1, ncol = length(unique(PopPUNK_clusters$Cluster))+1))
PP_intermed_gene_presence_absence_consensus_2001[1,-1] <- paste("SeqCl_",unique(PopPUNK_clusters$Cluster),sep = "")
PP_intermed_gene_presence_absence_consensus_2004 <- data.frame(matrix(0, nrow = sum(cog_filter)+1, ncol = length(unique(PopPUNK_clusters$Cluster))+1))
PP_intermed_gene_presence_absence_consensus_2004[1,-1] <- paste("SeqCl_",unique(PopPUNK_clusters$Cluster),sep = "")
PP_intermed_gene_presence_absence_consensus_2007 <- data.frame(matrix(0, nrow = sum(cog_filter)+1, ncol = length(unique(PopPUNK_clusters$Cluster))+1))
PP_intermed_gene_presence_absence_consensus_2007[1,-1] <- paste("SeqCl_",unique(PopPUNK_clusters$Cluster),sep = "")
cons_genomes <- function(x){
as.double(ceiling(median(as.integer(x))))
}
for (i in unique(PopPUNK_clusters$Cluster)) {
PP_intermed_gene_presence_absence_consensus[-1,i+2] <- apply(as.matrix(intermed_gene_presence_absence[-1,c(FALSE,PP_Mass_seq_clusters_dict[unlist(PP_intermed_gene_presence_absence[1,-1])]==i)]), 1, cons_genomes)
PP_intermed_gene_presence_absence_consensus_2001[-1,i+2] <- apply(as.matrix(intermed_gene_presence_absence_2001[-1,c(FALSE,PP_Mass_seq_clusters_dict[unlist(PP_intermed_gene_presence_absence_2001[1,-1])]==i)]), 1, cons_genomes)
PP_intermed_gene_presence_absence_consensus_2004[-1,i+2] <- apply(as.matrix(intermed_gene_presence_absence_2004[-1,c(FALSE,PP_Mass_seq_clusters_dict[unlist(PP_intermed_gene_presence_absence_2004[1,-1])]==i)]), 1, cons_genomes)
PP_intermed_gene_presence_absence_consensus_2007[-1,i+2] <- apply(as.matrix(intermed_gene_presence_absence_2007[-1,c(FALSE,PP_Mass_seq_clusters_dict[unlist(PP_intermed_gene_presence_absence_2007[1,-1])]==i)]), 1, cons_genomes)
}
for (i in unique(PopPUNK_clusters$Cluster)) {
PP_intermed_gene_presence_absence_consensus[-1,i+2] <- apply(as.matrix(intermed_gene_presence_absence[-1,c(FALSE,PP_Mass_seq_clusters_dict[unlist(intermed_gene_presence_absence[1,-1])]==i)]), 1, cons_genomes)
PP_intermed_gene_presence_absence_consensus_2001[-1,i+2] <- apply(as.matrix(intermed_gene_presence_absence_2001[-1,c(FALSE,PP_Mass_seq_clusters_dict[unlist(intermed_gene_presence_absence_2001[1,-1])]==i)]), 1, cons_genomes)
PP_intermed_gene_presence_absence_consensus_2004[-1,i+2] <- apply(as.matrix(intermed_gene_presence_absence_2004[-1,c(FALSE,PP_Mass_seq_clusters_dict[unlist(intermed_gene_presence_absence_2004[1,-1])]==i)]), 1, cons_genomes)
PP_intermed_gene_presence_absence_consensus_2007[-1,i+2] <- apply(as.matrix(intermed_gene_presence_absence_2007[-1,c(FALSE,PP_Mass_seq_clusters_dict[unlist(intermed_gene_presence_absence_2007[1,-1])]==i)]), 1, cons_genomes)
}
PP_intermed_gene_presence_absence_consensus[-1,1] <- intermed_gene_presence_absence[-1,1]
PP_intermed_gene_presence_absence_consensus_2001[-1,1] <- intermed_gene_presence_absence[-1,1]
PP_intermed_gene_presence_absence_consensus_2004[-1,1] <- intermed_gene_presence_absence[-1,1]
PP_intermed_gene_presence_absence_consensus_2007[-1,1] <- intermed_gene_presence_absence[-1,1]
#save intermed gene presence absence matrices
saveRDS(PP_intermed_gene_presence_absence_consensus, file = "PP_intermed_gene_presence_absence_consensus.rds")
saveRDS(PP_intermed_gene_presence_absence_consensus_2001, file = "PP_intermed_gene_presence_absence_consensus_2001.rds")
saveRDS(PP_intermed_gene_presence_absence_consensus_2004, file = "PP_intermed_gene_presence_absence_consensus_2004.rds")
saveRDS(PP_intermed_gene_presence_absence_consensus_2007, file = "PP_intermed_gene_presence_absence_consensus_2007.rds")
# read in gene presence absence matrix
PP_intermed_gene_presence_absence_consensus <- readRDS(file = "PP_intermed_gene_presence_absence_consensus.rds")
PP_intermed_gene_presence_absence_consensus_2001 <- readRDS(file = "PP_intermed_gene_presence_absence_consensus_2001.rds")
PP_intermed_gene_presence_absence_consensus_2004 <- readRDS(file = "PP_intermed_gene_presence_absence_consensus_2004.rds")
PP_intermed_gene_presence_absence_consensus_2007 <- readRDS(file = "PP_intermed_gene_presence_absence_consensus_2007.rds")
PopPUNK_clusters$Cluster == 1
PopPUNK_clusters$IsolateName[PopPUNK_clusters$Cluster == i]
PopPUNK_clusters$IsolateName[PopPUNK_clusters$Cluster == 1]
Mass_Samples_accCodes[PopPUNK_clusters$IsolateName[PopPUNK_clusters$Cluster == 1],"Vaccine Type"]=="VT"
Mass_Samples_accCodes[PopPUNK_clusters$IsolateName[PopPUNK_clusters$Cluster == 1]]
Mass_Samples_accCodes[,PopPUNK_clusters$IsolateName[PopPUNK_clusters$Cluster == 1]]
Mass_Samples_accCodes$`Isolate Name`
Mass_Samples_accCodes$`Isolate Name`== PopPUNK_clusters$IsolateName[PopPUNK_clusters$Cluster == 1]]
Mass_Samples_accCodes$`Isolate Name`== PopPUNK_clusters$IsolateName[PopPUNK_clusters$Cluster == 1]
PopPUNK_clusters$IsolateName[PopPUNK_clusters$Cluster == 1]
subset(Mass_Samples_accCodes$`Isolate Name`, PopPUNK_clusters$IsolateName[PopPUNK_clusters$Cluster == 1])
# Add VT information
VT_dict <- Mass_Samples_accCodes$`Vaccine Type`
names(VT_dict) <- Mass_Samples_accCodes$`Isolate Name`
PopPUNK_clusters$VT <- VT_dict[PopPUNK_clusters$IsolateName]
#save model start population
saveRDS(PopPUNK_clusters, file = "PopPUNK_clusters.rds")
#save model start population
#saveRDS(PopPUNK_clusters, file = "PopPUNK_clusters.rds")
PopPUNK_clusters <- readRDS(file = "PopPUNK_clusters.rds")
# calculate Vaccine Type consensus for clusters
PP_mass_VT <- rep(0, no_PopPUNK_clusters)
for (i in 1:no_PopPUNK_clusters){
PP_mass_VT[i] <- ceiling(median(as.integer(PopPUNK_clusters[PopPUNK_clusters$Cluster == i,"VT"]=="VT")))
}
PP_mass_VT
#save VTs
saveRDS(PP_mass_VT, file = "PP_mass_VT.rds")
# Add sequencing year information
SeqYear_dict <- Mass_Samples_accCodes$`Year of Isolation`
names(SeqYear_dict) <- Mass_Samples_accCodes$`Isolate Name`
PopPUNK_clusters$SeqYear <- SeqYear_dict[PopPUNK_clusters$IsolateName]
#save model start population
saveRDS(PopPUNK_clusters, file = "PopPUNK_clusters.rds")
#calculate the frequency of the gene clusters and year
PP_mass_cluster_freq_1 <- rep(0,no_PopPUNK_clusters)
PP_mass_cluster_freq_2 <- rep(0,no_PopPUNK_clusters)
PP_mass_cluster_freq_3 <- rep(0,no_PopPUNK_clusters)
for (i in 1:no_PopPUNK_clusters){
PP_mass_cluster_freq_1[i] <- length(which(PopPUNK_clusters[which(PopPUNK_clusters$Cluster==i),]$"SeqYear"==2001))
PP_mass_cluster_freq_2[i] <- length(which(PopPUNK_clusters[which(PopPUNK_clusters$Cluster==i),]$"SeqYear"==2004))
PP_mass_cluster_freq_3[i] <- length(which(PPopPUNK_clusters[which(PopPUNK_clusters$Cluster==i),]$"SeqYear"==2007))
}
#calculate the frequency of the gene clusters and year
PP_mass_cluster_freq_1 <- rep(0,no_PopPUNK_clusters)
PP_mass_cluster_freq_2 <- rep(0,no_PopPUNK_clusters)
PP_mass_cluster_freq_3 <- rep(0,no_PopPUNK_clusters)
for (i in 1:no_PopPUNK_clusters){
PP_mass_cluster_freq_1[i] <- length(which(PopPUNK_clusters[which(PopPUNK_clusters$Cluster==i),]$"SeqYear"==2001))
PP_mass_cluster_freq_2[i] <- length(which(PopPUNK_clusters[which(PopPUNK_clusters$Cluster==i),]$"SeqYear"==2004))
PP_mass_cluster_freq_3[i] <- length(which(PopPUNK_clusters[which(PopPUNK_clusters$Cluster==i),]$"SeqYear"==2007))
}
PP_mass_cluster_freq_1
#save sequence cluster frequencies
saveRDS(PP_mass_cluster_freq_1, file = "PP_mass_cluster_freq_1.rds")
saveRDS(PP_mass_cluster_freq_2, file = "PP_mass_cluster_freq_2.rds")
saveRDS(PP_mass_cluster_freq_3, file = "PP_mass_cluster_freq_3.rds")
### create initial population that is based on the 2001 data set but not an exact sampling from it
# but a Poisson process
PP_expand_factor <- 15000 / sum(PP_mass_cluster_freq_1)
exp_noise <- 10
PP_model_start_pop <- (sapply((PP_mass_cluster_freq_1 + rexp(n = length(PP_mass_cluster_freq_1), rate = exp_noise)) * PP_expand_factor, rpois, n=1))
# visual check for the "sampling"
plot(PP_mass_cluster_freq_1/sum(PP_mass_cluster_freq_1))
points(PP_model_start_pop/sum(PP_model_start_pop), col = "red")
#save model start population
saveRDS(PP_model_start_pop, file = "PP_model_start_pop.rds")
PopPUNK_clusters <- readRDS("PopPUNK_clusters.rds")
PP_intermed_gene_presence_absence_consensus <- readRDS(file = "PP_intermed_gene_presence_absence_consensus.rds")
PP_intermed_gene_presence_absence_consensus_matrix <- sapply(PP_intermed_gene_presence_absence_consensus[-1,-1],as.double)
PP_model_start_pop <- readRDS(file = "PP_model_start_pop.rds")
#delta_ranking <- readRDS(file = "delta_ranking.rds")
PP_mass_cluster_freq_1 <- readRDS(file = "PP_mass_cluster_freq_1.rds")
PP_mass_cluster_freq_2 <- readRDS(file = "PP_mass_cluster_freq_2.rds")
PP_mass_cluster_freq_3 <- readRDS(file = "PP_mass_cluster_freq_3.rds")
PP_mass_VT <- readRDS(file = "PP_mass_VT.rds")
PP_mass_clusters <- length(unique(PopPUNK_clusters$Cluster))
PP_avg_cluster_freq <- rep(1/PP_mass_clusters, PP_mass_clusters)
WF_PP <- odin.dust::odin_dust("NFDS_Model.R")
PP_model_squaredError <- function(params){
all_params <- list(dt = 1/36, species_no = PP_mass_clusters,  gene_no = nrow(PP_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(PP_model_start_pop), Pop_eq = as.double(PP_model_start_pop), capacity = sum(PP_model_start_pop), Genotypes = PP_intermed_gene_presence_absence_consensus_matrix, sigma_f = params[1], sigma_w = params[2], prop_f = params[3], delta = delta_ranking, m = params[4], migVec = PP_avg_cluster_freq, vaccTypes = PP_mass_VT, v = params[5], vacc_time = 0)
WFmodel <- WF_PP$new(pars = all_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(WFmodel$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
sum((x[,1,37]/sum(x[,1,37]) - (PP_mass_cluster_freq_2/sum(PP_mass_cluster_freq_2)))^2) + sum((x[,1,73]/sum(x[,1,73]) - (PP_mass_cluster_freq_3/sum(PP_mass_cluster_freq_3)))^2)
}
#library(dfoptim)
nmkb(c(0.15, 0.05, 0.25, 0.03, 0.05), PP_model_squaredError, lower=c(0,0,0,0,0), upper=c(1,1,1,1,1))
PP_intermed_gene_presence_absence_consensus <- readRDS(file = "PP_intermed_gene_presence_absence_consensus.rds")
PP_intermed_gene_presence_absence_consensus_matrix <- sapply(PP_intermed_gene_presence_absence_consensus[-1,-1],as.double)
PP_intermed_gene_presence_absence_consensus_matrix
PP_intermed_gene_presence_absence_consensus
#Compute consensus genomes for sequence clusters
PP_Mass_seq_clusters_dict <- PopPUNK_clusters$Cluster
names(PP_Mass_seq_clusters_dict) <- PopPUNK_clusters$IsolateName
PP_intermed_gene_presence_absence_consensus <- data.frame(matrix(0, nrow = sum(cog_filter)+1, ncol = length(unique(PopPUNK_clusters$Cluster))+1))
PP_intermed_gene_presence_absence_consensus[1,-1] <- paste("SeqCl_",unique(PopPUNK_clusters$Cluster),sep = "")
PP_intermed_gene_presence_absence_consensus_2001 <- data.frame(matrix(0, nrow = sum(cog_filter)+1, ncol = length(unique(PopPUNK_clusters$Cluster))+1))
PP_intermed_gene_presence_absence_consensus_2001[1,-1] <- paste("SeqCl_",unique(PopPUNK_clusters$Cluster),sep = "")
PP_intermed_gene_presence_absence_consensus_2004 <- data.frame(matrix(0, nrow = sum(cog_filter)+1, ncol = length(unique(PopPUNK_clusters$Cluster))+1))
PP_intermed_gene_presence_absence_consensus_2004[1,-1] <- paste("SeqCl_",unique(PopPUNK_clusters$Cluster),sep = "")
PP_intermed_gene_presence_absence_consensus_2007 <- data.frame(matrix(0, nrow = sum(cog_filter)+1, ncol = length(unique(PopPUNK_clusters$Cluster))+1))
PP_intermed_gene_presence_absence_consensus_2007[1,-1] <- paste("SeqCl_",unique(PopPUNK_clusters$Cluster),sep = "")
cons_genomes <- function(x){
as.double(ceiling(median(as.integer(x))))
}
for (i in unique(PopPUNK_clusters$Cluster)) {
PP_intermed_gene_presence_absence_consensus[-1,i+1] <- apply(as.matrix(intermed_gene_presence_absence[-1,c(FALSE,PP_Mass_seq_clusters_dict[unlist(intermed_gene_presence_absence[1,-1])]==i)]), 1, cons_genomes)
PP_intermed_gene_presence_absence_consensus_2001[-1,i+1] <- apply(as.matrix(intermed_gene_presence_absence_2001[-1,c(FALSE,PP_Mass_seq_clusters_dict[unlist(intermed_gene_presence_absence_2001[1,-1])]==i)]), 1, cons_genomes)
PP_intermed_gene_presence_absence_consensus_2004[-1,i+1] <- apply(as.matrix(intermed_gene_presence_absence_2004[-1,c(FALSE,PP_Mass_seq_clusters_dict[unlist(intermed_gene_presence_absence_2004[1,-1])]==i)]), 1, cons_genomes)
PP_intermed_gene_presence_absence_consensus_2007[-1,i+1] <- apply(as.matrix(intermed_gene_presence_absence_2007[-1,c(FALSE,PP_Mass_seq_clusters_dict[unlist(intermed_gene_presence_absence_2007[1,-1])]==i)]), 1, cons_genomes)
}
PP_intermed_gene_presence_absence_consensus[-1,1] <- intermed_gene_presence_absence[-1,1]
PP_intermed_gene_presence_absence_consensus_2001[-1,1] <- intermed_gene_presence_absence[-1,1]
PP_intermed_gene_presence_absence_consensus_2004[-1,1] <- intermed_gene_presence_absence[-1,1]
PP_intermed_gene_presence_absence_consensus_2007[-1,1] <- intermed_gene_presence_absence[-1,1]
PP_intermed_gene_presence_absence_consensus[-1,1] <- intermed_gene_presence_absence[-1,1]
PP_intermed_gene_presence_absence_consensus_2001[-1,1] <- intermed_gene_presence_absence[-1,1]
PP_intermed_gene_presence_absence_consensus_2004[-1,1] <- intermed_gene_presence_absence[-1,1]
PP_intermed_gene_presence_absence_consensus_2007[-1,1] <- intermed_gene_presence_absence[-1,1]
#save intermed gene presence absence matrices
saveRDS(PP_intermed_gene_presence_absence_consensus, file = "PP_intermed_gene_presence_absence_consensus.rds")
saveRDS(PP_intermed_gene_presence_absence_consensus_2001, file = "PP_intermed_gene_presence_absence_consensus_2001.rds")
saveRDS(PP_intermed_gene_presence_absence_consensus_2004, file = "PP_intermed_gene_presence_absence_consensus_2004.rds")
saveRDS(PP_intermed_gene_presence_absence_consensus_2007, file = "PP_intermed_gene_presence_absence_consensus_2007.rds")
PopPUNK_clusters <- readRDS("PopPUNK_clusters.rds")
PP_intermed_gene_presence_absence_consensus <- readRDS(file = "PP_intermed_gene_presence_absence_consensus.rds")
PP_intermed_gene_presence_absence_consensus_matrix <- sapply(PP_intermed_gene_presence_absence_consensus[-1,-1],as.double)
PP_model_start_pop <- readRDS(file = "PP_model_start_pop.rds")
#delta_ranking <- readRDS(file = "delta_ranking.rds")
PP_mass_cluster_freq_1 <- readRDS(file = "PP_mass_cluster_freq_1.rds")
PP_mass_cluster_freq_2 <- readRDS(file = "PP_mass_cluster_freq_2.rds")
PP_mass_cluster_freq_3 <- readRDS(file = "PP_mass_cluster_freq_3.rds")
PP_mass_VT <- readRDS(file = "PP_mass_VT.rds")
PP_mass_clusters <- length(unique(PopPUNK_clusters$Cluster))
PP_avg_cluster_freq <- rep(1/PP_mass_clusters, PP_mass_clusters)
WF_PP <- odin.dust::odin_dust("NFDS_Model.R")
PP_model_squaredError <- function(params){
all_params <- list(dt = 1/36, species_no = PP_mass_clusters,  gene_no = nrow(PP_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(PP_model_start_pop), Pop_eq = as.double(PP_model_start_pop), capacity = sum(PP_model_start_pop), Genotypes = PP_intermed_gene_presence_absence_consensus_matrix, sigma_f = params[1], sigma_w = params[2], prop_f = params[3], delta = delta_ranking, m = params[4], migVec = PP_avg_cluster_freq, vaccTypes = PP_mass_VT, v = params[5], vacc_time = 0)
WFmodel <- WF_PP$new(pars = all_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(WFmodel$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
sum((x[,1,37]/sum(x[,1,37]) - (PP_mass_cluster_freq_2/sum(PP_mass_cluster_freq_2)))^2) + sum((x[,1,73]/sum(x[,1,73]) - (PP_mass_cluster_freq_3/sum(PP_mass_cluster_freq_3)))^2)
}
#library(dfoptim)
nmkb(c(0.15, 0.05, 0.25, 0.03, 0.05), PP_model_squaredError, lower=c(0,0,0,0,0), upper=c(1,1,1,1,1))
model_squaredError(c(0.15066986, 0.01008679, 0.01978237, 0.01519036, 0.04727967))
1/62 * 0.02699967
1/41 * 0.01071532
optim_fit <- nmkb(c(0.15, 0.05, 0.25, 0.03, 0.05), model_squaredError, lower=c(0,0,0,0,0), upper=c(1,1,1,1,1))
optim_fit
### this one is working: converges
# Parameters:
# order: sigma_f, sigma_w, prop_f, migration, vaccination
# [1] 2.400584e-01 9.981659e-05 2.948024e-01 7.317635e-03 9.683020e-02
# error: 0.01071532
print(optim_fit[1]$value)
### this one is working: converges
# Parameters:
# order: sigma_f, sigma_w, prop_f, migration, vaccination
# [1] 2.400584e-01 9.981659e-05 2.948024e-01 7.317635e-03 9.683020e-02
# error: 0.01071532
print(optim_fit$value)
### this one is working: converges
# Parameters:
# order: sigma_f, sigma_w, prop_f, migration, vaccination
# [1] 2.400584e-01 9.981659e-05 2.948024e-01 7.317635e-03 9.683020e-02
# error: 0.01071532
print(optim_fit$value/(2*mass_clusters))
#library(dfoptim)
PP_optim_fit <- nmkb(c(0.15, 0.05, 0.25, 0.03, 0.05), PP_model_squaredError, lower=c(0,0,0,0,0), upper=c(1,1,1,1,1))
# result:
#$par
#[1] 0.15066986 0.01008679 0.01978237 0.01519036 0.04727967
#$value
#[1] 0.02361034
print(PP_optim_fit$value/(2 * PP_mass_clusters))
# reading in the gene presence absence matrix produced by ggCaller
ggCaller_gene_presence_absence <- read.csv(paste(path_to_data, "Massachusetts_ggcaller/run2/ggCaller_output/gene_presence_absence.csv", sep = ""), header=FALSE)
View(ggCaller_gene_presence_absence)
ggCaller_bool_gene_presence_absence <- ggCaller_gene_presence_absence[,c(-2,-3)]
View(ggCaller_bool_gene_presence_absence)
ggCaller_bool_gene_presence_absence <- ggCaller_gene_presence_absence[,c(-2,-3)]
ggCaller_bool_gene_presence_absence[-1,-1] <- apply(ggCaller_bool_gene_presence_absence[-1,-1],c(1,2), convert_to_bool)
# converting the gene presence absence matrix into a boolean df (0 = gene not present, 1 = gene present)
convert_to_bool <- function(x){
if (x=="") 0 else 1
}
ggCaller_bool_gene_presence_absence[-1,-1] <- apply(ggCaller_bool_gene_presence_absence[-1,-1],c(1,2), convert_to_bool)
View(ggCaller_bool_gene_presence_absence)
