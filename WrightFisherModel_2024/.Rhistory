n_steps <- 5
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 1)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
n_steps <- 1000
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains =4, n_workers = 4,
n_threads_total = 4)
#n_chains = 8, n_workers = 8,
#n_threads_total = 8
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run, burnin = 250, thin = 1)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
print(parameter_mean_hpd)
det_mcmc1 <- coda::as.mcmc(cbind(det_pmcmc_run$probabilities, det_pmcmc_run$pars))
pdf(file = paste(output_filename,"4param_det_mcmc1.pdf",sep = "_"),   # The directory you want to save the file in
width = 6, # The width of the plot in inches
height = 12)
plot(det_mcmc1)
dev.off()
print("det_mcmc_1 final log likelihood")
processed_chains$probabilities[nrow(processed_chains$probabilities),2]
print("det_mcmc_1 mean log likelihood")
mean(processed_chains$probabilities[,2])
det_proposal_matrix <- cov(processed_chains$pars)
det_mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", parameter_mean_hpd[1], min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", parameter_mean_hpd[2], min = 0, max = 1),mcstate::pmcmc_parameter("m", parameter_mean_hpd[3], min = -1000, max = 0), mcstate::pmcmc_parameter("v", parameter_mean_hpd[4], min = 0, max = 1)), det_proposal_matrix, make_transform(complex_params))
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
index = index,
compare = combined_compare)
n_steps <- 5
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 1)
det_pmcmc_run <- mcstate::pmcmc(det_mcmc_pars, det_filter, control = control)
n_steps <- 20000
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 4, n_workers = 4, n_threads_total = 4)
det_pmcmc_run2 <- mcstate::pmcmc(det_mcmc_pars, det_filter, control = control)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run2, burnin = 2000, thin = 1)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
print(parameter_mean_hpd)
par(mfrow = c(1,1))
det_mcmc2 <- coda::as.mcmc(cbind(det_pmcmc_run2$probabilities, det_pmcmc_run2$pars))
pdf(file = paste(output_filename,"_4param_det_mcmc2.pdf",sep = "_"),   # The directory you want to save the file in
width = 6, # The width of the plot in inches
height = 12)
plot(det_mcmc2)
dev.off()
print("det_mcmc_2 final log likelihood")
processed_chains$probabilities[nrow(processed_chains$probabilities),2]
print("det_mcmc_2 mean log likelihood")
mean(processed_chains$probabilities[,2])
saveRDS(det_pmcmc_run2, paste(output_filename, "_4param_det_pmcmc_run2.rds", sep = ""))
} else if(params_total == 5){
WF <- odin.dust::odin_dust("NFDS_Model_PPxSero_5param.R")
complex_params = list(species_no = species_no, Pop_ini = Pop_ini, Pop_eq = Pop_eq, Genotypes = intermed_gene_presence_absence_consensus[-1,-1], capacity = capacity, delta = delta, vaccTypes = vaccTypes, gene_no = gene_no, vacc_time = vacc_time, dt = dt, migVec = (migVec), sero_no = sero_no)
#complex_params <- c(Pop_ini, Pop_eq, Genotypes, capacity, delta, species_no, gene_no, vacc_time, dt, migVec,vT)
make_transform <- function(m) {
function(theta) {
as_double_mtx <- function(x){
sapply(x,as.double)
}
c(lapply(m, as_double_mtx), as.list(theta))
}
}
proposal_matrix <- diag(0.1,5) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
#proposal_matrix[1,1] <- exp(0.1)
#proposal_matrix[3,3] <- exp(0.1)
# here, all parameters are proposed independently.
# think about this, this might not actually be true
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(pmcmc_sigma_f, pmcmc_sigma_w, pmcmc_prop_f, pmcmc_m, pmcmc_v), proposal_matrix, transform)
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
#= make_transform(c(Pop_ini, Pop_eq, Genotypes, capacity, delta, vaccTypes, species_no, gene_no, vacc_time)))
#mcmc_pars$names()
#mcmc_pars$model(mcmc_pars$initial())
# read this: https://mrc-ide.github.io/mcstate/reference/pmcmc_parameters.html
# it explains how to not fit all parameters but just the ones I want
# non-scalar parameters have to be transformed for this.
index <- function(info) {
list(run = c(sum_clust = info$index$Pop_tot),
state = c(Pop = info$index$Pop))
}
#WF_model <- WF$new(pars = list(), time = 0, n_particles = 1L)
#index(WF$info())
#proposal_matrix <- diag(0.1,4) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
# here, all parameters are proposed independently.
# think about this, this might not actually be true
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(pmcmc_sigma_f, pmcmc_sigma_w, pmcmc_prop_f, pmcmc_m, pmcmc_v), proposal_matrix, transform)
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 01), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = -2), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("sigma_w", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("m", -4, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
proposal_matrix <- diag(c(exp(1), 0.1, exp(1), exp(1), 0.1))
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", runif(n=1, min=-3.4, max=0), min = -3.5, max = 0), mcstate::pmcmc_parameter("prop_f", runif(n=1, min=0, max=1), min = 0, max = 1), mcstate::pmcmc_parameter("sigma_w", runif(n=1, min=-1000, max=-3.6), min = -1000, max = -3.5), mcstate::pmcmc_parameter("m", runif(n=1, min=-10, max=0), min = -1000, max = 0), mcstate::pmcmc_parameter("v", runif(n=1, min=0, max=1), min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", runif(n=1, min=-10, max=0), min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", runif(n=1, min=0, max=1), min = 0, max = 1), mcstate::pmcmc_parameter("sigma_w", runif(n=1, min=-1000, max=0), min = -1000, max = -3.5), mcstate::pmcmc_parameter("m", runif(n=1, min=-10, max=0), min = -1000, max = 0), mcstate::pmcmc_parameter("v", runif(n=1, min=0, max=1), min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars$initial()
#mcmc_pars$model(mcmc_pars$initial())
#WF$public_methods$has_openmp()
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
index = index,
compare = combined_compare)
n_steps <- 5
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 1)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
n_steps <- 1000
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains =4, n_workers = 4,
n_threads_total = 4)
#n_chains = 8, n_workers = 8,
#n_threads_total = 8
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run, burnin = 250, thin = 1)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
print(parameter_mean_hpd)
det_mcmc1 <- coda::as.mcmc(cbind(det_pmcmc_run$probabilities, det_pmcmc_run$pars))
pdf(file = paste(output_filename,"5param_det_mcmc1.pdf",sep = "_"),   # The directory you want to save the file in
width = 6, # The width of the plot in inches
height = 12)
plot(det_mcmc1)
dev.off()
print("det_mcmc_1 final log likelihood")
print(processed_chains$probabilities[nrow(processed_chains$probabilities),2])
print("det_mcmc_1 mean log likelihood")
mean(processed_chains$probabilities[,2])
print(det_proposal_matrix <- cov(processed_chains$pars))
det_mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", parameter_mean_hpd[1], min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", parameter_mean_hpd[2], min = 0, max = 1), mcstate::pmcmc_parameter("sigma_w", parameter_mean_hpd[3], min = -1000, max = 0),mcstate::pmcmc_parameter("m", parameter_mean_hpd[4], min = -1000, max = 0), mcstate::pmcmc_parameter("v", parameter_mean_hpd[5], min = 0, max = 1)), det_proposal_matrix, make_transform(complex_params))
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
index = index,
compare = combined_compare)
n_steps <- 5
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 1)
det_pmcmc_run <- mcstate::pmcmc(det_mcmc_pars, det_filter, control = control)
n_steps <- 20000
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 4, n_workers = 4, n_threads_total = 4)
det_pmcmc_run2 <- mcstate::pmcmc(det_mcmc_pars, det_filter, control = control)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run2, burnin = 2000, thin = 1)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
print(parameter_mean_hpd)
par(mfrow = c(1,1))
det_mcmc2 <- coda::as.mcmc(cbind(det_pmcmc_run2$probabilities, det_pmcmc_run2$pars))
pdf(file = paste(output_filename,"_5param_det_mcmc2.pdf",sep = "_"),   # The directory you want to save the file in
width = 6, # The width of the plot in inches
height = 12)
plot(det_mcmc2)
dev.off()
print("det_mcmc_2 final log likelihood")
processed_chains$probabilities[nrow(processed_chains$probabilities),2]
print("det_mcmc_2 mean log likelihood")
mean(processed_chains$probabilities[,2])
saveRDS(det_pmcmc_run2, paste(output_filename, "_5param_det_pmcmc_run2.rds", sep = ""))
} else{
print(paste("Number of parameters chosen not okay:", params_total))
}
# add 6A to PCV7 because there is strong cross-immunity btw PVC7 and 6A (4.Croucher, N. J. et al. Population genomics of post-vaccine changes in pneumococcal epidemiology. Nat. Genet. 45, 656–663 (2013).)
#PCV7_VTs <- rep(0,sero_no)
#names(PCV7_VTs) <- unique(seq_clusters$Serotype)
#PCV7_VTs[intersect(PCV7_VTs,c("4", "6A","6B", "9V", "14", "18C", "19F", "23F"))] <- 1
#vaccTypes1 <- unname(PCV7_VTs)
mass_VT <- readRDS("Navajo_SeroVT.rds")
delta <- delta_ranking
vaccTypes <- mass_VT
migVec <- data.frame(avg_cluster_freq)
complex_params = list(species_no = species_no, Pop_ini = Pop_ini, Pop_eq = Pop_eq, Genotypes = intermed_gene_presence_absence_consensus[-1,-1], capacity = capacity, delta = delta, vaccTypes = vaccTypes, gene_no = gene_no, vacc_time = vacc_time, dt = dt, sigma_w = pmcmc_sigma_w, migVec = (migVec), sero_no = sero_no, sigma_f = -1000, prop_f = 1)
make_transform <- function(m) {
function(theta) {
as_double_mtx <- function(x){
sapply(x,as.double)
}
c(lapply(m, as_double_mtx), as.list(theta))
}
}
index <- function(info) {
list(run = c(sum_clust = info$index$Pop_tot),
state = c(Pop = info$index$Pop))
}
#proposal_matrix <- diag(0.1,4) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
# here, all parameters are proposed independently.
# think about this, this might not actually be true
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(pmcmc_sigma_f, pmcmc_sigma_w, pmcmc_prop_f, pmcmc_m, pmcmc_v), proposal_matrix, transform)
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 01), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = -2), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
# mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
proposal_matrix <- diag(c(exp(1), 0.1))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("m", runif(n=1, min=-10, max=0), min = -1000, max = 0), mcstate::pmcmc_parameter("v", runif(n=1, min=0, max=1), min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars$initial()
#WF$public_methods$has_openmp()
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
index = index,
compare = combined_compare)
n_steps <- 5
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 1)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
### 13.12.2024
# colour these plots in by whether genes are predicted to be under NFDS or not
Mass_delta_ranking <- readRDS(file = "ggC_delta_ranking.rds")
delta_ranking <- readRDS(file = "UK_delta_ranking.rds")
UK_delta_ranking <- readRDS(file = "UK_delta_ranking.rds")
head(UK_delta_ranking)
tail(UK_delta_ranking)
UK_intermed_gene_presence_absence_consensus <- readRDS(file = "UK_ggCaller_intermed_consensus.rds")
head(UK_intermed_gene_presence_absence_consensus[,1])
head(names(UK_ggC_all_gene_freqs_dict))
head(names(UK_ggC_intermed_gene_freqs))
length(Mass_delta_ranking)
head(Mass_delta_ranking)
# UK genes under NFDS 4-param model (Dec 2024): 0.1432
# Mass genes under NFDS 4-param model (Dec 2024): 0.2797
# gene under NFDS if delta[i] <= prop_f * gene_no
Mass_intermed_gene_underNFDS <- if(Mass_delta_ranking <= 0.2797 * length(Mass_delta_ranking)) 1 else 0
which((Mass_delta_ranking <= 0.2797 * length(Mass_delta_ranking)))
as.integer(which((Mass_delta_ranking <= 0.2797 * length(Mass_delta_ranking))))
# UK genes under NFDS 4-param model (Dec 2024): 0.1432
# Mass genes under NFDS 4-param model (Dec 2024): 0.2797
# gene under NFDS if delta[i] <= prop_f * gene_no
Mass_intermed_gene_underNFDS <- rep(0, length(Mass_delta_ranking))
# UK genes under NFDS 4-param model (Dec 2024): 0.1432
# Mass genes under NFDS 4-param model (Dec 2024): 0.2797
# gene under NFDS if delta[i] <= prop_f * gene_no
Mass_intermed_gene_underNFDS <- rep(0, length(Mass_delta_ranking))
names(Mass_intermed_gene_underNFDS) <- names(Mass_delta_ranking)
Mass_intermed_gene_underNFDS[which((Mass_delta_ranking <= 0.2797 * length(Mass_delta_ranking)))] <- 1
length(which((Mass_delta_ranking <= 0.2797 * length(Mass_delta_ranking))))
sum(Mass_intermed_gene_underNFDS)
0.2797 * length(Mass_delta_ranking)
#if(Mass_delta_ranking <= 0.2797 * length(Mass_delta_ranking)) 1 else 0
UK_intermed_gene_underNFDS <- rep(0, length(UK_delta_ranking))
names(UK_intermed_gene_underNFDS) <- names(UK_delta_ranking)
UK_intermed_gene_underNFDS[which((UK_delta_ranking <= 0.1432 * length(UK_delta_ranking)))] <- 1
sum(UK_intermed_gene_underNFDS)
head(UK_intermed_gene_underNFDS)
length(UK_ggC_all_gene_freqs_dict)
# expand this vector to all genes, NFDS or not
Mass_underNFDS <- rep(0, Mass_ggC_all_gene_freqs_dict)
# expand this vector to all genes, NFDS or not
Mass_underNFDS <- rep(0, length(Mass_ggC_all_gene_freqs_dict))
# expand this vector to all genes, NFDS or not
Mass_underNFDS <- rep(0, length(Mass_ggC_all_gene_freqs_dict))
names(Mass_underNFDS) <- readRDS("Mass_ggC_all_gene_names.rds")
which(Mass_intermed_gene_underNFDS==1)
Mass_underNFDS[which(Mass_intermed_gene_underNFDS==1)] <- 1
which(Mass_underNFDS==1)
# UK genes under NFDS 4-param model (Dec 2024): 0.1432
# Mass genes under NFDS 4-param model (Dec 2024): 0.2797
# gene under NFDS if delta[i] <= prop_f * gene_no
Mass_delta_ranking_names <- Mass_delta_ranking
names(Mass_delta_ranking_names) <- Mass_ggC_intermed_gene_names
head(Mass_delta_ranking_names)
head(Mass_delta_ranking)
# UK genes under NFDS 4-param model (Dec 2024): 0.1432
# Mass genes under NFDS 4-param model (Dec 2024): 0.2797
# gene under NFDS if delta[i] <= prop_f * gene_no
Mass_delta_ranking_names <- Mass_delta_ranking
names(Mass_delta_ranking_names) <- Mass_ggC_intermed_gene_names
Mass_intermed_gene_underNFDS <- rep(0, length(Mass_delta_ranking_names))
names(Mass_intermed_gene_underNFDS) <- names(Mass_delta_ranking_names)
Mass_intermed_gene_underNFDS[which((Mass_delta_ranking_names <= 0.2797 * length(Mass_delta_ranking_names)))] <- 1
head(Mass_intermed_gene_underNFDS)
names(UK_delta_ranking_names) <- UK_ggC_intermed_gene_names
#if(Mass_delta_ranking <= 0.2797 * length(Mass_delta_ranking)) 1 else 0
UK_delta_ranking_names <- UK_delta_ranking
names(UK_delta_ranking_names) <- UK_ggC_intermed_gene_names
UK_intermed_gene_underNFDS <- rep(0, length(UK_delta_ranking_names))
names(UK_intermed_gene_underNFDS) <- names(UK_delta_ranking_names)
UK_intermed_gene_underNFDS[which((UK_delta_ranking_names <= 0.1432 * length(UK_delta_ranking_names)))] <- 1
# expand this vector to all genes, NFDS or not
Mass_underNFDS <- rep(0, length(Mass_ggC_all_gene_freqs_dict))
names(Mass_underNFDS) <- readRDS("Mass_ggC_all_gene_names.rds")
Mass_underNFDS[which(Mass_intermed_gene_underNFDS==1)] <- 1
head(Mass_underNFDS)
# expand this vector to all genes, NFDS or not
Mass_underNFDS <- rep(0, length(Mass_ggC_all_gene_freqs_dict))
names(Mass_underNFDS) <- readRDS("Mass_ggC_all_gene_names.rds")
Mass_underNFDS[names(which(Mass_intermed_gene_underNFDS==1))] <- 1
head(Mass_underNFDS)
sum(Mass_underNFDS)
# UK
UK_underNFDS <- rep(0, length(UK_ggC_all_gene_freqs_dict))
names(UK_underNFDS) <- readRDS("UK_ggC_all_gene_names.rds")
UK_underNFDS[names(which(UK_intermed_gene_underNFDS==1))] <- 1
sum(UK_underNFDS)
head(UK_ggC_all_gene_freqs_dict)
head(UK_underNFDS)
head(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_90)])
head(match_UKMassUnfiltered_90)
# create color vector
colours_UKMassUnfiltered_90 <- rep("black", length(match_UKMassUnfiltered_90))
head(UK_underNFDS[names(match_UKMassUnfiltered_90)])
head(names(which(UK_underNFDS[names(match_UKMassUnfiltered_90)]==1)))
# create color vector
colours_UKMassUnfiltered_90 <- rep("black", length(match_UKMassUnfiltered_90))
colours_UKMassUnfiltered_90[names(which(UK_underNFDS[names(match_UKMassUnfiltered_90)]==1))] <- "blue"
colours_UKMassUnfiltered_90[names(which(UK_underNFDS[match_UKMassUnfiltered_90[names(match_UKMassUnfiltered_90)]]==1))] <- "red"
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_90)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_90[names(match_UKMassUnfiltered_90)]], xlab = "UK gene frequencies", ylab = "Mass gene frequencies",main="All Gene Frequencies, 90% sequence identity", cols = colours_UKMassUnfiltered_90)
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_90)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_90[names(match_UKMassUnfiltered_90)]], xlab = "UK gene frequencies", ylab = "Mass gene frequencies",main="All Gene Frequencies, 90% sequence identity", col = colours_UKMassUnfiltered_90)
warnings()
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_90)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_90[names(match_UKMassUnfiltered_90)]], xlab = "UK gene frequencies", ylab = "Mass gene frequencies",main="All Gene Frequencies, 90% sequence identity", col = colours_UKMassUnfiltered_90)
abline(0,1)
head(colours_UKMassUnfiltered_90)
# create color vector
colours_UKMassUnfiltered_90 <- rep("black", length(match_UKMassUnfiltered_90))
colours_UKMassUnfiltered_90[names(which(UK_underNFDS[names(match_UKMassUnfiltered_90)]==1))] <- "blue"
colours_UKMassUnfiltered_90[names(which(UK_underNFDS[match_UKMassUnfiltered_90[names(match_UKMassUnfiltered_90)]]==1))] <- "red"
which(colours_UKMassUnfiltered_90 == "red")
par(pty="s")
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_90)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_90[names(match_UKMassUnfiltered_90)]], xlab = "UK gene frequencies", ylab = "Mass gene frequencies",main="All Gene Frequencies, 90% sequence identity", col = colours_UKMassUnfiltered_90)
colours_UKMassUnfiltered_90
which(colours_UKMassUnfiltered_90 == "red")
which(colours_UKMassUnfiltered_90 == "blue")
# create color vector
colours_UKMassUnfiltered_90 <- rep("black", length(match_UKMassUnfiltered_90))
names(colours_UKMassUnfiltered_90) <- names(match_UKMassUnfiltered_90)
colours_UKMassUnfiltered_90[names(which(UK_underNFDS[names(match_UKMassUnfiltered_90)]==1))] <- "blue"
colours_UKMassUnfiltered_90[names(which(UK_underNFDS[match_UKMassUnfiltered_90[names(match_UKMassUnfiltered_90)]]==1))] <- "red"
par(pty="s")
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_90)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_90[names(match_UKMassUnfiltered_90)]], xlab = "UK gene frequencies", ylab = "Mass gene frequencies",main="All Gene Frequencies, 90% sequence identity", col = colours_UKMassUnfiltered_90)
abline(0,1)
length(which(colours_UKMassUnfiltered_90=="red"))
length(which(colours_UKMassUnfiltered_90=="blue"))
MassUK_seq_id_vec <- mmseq_results_FindMassInUK$V3
MassUKUnfiltered_seq_id_vec <- mmseq_results_FindMassInUK_unfiltered$V3
match_MassUKUnfiltered_90 <- recip_matching(MassInUKUnfiltered_dict, UKInMassUnfiltered_dict, MassUKUnfiltered_seq_id_vec, 0.90)
match_UKMassUnfiltered_90 <- recip_matching(UKInMassUnfiltered_dict, MassInUKUnfiltered_dict, UKMassUnfiltered_seq_id_vec, 0.90)
head(match_MassUKUnfiltered_90)
# create color vector
colours_UKMassUnfiltered_90 <- rep("black", length(match_UKMassUnfiltered_90))
names(colours_UKMassUnfiltered_90) <- names(match_UKMassUnfiltered_90)
colours_UKMassUnfiltered_90[names(which(UK_underNFDS[names(match_UKMassUnfiltered_90)]==1))] <- "blue"
colours_UKMassUnfiltered_90[match_MassUKUnfiltered_90[names(which(Mass_underNFDS[match_UKMassUnfiltered_90]==1))]] <- "red"
par(pty="s")
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_90)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_90[names(match_UKMassUnfiltered_90)]], xlab = "UK gene frequencies", ylab = "Mass gene frequencies",main="All Gene Frequencies, 90% sequence identity", col = colours_UKMassUnfiltered_90)
abline(0,1)
180/4
# Null model
Navajo_2param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_12_16/ModelComparison_Navajo1vacc/Navajo_PPxSero_ggCaller_PopPUNK_Null_det_pmcmc_run2.rds")
Navajo_2param_mcmc2_probs <- coda::as.mcmc(cbind(Navajo_2param_mcmc2$probabilities, Navajo_2param_mcmc2$pars))
#coda::effectiveSize(Navajo_2param_mcmc2_probs)
#summary(coda::as.mcmc(Navajo_2param_mcmc2_probs))
Navajo_likelihood_2param <- median(Navajo_2param_mcmc2_probs[,"log_likelihood"])
#mean(Navajo_2param_mcmc2_probs[,"log_likelihood"])
param_mean <- apply(Navajo_2param_mcmc2_probs, 2, mean)
percentile95_low <- apply(Navajo_2param_mcmc2_probs,2,quantile,.025)
percentile95_up <- apply(Navajo_2param_mcmc2_probs,2,quantile,.975)
param_mean
percentile95_low
percentile95_up
#     log_prior log_likelihood  log_posterior              m              v
#     0.0000000   -701.8488109   -701.8488109     -3.6866418      0.2503319
#    0.00000000  -705.01409216  -705.01409216    -4.02234594     0.08606398
#     0.0000000   -700.6613721   -700.6613721     -3.2655542      0.6474211
rm(Navajo_2param_mcmc2)
# 3-parameter model
Navajo_3param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_12_16/ModelComparison_Navajo1vacc/Navajo_PPxSero_ggCaller_PopPUNK_3param_det_pmcmc_run2.rds")
Navajo_3param_mcmc2_probs <- coda::as.mcmc(cbind(Navajo_3param_mcmc2$probabilities, Navajo_3param_mcmc2$pars))
#coda::effectiveSize(Navajo_3param_mcmc2_probs)
#summary(coda::as.mcmc(Navajo_3param_mcmc2_probs))
Navajo_likelihood_3param <- median(Navajo_3param_mcmc2_probs[,"log_likelihood"])
#mean(Navajo_3param_mcmc2_probs[,"log_likelihood"])
param_mean <- apply(Navajo_3param_mcmc2_probs, 2, mean)
percentile95_low <- apply(Navajo_3param_mcmc2_probs,2,quantile,.025)
percentile95_up <- apply(Navajo_3param_mcmc2_probs,2,quantile,.975)
#     log_prior log_likelihood  log_posterior        sigma_f              m              v
#     0.0000000   -775.6613259   -775.6613259     -4.5054937     -2.8647564      0.2628066
#     0.0000000   -779.0923917   -779.0923917     -5.0989938     -3.3458219      0.1111547
#     0.0000000   -774.0645465   -774.0645465     -3.8534879     -2.2976970      0.5704883
rm(Navajo_3param_mcmc2)
param_mean
percentile95_low
percentile95_up
# 4-parameter model
Navajo_4param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_12_16/ModelComparison_Navajo1vacc/Navajo_PPxSero_ggCaller_PopPUNK_4param_det_pmcmc_run2.rds")
Navajo_4param_mcmc2_probs <- coda::as.mcmc(cbind(Navajo_4param_mcmc2$probabilities, Navajo_4param_mcmc2$pars))
#coda::effectiveSize(Navajo_4param_mcmc2_probs)
#summary(coda::as.mcmc(Navajo_4param_mcmc2_probs))
Navajo_likelihood_4param <- median(Navajo_4param_mcmc2_probs[,"log_likelihood"])
#mean(Navajo_4param_mcmc2_probs[,"log_likelihood"])
param_mean <- apply(Navajo_4param_mcmc2_probs, 2, mean)
percentile95_low <- apply(Navajo_4param_mcmc2_probs,2,quantile,.025)
percentile95_up <- apply(Navajo_4param_mcmc2_probs,2,quantile,.975)
#     log_prior log_likelihood  log_posterior        sigma_f         prop_f              m              v
#     0.0000000   -775.4195261   -775.4195261     -4.3750991      0.9006583     -2.8662851      0.2635598
#     0.0000000   -779.1645089   -779.1645089     -5.0194125      0.7804437     -3.3327171      0.1113736
#     0.0000000   -773.3687772   -773.3687772     -3.6963467      0.9960815     -2.3210855      0.5919767
rm(Navajo_4param_mcmc2)
param_mean
percentile95_low
percentile95_up
#this one does not exist yet:
# 5-parameter model
Navajo_5param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_12_16/ModelComparison_Navajo1vacc/Navajo_PPxSero_ggCaller_PopPUNK_5param_det_pmcmc_run2.rds")
Navajo_5param_mcmc2_probs <- coda::as.mcmc(cbind(Navajo_5param_mcmc2$probabilities, Navajo_5param_mcmc2$pars))
#coda::effectiveSize(Navajo_5param_mcmc2_probs)
#summary(coda::as.mcmc(Navajo_5param_mcmc2_probs))
Navajo_likelihood_5param <- median(Navajo_5param_mcmc2_probs[,"log_likelihood"])
#mean(Navajo_5param_mcmc2_probs[,"log_likelihood"])
param_mean <- apply(Navajo_5param_mcmc2_probs, 2, mean)
percentile95_low <- apply(Navajo_5param_mcmc2_probs,2,quantile,.025)
percentile95_up <- apply(Navajo_5param_mcmc2_probs,2,quantile,.975)
#     log_prior log_likelihood  log_posterior        sigma_f         prop_f        sigma_w              m              v
#     0.0000000   -775.7187082   -775.7187082     -4.5390431      0.8471789   -433.9222723     -2.8335532      0.2792345
#     0.0000000   -779.8975459   -779.8975459     -6.2594906      0.2446372   -972.2649520     -3.3022625      0.1162148
#     0.0000000   -773.3938106   -773.3938106     -3.6396775      0.9935490     -4.2750278     -2.1766673      0.6036182
rm(Navajo_5param_mcmc2)
param_mean
percentile95_low
percentile95_up
names(which(UK_underNFDS[names(match_UKMassUnfiltered_90)]==1))
intersect(c(1,2,3),c(2,3,4))
# create color vector
colours_UKMassUnfiltered_90 <- rep("black", length(match_UKMassUnfiltered_90))
names(colours_UKMassUnfiltered_90) <- names(match_UKMassUnfiltered_90)
colours_UKMassUnfiltered_90[names(which(UK_underNFDS[names(match_UKMassUnfiltered_90)]==1))] <- "blue"
colours_UKMassUnfiltered_90[match_MassUKUnfiltered_90[names(which(Mass_underNFDS[match_UKMassUnfiltered_90]==1))]] <- "red"
colours_UKMassUnfiltered_90[intersect(names(which(UK_underNFDS[names(match_UKMassUnfiltered_90)]==1)),match_MassUKUnfiltered_90[names(which(Mass_underNFDS[match_UKMassUnfiltered_90]==1)))] <- "purple"
colours_UKMassUnfiltered_90[intersect(names(which(UK_underNFDS[names(match_UKMassUnfiltered_90)]==1)),match_MassUKUnfiltered_90[names(which(Mass_underNFDS[match_UKMassUnfiltered_90]==1))])] <- "purple"
par(pty="s")
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_90)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_90[names(match_UKMassUnfiltered_90)]], xlab = "UK gene frequencies", ylab = "Mass gene frequencies",main="All Gene Frequencies, 90% sequence identity", col = colours_UKMassUnfiltered_90)
abline(0,1)
colours_UKMassUnfiltered_95 <- rep("black", length(match_UKMassUnfiltered_95))
names(colours_UKMassUnfiltered_95) <- names(match_UKMassUnfiltered_95)
colours_UKMassUnfiltered_95[names(which(UK_underNFDS[names(match_UKMassUnfiltered_95)]==1))] <- "blue"
colours_UKMassUnfiltered_95[match_MassUKUnfiltered_95[names(which(Mass_underNFDS[match_UKMassUnfiltered_95]==1))]] <- "red"
match_MassUKUnfiltered_95 <- recip_matching(MassInUKUnfiltered_dict, UKInMassUnfiltered_dict, MassUKUnfiltered_seq_id_vec, 0.95)
colours_UKMassUnfiltered_95[match_MassUKUnfiltered_95[names(which(Mass_underNFDS[match_UKMassUnfiltered_95]==1))]] <- "red"
colours_UKMassUnfiltered_95[intersect(names(which(UK_underNFDS[names(match_UKMassUnfiltered_95)]==1)),match_MassUKUnfiltered_95[names(which(Mass_underNFDS[match_UKMassUnfiltered_95]==1))])] <- "purple"
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_95)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_95[names(match_UKMassUnfiltered_95)]], xlab = "UK gene frequencies", ylab = "Mass gene frequencies",main="All Gene Frequencies, 95% sequence identity", col = colours_UKMassUnfiltered_95)
abline(0,1)
180858546 / 2713 * 2901
120 / 2713 * 2901
130 / 30 * 48
300/24
path_to_data <- "~/Documents/PhD_Project/Data/"
Nepal_meta_data <- read.csv(paste(path_to_data, "StrepPneumo_Nepal_gps_v2/GPS1_and_GPS2_Nepal_dataset_3Dec2024.csv",sep = ""))
Nepal_meta_data <- read.csv(paste(path_to_data, "StrepPneumo_Nepal_gps_v2/GPS1_and_GPS2_Nepal_dataset_3Dec2024.xlsx",sep = ""))
#Nepal_meta_data <- read.csv(paste(path_to_data, "StrepPneumo_Nepal/GPS_data/gps1+gps2_metadata_results_leonie.csv",sep = ""))
library(readxl)
Nepal_meta_data <- read_excel("~/Documents/PhD_Project/Data/StrepPneumo_Nepal_gps_v2/GPS1_and_GPS2_Nepal_dataset_3Dec2024.xlsx")
Nepal_time_points <- sort(unique(Nepal_meta_data$Year))
Nepal_time_points
View(Nepal_meta_data)
nrow(Nepal_meta_data)
excel_sheets("~/Documents/PhD_Project/Data/StrepPneumo_Nepal_gps_v2/GPS1_and_GPS2_Nepal_dataset_3Dec2024.xlsx")
sheets <- readxl::excel_sheets("~/Documents/PhD_Project/Data/StrepPneumo_Nepal_gps_v2/GPS1_and_GPS2_Nepal_dataset_3Dec2024.xlsx")
tibble <- lapply(sheets, function(x) readxl::read_excel(fname, sheet = x))
tibble <- lapply(sheets, function(x) readxl::read_excel("~/Documents/PhD_Project/Data/StrepPneumo_Nepal_gps_v2/GPS1_and_GPS2_Nepal_dataset_3Dec2024.xlsx", sheet = x))
sheets
readxl::read_excel("~/Documents/PhD_Project/Data/StrepPneumo_Nepal_gps_v2/GPS1_and_GPS2_Nepal_dataset_3Dec2024.xlsx", sheet = "GPS1")
Nepal_meta_data_gps1 <- readxl::read_excel("~/Documents/PhD_Project/Data/StrepPneumo_Nepal_gps_v2/GPS1_and_GPS2_Nepal_dataset_3Dec2024.xlsx", sheet = "GPS1")
Nepal_meta_data_gps1 <-  lapply(readxl::read_excel("~/Documents/PhD_Project/Data/StrepPneumo_Nepal_gps_v2/GPS1_and_GPS2_Nepal_dataset_3Dec2024.xlsx", sheet = "GPS1"), as.data.frame)
Nepal_meta_data_gps2 <- lapply(readxl::read_excel("~/Documents/PhD_Project/Data/StrepPneumo_Nepal_gps_v2/GPS1_and_GPS2_Nepal_dataset_3Dec2024.xlsx", sheet = "GPS2"), as.data.frame)
View(Nepal_meta_data_gps2)
Nepal_meta_data_gps2 <- lapply(readxl::read_excel("~/Documents/PhD_Project/Data/StrepPneumo_Nepal_gps_v2/GPS1_and_GPS2_Nepal_dataset_3Dec2024.xlsx", sheet = "GPS2"), as.data.frame)
View(Nepal_meta_data_gps1)
