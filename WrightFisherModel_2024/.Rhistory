)
)
""
par(mar=c(5,6,4,1)+.1)
plot((gene_cluster_counts_2001), gene_cluster_counts_2007, pch = 21, xlab = "Pre-vaccine COG frequency", ylab = "Post-vaccine COG frequency",cex.lab=2.5, cex.axis = 2.5, cex = 1.5, ylim = c(0,1), xlim = c(0,1),col = alpha("black", 0.4))
par(mar=c(5,6,4,1)+.1)
plot((gene_cluster_counts_2001), gene_cluster_counts_2007, pch = 21, xlab = "Pre-vaccine COG frequency", ylab = "Post-vaccine COG frequency",cex.lab=2.5, cex.axis = 2.5, cex = 1.5, ylim = c(0,1), xlim = c(0,1),col='#00000088')
plot((gene_cluster_counts_2001), gene_cluster_counts_2007, pch = 21, xlab = "Pre-vaccine COG frequency", ylab = "Post-vaccine COG frequency",cex.lab=2.5, cex.axis = 2.5, cex = 1.5, ylim = c(0,1), xlim = c(0,1),col='#00000080')
abline(a=0, b=1)
par(mar=c(5,6,4,1)+.1)
plot((gene_cluster_counts_2001), gene_cluster_counts_2007, pch = 21, xlab = "Pre-vaccine COG frequency", ylab = "Post-vaccine COG frequency",cex.lab=2.5, cex.axis = 2.5, cex = 1.5, ylim = c(0,1), xlim = c(0,1),col='#00000090')
abline(a=0, b=1)
par(mar=c(5,6,4,1)+.1)
plot((gene_cluster_counts_2001), gene_cluster_counts_2007, pch = 21, xlab = "Pre-vaccine COG frequency", ylab = "Post-vaccine COG frequency",cex.lab=2.5, cex.axis = 2.5, cex = 1.5, ylim = c(0,1), xlim = c(0,1),col='#000000')
# col='#00000090' for 90% opacity
abline(a=0, b=1)
# try using dfoptim with likelihood
ll_pois <- function(obs, model) {
exp_noise <- 1e6
if (is.na(obs)) {
# Creates vector of zeros in ll with same length, if no data
ll_obs <- numeric(length(model))
} else {
lambda <- model + rexp(n = length(model), rate = exp_noise)
ll_obs <- dpois(x = obs, lambda = lambda, log = TRUE)
}
ll_obs
}
combined_compare <- function(state, observed, pars = NULL) {
result <- 0
#data_size <- sum(mass_cluster_freq_1)
#model_size = 15000
data_size <- sum(observed)
model_size = sum(state)
for (i in 1:length(observed)){
result <- result + ll_pois(observed[i], state[i]/model_size * data_size)
}
result
}
seq_clusters <- readRDS("PopPUNK_clusters.rds")
sero_no = length(unique(seq_clusters$Serotype))
intermed_gene_presence_absence_consensus <- readRDS(file = "ggCPP_intermed_gene_presence_absence_consensus.rds")
intermed_gene_presence_absence_consensus_matrix <- sapply(intermed_gene_presence_absence_consensus[-1,-1],as.double)
model_start_pop <- readRDS(file = "PPsero_startpop.rds")
delta_ranking <- readRDS(file = "ggC_delta_ranking.rds")
mass_cluster_freq_1 <- readRDS(file = "PP_mass_cluster_freq_1.rds")
mass_cluster_freq_2 <- readRDS(file = "PP_mass_cluster_freq_2.rds")
mass_cluster_freq_3 <- readRDS(file = "PP_mass_cluster_freq_3.rds")
mass_VT <- readRDS(file = "SeroVT.rds")
mass_clusters <- length(unique(seq_clusters$Cluster))
avg_cluster_freq <- readRDS(file = "PPsero_mig.rds")
dt <- 1/36
vacc_time <- 0
output_filename <- "PPxSero_ggCaller_PopPUNK"
## Mass PPxSero
Mass_PPxSero <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_08_14/Mass_PPxSero/PPxSero_ggCaller_PopPUNK_det_pmcmc_run2.rds")
rm(UK_PPxSero2vacc)
## Mass PPxSero
Mass_PPxSero <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_08_14/Mass_PPxSero/PPxSero_ggCaller_PopPUNK_det_pmcmc_run2.rds")
Mass_PPxSero_mcmc <- coda::as.mcmc(cbind(Mass_PPxSero$probabilities, Mass_PPxSero$pars))
coda::effectiveSize(Mass_PPxSero_mcmc)
summary(coda::as.mcmc(Mass_PPxSero_mcmc))
library(bayestestR)
map_estimate(Mass_PPxSero$pars[, 2])
map_estimate(Mass_PPxSero$pars)
head(Mass_PPxSero_mcmc)
head(Mass_PPxSero)
dim(Mass_PPxSero_mcmc)
sample(1:nrow(Mass_PPxSero_mcmc),1000)
# trying to add confidence intervals to lollipop plot
WF_PPxSero <- odin.dust::odin_dust("NFDS_Model_PPxSero.R")
PPxSero_params <- list(dt = 1/12, species_no =mass_clusters,  gene_no = nrow(intermed_gene_presence_absence_consensus)-1, Pop_ini = ( model_start_pop), Pop_eq = Pop_eq <- rowSums(model_start_pop), capacity = sum( model_start_pop), Genotypes = intermed_gene_presence_absence_consensus_matrix, sigma_f = -1.10, prop_f = 0.25, sigma_w =-1000 , delta = delta_ranking, m = -2.28, migVec =  as.matrix(avg_cluster_freq), v = 0.36 , vaccTypes = mass_VT, vacc_time = 0, sero_no = sero_no)
WF_PPxSero_model <- WF_PPxSero$new(pars = PPxSero_params,
time = 0,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
simMeanggCPP1_UK <- rowMeans(WF_PPxSero_model$run(0)[-1,])[1:mass_clusters]
simMeanggCPP1_Mass <- rowMeans(WF_PPxSero_model$run(0)[-1,])[1:mass_clusters]
simMeanggCPP2_Mass <- rowMeans(WF_PPxSero_model$run(36)[-1,])[1:mass_clusters]
simMeanggCPP3_Mass <- rowMeans(WF_PPxSero_model$run(72)[-1,])[1:mass_clusters]
PP_serotype_comp <- rep(0,PP_mass_clusters)
for (i in 1:PP_mass_clusters) {
PP_serotype_comp[i] <- paste(unique(PopPUNK_clusters$Serotype[which(PopPUNK_clusters$Cluster==i)]), collapse = ", ")
}
lollipop_cluster_freqs_VTandNVT_labelSero(year = "Start", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_3/sum(mass_cluster_freq_3), model_name_1 ="Model", model1 = simMeanggCPP3_Mass/sum(simMeanggCPP3_Mass), VT_vec = rep(0,59), SeroLabel = PP_serotype_comp)
source("CreateLollipopPlot.R")
lollipop_cluster_freqs_VTandNVT_labelSero(year = "2007", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_3/sum(mass_cluster_freq_3), model_name_1 ="Model", model1 = simMeanggCPP3_Mass/sum(simMeanggCPP3_Mass), VT_vec = rep(0,59), SeroLabel = PP_serotype_comp)
length(mass_cluster_freq_3)
length(simMeanggCPP3_Mass)
lollipop_cluster_freqs_VTandNVT_labelSero(year = "2007", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_3/sum(mass_cluster_freq_3), model_name_1 ="Model", model1 = simMeanggCPP3_Mass/sum(simMeanggCPP3_Mass), VT_vec = rep(0,55), SeroLabel = PP_serotype_comp)
lollipop_cluster_freqs_VTandNVT_labelSero(year = "2007", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_3/sum(mass_cluster_freq_3), model_name_1 ="Model", model1 = simMeanggCPP3_Mass/sum(simMeanggCPP3_Mass), VT_vec = PP_mass_VT, SeroLabel = PP_serotype_comp)
WF_PPxSero_model <- WF_PPxSero$new(pars = PPxSero_params,
time = 0,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
simMeanggCPP1_Mass <- rowMeans(WF_PPxSero_model$run(0)[-1,])[1:mass_clusters]
simMeanggCPP2_Mass <- rowMeans(WF_PPxSero_model$run(36)[-1,])[1:mass_clusters]
simMeanggCPP3_Mass <- rowMeans(WF_PPxSero_model$run(72)[-1,])[1:mass_clusters]
PP_serotype_comp <- rep(0,PP_mass_clusters)
for (i in 1:PP_mass_clusters) {
PP_serotype_comp[i] <- paste(unique(PopPUNK_clusters$Serotype[which(PopPUNK_clusters$Cluster==i)]), collapse = ", ")
}
lollipop_cluster_freqs_VTandNVT_labelSero(year = "2007", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_3/sum(mass_cluster_freq_3), model_name_1 ="Model", model1 = simMeanggCPP3_Mass/sum(simMeanggCPP3_Mass), VT_vec = PP_mass_VT, SeroLabel = PP_serotype_comp)
## Mass PPxSero
Mass_PPxSero <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_08_14/Mass_PPxSero/PPxSero_ggCaller_PopPUNK_det_pmcmc_run2.rds")
Mass_PPxSero_mcmc <- coda::as.mcmc(cbind(Mass_PPxSero$probabilities, Mass_PPxSero$pars))
coda::effectiveSize(Mass_PPxSero_mcmc)
summary(coda::as.mcmc(Mass_PPxSero_mcmc))
# trying to add confidence intervals to lollipop plot
WF_PPxSero <- odin.dust::odin_dust("NFDS_Model_PPxSero.R")
seq_clusters <- readRDS("PopPUNK_clusters.rds")
sero_no = length(unique(seq_clusters$Serotype))
intermed_gene_presence_absence_consensus <- readRDS(file = "ggCPP_intermed_gene_presence_absence_consensus.rds")
intermed_gene_presence_absence_consensus_matrix <- sapply(intermed_gene_presence_absence_consensus[-1,-1],as.double)
model_start_pop <- readRDS(file = "PPsero_startpop.rds")
delta_ranking <- readRDS(file = "ggC_delta_ranking.rds")
mass_cluster_freq_1 <- readRDS(file = "PP_mass_cluster_freq_1.rds")
mass_cluster_freq_2 <- readRDS(file = "PP_mass_cluster_freq_2.rds")
mass_cluster_freq_3 <- readRDS(file = "PP_mass_cluster_freq_3.rds")
mass_VT <- readRDS(file = "SeroVT.rds")
mass_clusters <- length(unique(seq_clusters$Cluster))
avg_cluster_freq <- readRDS(file = "PPsero_mig.rds")
dt <- 1/36
vacc_time <- 0
output_filename <- "PPxSero_ggCaller_PopPUNK"
PPxSero_params <- list(dt = 1/12, species_no =mass_clusters,  gene_no = nrow(intermed_gene_presence_absence_consensus)-1, Pop_ini = ( model_start_pop), Pop_eq = Pop_eq <- rowSums(model_start_pop), capacity = sum( model_start_pop), Genotypes = intermed_gene_presence_absence_consensus_matrix, sigma_f = -1.10, prop_f = 0.25, sigma_w =-1000 , delta = delta_ranking, m = -2.28, migVec =  as.matrix(avg_cluster_freq), v = 0.36 , vaccTypes = mass_VT, vacc_time = 0, sero_no = sero_no)
WF_PPxSero_model <- WF_PPxSero$new(pars = PPxSero_params,
time = 0,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
PPxSero_params <- list(dt = 1/36, species_no =mass_clusters,  gene_no = nrow(intermed_gene_presence_absence_consensus)-1, Pop_ini = ( model_start_pop), Pop_eq = Pop_eq <- rowSums(model_start_pop), capacity = sum( model_start_pop), Genotypes = intermed_gene_presence_absence_consensus_matrix, sigma_f = -1.10, prop_f = 0.25, sigma_w =-1000 , delta = delta_ranking, m = -2.28, migVec =  as.matrix(avg_cluster_freq), v = 0.36 , vaccTypes = mass_VT, vacc_time = 0, sero_no = sero_no)
WF_PPxSero_model <- WF_PPxSero$new(pars = PPxSero_params,
time = 0,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
simMeanggCPP1_Mass <- rowMeans(WF_PPxSero_model$run(0)[-1,])[1:mass_clusters]
simMeanggCPP2_Mass <- rowMeans(WF_PPxSero_model$run(36)[-1,])[1:mass_clusters]
simMeanggCPP3_Mass <- rowMeans(WF_PPxSero_model$run(72)[-1,])[1:mass_clusters]
PP_serotype_comp <- rep(0,PP_mass_clusters)
for (i in 1:PP_mass_clusters) {
PP_serotype_comp[i] <- paste(unique(PopPUNK_clusters$Serotype[which(PopPUNK_clusters$Cluster==i)]), collapse = ", ")
}
lollipop_cluster_freqs_VTandNVT_labelSero(year = "2007", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_3/sum(mass_cluster_freq_3), model_name_1 ="Model", model1 = simMeanggCPP3_Mass/sum(simMeanggCPP3_Mass), VT_vec = PP_mass_VT, SeroLabel = PP_serotype_comp)
mass_cluster_freq_3/sum(mass_cluster_freq_3)
map_estimate(Mass_PPxSero$pars)
simMeanggCPP3_Mass
simMeanggCPP3_Mass/sum(simMeanggCPP3_Mass)
sero_no
PopPUNK_clusters <- readRDS("PopPUNK_clusters.rds")
ggCPP_intermed_gene_presence_absence_consensus <- readRDS(file = "ggCPP_intermed_gene_presence_absence_consensus.rds")
ggCPP_intermed_gene_presence_absence_consensus_matrix <- sapply(ggCPP_intermed_gene_presence_absence_consensus[-1,-1],as.double)
PP_model_start_pop <- readRDS(file = "PP_model_start_pop.rds")
ggC_delta_ranking <- readRDS(file = "ggC_delta_ranking.rds")
PP_mass_cluster_freq_1 <- readRDS(file = "PP_mass_cluster_freq_1.rds")
PP_mass_cluster_freq_2 <- readRDS(file = "PP_mass_cluster_freq_2.rds")
PP_mass_cluster_freq_3 <- readRDS(file = "PP_mass_cluster_freq_3.rds")
PP_mass_VT <- readRDS(file = "PP_mass_VT.rds")
PP_mass_clusters <- length(unique(PopPUNK_clusters$Cluster))
PP_avg_cluster_freq <- rep(1/PP_mass_clusters, PP_mass_clusters)
### ggCaller PopPUNK
# map
params_ggCPP <- list(dt = 1/36, species_no = PP_mass_clusters,  gene_no = nrow(ggCPP_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(PP_model_start_pop), Pop_eq = as.double(PP_model_start_pop), capacity = sum(PP_model_start_pop), Genotypes = ggCPP_intermed_gene_presence_absence_consensus_matrix, sigma_f = -2.11, sigma_w = -1000, prop_f = 0.25, delta = ggC_delta_ranking, m = -4.41, migVec = PP_avg_cluster_freq, vaccTypes = PP_mass_VT, v = 0.11, vacc_time = 0)
#corrected
params_ggCPP <- list(dt = 1/36, species_no = PP_mass_clusters,  gene_no = nrow(ggCPP_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(PP_model_start_pop), Pop_eq = as.double(PP_model_start_pop), capacity = sum(PP_model_start_pop), Genotypes = ggCPP_intermed_gene_presence_absence_consensus_matrix, sigma_f = -2.0958228, sigma_w = -1000, prop_f = 0.3107495, delta = ggC_delta_ranking, m = -4.1434129, migVec = PP_avg_cluster_freq, vaccTypes = PP_mass_VT, v = 0.1366157, vacc_time = 0)
WF_nG_h_vP <- odin.dust::odin_dust("NFDS_Model.R")
WFmodel_ggCPP <- WF_nG_h_vP$new(pars = params_ggCPP,
time = 0,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
simMeanggCPP2 <- rowMeans(WFmodel_ggCPP$run(36)[-1,])
simMeanggCPP3 <- rowMeans(WFmodel_ggCPP$run(72)[-1,])
lollipop_cluster_freqs_VTandNVT_labelSero(year = "2007", plot_title = "PopPUNK and ggCaller", data1 = PP_mass_cluster_freq_3/sum(PP_mass_cluster_freq_3), model_name_1 ="Model", model1 = simMeanggCPP3/sum(simMeanggCPP3), VT_vec = PP_mass_VT, SeroLabel = PP_serotype_comp)
# trying to add confidence intervals to lollipop plot
WF_PPxSero <- odin.dust::odin_dust("NFDS_Model_PPxSero.R")
seq_clusters <- readRDS("PopPUNK_clusters.rds")
sero_no = length(unique(seq_clusters$Serotype))
intermed_gene_presence_absence_consensus <- readRDS(file = "ggCPP_intermed_gene_presence_absence_consensus.rds")
intermed_gene_presence_absence_consensus_matrix <- sapply(intermed_gene_presence_absence_consensus[-1,-1],as.double)
model_start_pop <- readRDS(file = "PPsero_startpop.rds")
delta_ranking <- readRDS(file = "ggC_delta_ranking.rds")
mass_cluster_freq_1 <- readRDS(file = "PP_mass_cluster_freq_1.rds")
mass_cluster_freq_2 <- readRDS(file = "PP_mass_cluster_freq_2.rds")
mass_cluster_freq_3 <- readRDS(file = "PP_mass_cluster_freq_3.rds")
mass_VT <- readRDS(file = "SeroVT.rds")
mass_clusters <- length(unique(seq_clusters$Cluster))
avg_cluster_freq <- readRDS(file = "PPsero_mig.rds")
dt <- 1/36
vacc_time <- 0
output_filename <- "PPxSero_ggCaller_PopPUNK"
PPxSero_params <- list(dt = 1/36, species_no =mass_clusters,  gene_no = nrow(intermed_gene_presence_absence_consensus)-1, Pop_ini = ( model_start_pop), Pop_eq = Pop_eq <- rowSums(model_start_pop), capacity = sum( model_start_pop), Genotypes = intermed_gene_presence_absence_consensus_matrix, sigma_f = -1.10, prop_f = 0.25, sigma_w =-1000 , delta = delta_ranking, m = -2.28, migVec =  as.matrix(avg_cluster_freq), v = 0.36 , vaccTypes = mass_VT, vacc_time = 0, sero_no = sero_no)
WF_PPxSero_model <- WF_PPxSero$new(pars = PPxSero_params,
time = 0,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
WF_PPxSero_model$run(0)
dim(WF_PPxSero_model$run(0))
WF_PPxSero_model <- WF_PPxSero$new(pars = PPxSero_params,
time = 0,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
simMeanggCPP1_Mass <- rowMeans(WF_PPxSero_model$run(0)[-1,])
simMeanggCPP1_Mass_collapsed <- rep(0, mass_clusters)
for (i in 1:sero_no) {
simMeanggCPP1_Mass_collapsed <- simMeanggCPP1_Mass_collapsed + simMeanggCPP1_Mass[(1:mass_clusters)*i]
}
lollipop_cluster_freqs_VTandNVT_labelSero(year = "2007", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_1/sum(mass_cluster_freq_1), model_name_1 ="Model", model1 = simMeanggCPP1_Mass_collapsed/sum(simMeanggCPP1_Mass_collapsed), VT_vec = PP_mass_VT, SeroLabel = PP_serotype_comp)
sero_no * mass_cluster
sero_no * mass_clusters
ndims(simMeanggCPP1_Mass)
dim(simMeanggCPP1_Mass)
lollipop_cluster_freqs_VTandNVT_labelSero(year = "2007", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_1/sum(mass_cluster_freq_1), model_name_1 ="Model", model1 = simMeanggCPP1_Mass[1:mass_clusters]/sum(simMeanggCPP1_Mass[1:mass_clusters]), VT_vec = PP_mass_VT, SeroLabel = PP_serotype_comp)
model_start_pop
colSums(model_start_pop)
colSums(model_start_pop)/sum(colSums(model_start_pop))
mass_cluster_freq_1
rowSums(model_start_pop)/sum(rowSums(model_start_pop))
lollipop_cluster_freqs_VTandNVT_labelSero(year = "2007", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_1/sum(mass_cluster_freq_1), model_name_1 ="Model", model1 = rowSums(model_start_pop)/sum(rowSums(model_start_pop)), VT_vec = PP_mass_VT, SeroLabel = PP_serotype_comp)
# this lead to a start population that is way too evenly distributed across the different clusters
# instead, I could maybe use the existing PP_model_start_pop and distribute it to the different serotypes?
PPsero_startpop2 <-  matrix(0, nrow = length(unique(PopPUNK_clusters$Cluster)), ncol = length(unique(PopPUNK_clusters$Serotype)))
for (i in 1:length(unique(PopPUNK_clusters$Cluster))) {
PPsero_startpop2[i,] <- round((PPxSero_matrix[i,] * PP_model_start_pop[i])/sum(PPxSero_matrix[i,]))
}
PPxSero_matrix <- matrix(0, nrow = length(unique(PopPUNK_clusters$Cluster)), ncol = length(unique(PopPUNK_clusters$Serotype)))
SerotypeToIndex_dict <- 1:length(unique(PopPUNK_clusters$Serotype))
names(SerotypeToIndex_dict) <- sort(unique(PopPUNK_clusters$Serotype))
IndexToSerotype_dict <- sort(unique(PopPUNK_clusters$Serotype))
names(IndexToSerotype_dict) <- 1:length(unique(PopPUNK_clusters$Serotype))
PPclustToIndex_dict <- 1:length(unique(PopPUNK_clusters$Cluster))
names(PPclustToIndex_dict) <- sort(unique(PopPUNK_clusters$Cluster))
for (i in 1:nrow(PopPUNK_clusters)) {
PPxSero_matrix[PPclustToIndex_dict[as.character(PopPUNK_clusters$Cluster[i])],SerotypeToIndex_dict[PopPUNK_clusters$Serotype[i]]] <- 1
}
# matrix shows information whether PP and serotype co-occur in the dataset (1=TRUE)
# this can be used as the migration matrix:
PPxSero_matrix_prob <- PPxSero_matrix / sum(PPxSero_matrix)
PPxSero_matrix_prob <- matrix(sapply(PPxSero_matrix_prob,as.double), nrow = nrow(PPxSero_matrix), ncol = ncol(PPxSero_matrix))
PPxSero_matrix_prob2 <-  matrix(0, nrow = length(unique(PopPUNK_clusters$Cluster)), ncol = length(unique(PopPUNK_clusters$Serotype)))
for (i in 1:length(unique(PopPUNK_clusters$Cluster))) {
PPxSero_matrix_prob2[i,] <- ((PPxSero_matrix[i,] * PP_avg_cluster_freq[i])/sum(PPxSero_matrix[i,]))
}
# start population:
PPsero_startpop <- matrix(0, nrow = length(unique(PopPUNK_clusters$Cluster)), ncol = length(unique(PopPUNK_clusters$Serotype)))
for (i in which(PopPUNK_clusters$SeqYear=="2001")) {
PPsero_startpop[PPclustToIndex_dict[PopPUNK_clusters$Cluster[i]],SerotypeToIndex_dict[PopPUNK_clusters$Serotype[i]]] <- PPsero_startpop[PPclustToIndex_dict[PopPUNK_clusters$Cluster[i]],SerotypeToIndex_dict[PopPUNK_clusters$Serotype[i]]] + 1
}
PP_expand_factor <- 15000 / sum(PPsero_startpop)
exp_noise <- 10
PPsero_startpop_corr <- matrix(sapply((PPsero_startpop + matrix(rexp(n = ncol(PPsero_startpop) * nrow(PPsero_startpop), rate = exp_noise), nrow= nrow(PPsero_startpop), ncol = ncol(PPsero_startpop))) * PP_expand_factor, rpois, n=1), nrow= nrow(PPsero_startpop), ncol = ncol(PPsero_startpop))
PPsero_startpop_corr <- matrix(sapply(PPsero_startpop_corr,as.double), nrow= nrow(PPsero_startpop), ncol = ncol(PPsero_startpop))
# this lead to a start population that is way too evenly distributed across the different clusters
# instead, I could maybe use the existing PP_model_start_pop and distribute it to the different serotypes?
PPsero_startpop2 <-  matrix(0, nrow = length(unique(PopPUNK_clusters$Cluster)), ncol = length(unique(PopPUNK_clusters$Serotype)))
for (i in 1:length(unique(PopPUNK_clusters$Cluster))) {
PPsero_startpop2[i,] <- round((PPxSero_matrix[i,] * PP_model_start_pop[i])/sum(PPxSero_matrix[i,]))
}
rowSums(PPsero_startpop2)/sum(PPsero_startpop2)
rowSums(model_start_pop)/sum(rowSums(model_start_pop))
rowSums(PPsero_startpop)/sum(rowSums(PPsero_startpop))
saveRDS(PPsero_startpop2, "PPsero_startpop.rds")
seq_clusters <- readRDS("PopPUNK_clusters.rds")
sero_no = length(unique(seq_clusters$Serotype))
intermed_gene_presence_absence_consensus <- readRDS(file = "ggCPP_intermed_gene_presence_absence_consensus.rds")
intermed_gene_presence_absence_consensus_matrix <- sapply(intermed_gene_presence_absence_consensus[-1,-1],as.double)
model_start_pop <- readRDS(file = "PPsero_startpop.rds")
delta_ranking <- readRDS(file = "ggC_delta_ranking.rds")
mass_cluster_freq_1 <- readRDS(file = "PP_mass_cluster_freq_1.rds")
mass_cluster_freq_2 <- readRDS(file = "PP_mass_cluster_freq_2.rds")
mass_cluster_freq_3 <- readRDS(file = "PP_mass_cluster_freq_3.rds")
mass_VT <- readRDS(file = "SeroVT.rds")
mass_clusters <- length(unique(seq_clusters$Cluster))
avg_cluster_freq <- readRDS(file = "PPsero_mig.rds")
dt <- 1/36
vacc_time <- 0
output_filename <- "PPxSero_ggCaller_PopPUNK"
PPxSero_params <- list(dt = 1/36, species_no =mass_clusters,  gene_no = nrow(intermed_gene_presence_absence_consensus)-1, Pop_ini = ( model_start_pop), Pop_eq = Pop_eq <- rowSums(model_start_pop), capacity = sum( model_start_pop), Genotypes = intermed_gene_presence_absence_consensus_matrix, sigma_f = -1.10, prop_f = 0.25, sigma_w =-1000 , delta = delta_ranking, m = -2.28, migVec =  as.matrix(avg_cluster_freq), v = 0.36 , vaccTypes = mass_VT, vacc_time = 0, sero_no = sero_no)
WF_PPxSero_model <- WF_PPxSero$new(pars = PPxSero_params,
time = 0,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
simMeanggCPP1_Mass <- rowMeans(WF_PPxSero_model$run(0)[-1,])
simMeanggCPP2_Mass <- rowMeans(WF_PPxSero_model$run(36)[-1,])
simMeanggCPP3_Mass <- rowMeans(WF_PPxSero_model$run(72)[-1,])
lollipop_cluster_freqs_VTandNVT_labelSero(year = "2007", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_1/sum(mass_cluster_freq_1), model_name_1 ="Model", model1 = rowSums(simMeanggCPP1_Mass[1:mass_clusters])/sum(rowSums(simMeanggCPP1_Mass[1:mass_clusters])), VT_vec = PP_mass_VT, SeroLabel = PP_serotype_comp)
lollipop_cluster_freqs_VTandNVT_labelSero(year = "2007", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_1/sum(mass_cluster_freq_1), model_name_1 ="Model", model1 = (simMeanggCPP1_Mass[1:mass_clusters])/sum((simMeanggCPP1_Mass[1:mass_clusters])), VT_vec = PP_mass_VT, SeroLabel = PP_serotype_comp)
lollipop_cluster_freqs_VTandNVT_labelSero(year = "2007", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_3/sum(mass_cluster_freq_3), model_name_1 ="Model", model1 = (simMeanggCPP3_Mass[1:mass_clusters])/sum((simMeanggCPP3_Mass[1:mass_clusters])), VT_vec = PP_mass_VT, SeroLabel = PP_serotype_comp)
sampled_param_id <- sample(1:nrow(Mass_PPxSero_mcmc),1000)
Mass_PPxSero_mcmc[1,]
Mass_PPxSero_mcmc[1,4]
T_9 <- StudentsT(df = 9)
t.test(Mass_PPxSero_mcmc[1:80000,4], conf.level = 0.95)
summary(coda::as.mcmc(Mass_PPxSero_mcmc))
vec1 <- c(1,2,3)
vec2 <- c(2,3,4)
array(c(vec1, vec2))
array(c(vec1, vec2), dim(3,2))
array(c(vec1, vec2), dim=c(3,2))
WF_PPxSero_model$run(0)[-1,]
WF_PPxSero_model$run(72)[-1,]
simMeanggCPP3_Mass_1 <- WF_PPxSero_model$run(72)[-1,1][1:mass_clusters]
simMeanggCPP3_Mass_1
simMeanggCPP3_Mass_2 <- WF_PPxSero_model$run(72)[-1,2][1:mass_clusters]
lollipop_cluster_freqs_VTandNVT_labelSero(year = "2007", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_3/sum(mass_cluster_freq_3), model_name_1 ="Model", model1 = (simMeanggCPP3_Mass_1)/sum((simMeanggCPP3_Mass_1)), VT_vec = PP_mass_VT, SeroLabel = PP_serotype_comp)
lollipop_cluster_freqs_VTandNVT_labelSero(year = "2007", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_3/sum(mass_cluster_freq_3), model_name_1 ="Model", model1 = (simMeanggCPP3_Mass_2)/sum((simMeanggCPP3_Mass_2)), VT_vec = PP_mass_VT, SeroLabel = PP_serotype_comp)
for (i in seq(sampled_param_id)) {
print(i)
}
sampled_param_id
for (i in (sampled_param_id)) {
print(i)
}
# create empty array for storing all of the simulation results
empty_vec <- rep(0,mass_clusters)
sim_results_Mass <- array(c(empty_vec, 1000), dim = c(mass_clusters, 1000))
array_test <- array(c(vec1, vec2), dim = c(3,1))
array_test <- array(c(vec1, vec2), dim = c(3,1))
array_test
array_test <- array(c(vec1, vec2), dim = c(3,2))
array_test
array_test[,1]
# create empty array for storing all of the simulation results
empty_vec <- rep(0,mass_clusters)
sim_results_Mass <- array(c(empty_vec, 1000), dim = c(mass_clusters, 1000))
for (i in seq(sampled_param_id)) {
PPxSero_params <- list(dt = 1/36, species_no =mass_clusters,  gene_no = nrow(intermed_gene_presence_absence_consensus)-1, Pop_ini = ( model_start_pop), Pop_eq = Pop_eq <- rowSums(model_start_pop), capacity = sum( model_start_pop), Genotypes = intermed_gene_presence_absence_consensus_matrix, sigma_f = Mass_PPxSero_mcmc[sampled_param_id[i],4], prop_f = Mass_PPxSero_mcmc[sampled_param_id[i],5], sigma_w =-1000 , delta = delta_ranking, m = Mass_PPxSero_mcmc[sampled_param_id[i],6], migVec =  as.matrix(avg_cluster_freq), v = Mass_PPxSero_mcmc[sampled_param_id[i],7] , vaccTypes = mass_VT, vacc_time = 0, sero_no = sero_no)
WF_PPxSero_model <- WF_PPxSero$new(pars = PPxSero_params,
time = 0,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
simMeanggCPP3_Mass_1 <- WF_PPxSero_model$run(72)[-1,1][1:mass_clusters]
sim_results_Mass[,i] <- simMeanggCPP3_Mass_1
}
sim_results_Mass[1,]
# create empty array for storing all of the simulation results
empty_vec <- rep(0,mass_clusters)
sim_results_Mass <- array(c(empty_vec, 20), dim = c(mass_clusters, 20))
for (i in 1:20) {
PPxSero_params <- list(dt = 1/36, species_no =mass_clusters,  gene_no = nrow(intermed_gene_presence_absence_consensus)-1, Pop_ini = ( model_start_pop), Pop_eq = Pop_eq <- rowSums(model_start_pop), capacity = sum( model_start_pop), Genotypes = intermed_gene_presence_absence_consensus_matrix, sigma_f = Mass_PPxSero_mcmc[sampled_param_id[i],4], prop_f = Mass_PPxSero_mcmc[sampled_param_id[i],5], sigma_w =-1000 , delta = delta_ranking, m = Mass_PPxSero_mcmc[sampled_param_id[i],6], migVec =  as.matrix(avg_cluster_freq), v = Mass_PPxSero_mcmc[sampled_param_id[i],7] , vaccTypes = mass_VT, vacc_time = 0, sero_no = sero_no)
WF_PPxSero_model <- WF_PPxSero$new(pars = PPxSero_params,
time = 0,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
simMeanggCPP3_Mass_1 <- WF_PPxSero_model$run(72)[-1,1][1:mass_clusters]
sim_results_Mass[,i] <- simMeanggCPP3_Mass_1
}
sim_results_Mass
t.test(sim_results_Mass[1,])
colSums(sim_results_Mass)
divide_by_sum <- function(x){
x <- x / sum(x)
x
}
sim_results_Mass_rel <- apply(sim_results_Mass, 2, divide_by_sum)
sim_results_Mass_rel[1,]
sim_results_Mass[1,]/15603
sim_results_Mass_rel[,1]
sim_results_Mass[,1]/15603
t.test(sim_results_Mass_rel[1,])
ttest_1 <- t.test(sim_results_Mass_rel[1,])
ttest_1$conf.int
ttest_1$conf.int[1]
ttest_1$conf.int[2]
# collect confidence intervals for all clusters
conf_intervals_Mass <- array(c(empty_vec,empty_vec),dim = c(mass_clusters, 2))
for (i in 1:mass_clusters) {
ttest <- t.test(sim_results_Mass_rel[i,])
conf_intervals_Mass[i,] <- c(ttest$conf.int[1], ttest$conf.int[2])
}
conf_intervals_Mass
lollipop_cluster_freqs_2x2_VTandNVT_labelSero(year = "2007", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_3/sum(mass_cluster_freq_3), model_name_1 ="lower_bound", model1 = conf_intervals_Mass[,1], model_name_2 ="upper_bound", model2 = conf_intervals_Mass[,2], VT_vec = PP_mass_VT, SeroLabel = PP_serotype_comp)
# collect confidence intervals for all clusters
conf_intervals_Mass <- array(c(empty_vec,empty_vec),dim = c(mass_clusters, 2))
for (i in 1:mass_clusters) {
ttest <- t.test(sim_results_Mass_rel[i,], conf.level = 0.5)
conf_intervals_Mass[i,] <- c(ttest$conf.int[1], ttest$conf.int[2])
}
lollipop_cluster_freqs_2x2_VTandNVT_labelSero(year = "2007", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_3/sum(mass_cluster_freq_3), model_name_1 ="lower_bound", model1 = conf_intervals_Mass[,1], model_name_2 ="upper_bound", model2 = conf_intervals_Mass[,2], VT_vec = PP_mass_VT, SeroLabel = PP_serotype_comp)
# collect confidence intervals for all clusters
conf_intervals_Mass <- array(c(empty_vec,empty_vec),dim = c(mass_clusters, 2))
for (i in 1:mass_clusters) {
ttest <- t.test(sim_results_Mass_rel[i,], conf.level = 0.25)
conf_intervals_Mass[i,] <- c(ttest$conf.int[1], ttest$conf.int[2])
}
lollipop_cluster_freqs_2x2_VTandNVT_labelSero(year = "2007", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_3/sum(mass_cluster_freq_3), model_name_1 ="lower_bound", model1 = conf_intervals_Mass[,1], model_name_2 ="upper_bound", model2 = conf_intervals_Mass[,2], VT_vec = PP_mass_VT, SeroLabel = PP_serotype_comp)
conf_intervals_Mass
for (i in 1:mass_clusters) {
ttest <- t.test(sim_results_Mass_rel[i,])
conf_intervals_Mass[i,] <- c(ttest$conf.int[1], ttest$conf.int[2])
}
# collect confidence intervals for all clusters
conf_intervals_Mass <- array(c(empty_vec,empty_vec),dim = c(mass_clusters, 2))
for (i in 1:mass_clusters) {
ttest <- t.test(sim_results_Mass_rel[i,])
conf_intervals_Mass[i,] <- c(ttest$conf.int[1], ttest$conf.int[2])
}
lollipop_cluster_freqs_2x2_VTandNVT_labelSero(year = "2007", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_3/sum(mass_cluster_freq_3), model_name_1 ="lower_bound", model1 = conf_intervals_Mass[,1], model_name_2 ="upper_bound", model2 = conf_intervals_Mass[,2], VT_vec = PP_mass_VT, SeroLabel = PP_serotype_comp)
for (i in 1:mass_clusters) {
ttest <- t.test(sim_results_Mass_rel[i,], conf.level = 0.99)
conf_intervals_Mass[i,] <- c(ttest$conf.int[1], ttest$conf.int[2])
}
lollipop_cluster_freqs_2x2_VTandNVT_labelSero(year = "2007", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_3/sum(mass_cluster_freq_3), model_name_1 ="lower_bound", model1 = conf_intervals_Mass[,1], model_name_2 ="upper_bound", model2 = conf_intervals_Mass[,2], VT_vec = PP_mass_VT, SeroLabel = PP_serotype_comp)
# collect confidence intervals for all clusters
conf_intervals_Mass <- array(c(empty_vec,empty_vec),dim = c(mass_clusters, 2))
for (i in 1:mass_clusters) {
ttest <- t.test(sim_results_Mass_rel[i,])
conf_intervals_Mass[i,] <- c(ttest$conf.int[1], ttest$conf.int[2])
}
lollipop_cluster_freqs_2x2_VTandNVT_labelSero(year = "2007", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_3/sum(mass_cluster_freq_3), model_name_1 ="lower_bound", model1 = conf_intervals_Mass[,1], model_name_2 ="upper_bound", model2 = conf_intervals_Mass[,2], VT_vec = PP_mass_VT, SeroLabel = PP_serotype_comp)
PPxSero_params <- list(dt = 1/36, species_no =mass_clusters,  gene_no = nrow(intermed_gene_presence_absence_consensus)-1, Pop_ini = ( model_start_pop), Pop_eq = Pop_eq <- rowSums(model_start_pop), capacity = sum( model_start_pop), Genotypes = intermed_gene_presence_absence_consensus_matrix, sigma_f = Mass_PPxSero_mcmc[sampled_param_id[i],4], prop_f = Mass_PPxSero_mcmc[sampled_param_id[i],5], sigma_w =-1000 , delta = delta_ranking, m = Mass_PPxSero_mcmc[sampled_param_id[i],6], migVec =  as.matrix(avg_cluster_freq), v = Mass_PPxSero_mcmc[sampled_param_id[i],7] , vaccTypes = mass_VT, vacc_time = 0, sero_no = sero_no)
WF_PPxSero_model <- WF_PPxSero$new(pars = PPxSero_params,
time = 0,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
simMeanggCPP3_Mass_1 <- WF_PPxSero_model$run(72)[-1,1][1:mass_clusters]
WF_PPxSero_model <- WF_PPxSero$new(pars = PPxSero_params,
time = 0,
n_particles = 1L,
n_threads = 4L,
seed = 1L)
simMeanggCPP3_Mass_1 <- WF_PPxSero_model$run(72)[-1,1][1:mass_clusters]
WF_PPxSero_model$run(72)
# create empty array for storing all of the simulation results
empty_vec <- rep(0,mass_clusters)
sim_results_Mass <- array(c(empty_vec, 100), dim = c(mass_clusters, 100))
for (i in 1:100) {
PPxSero_params <- list(dt = 1/36, species_no =mass_clusters,  gene_no = nrow(intermed_gene_presence_absence_consensus)-1, Pop_ini = ( model_start_pop), Pop_eq = Pop_eq <- rowSums(model_start_pop), capacity = sum( model_start_pop), Genotypes = intermed_gene_presence_absence_consensus_matrix, sigma_f = Mass_PPxSero_mcmc[sampled_param_id[i],4], prop_f = Mass_PPxSero_mcmc[sampled_param_id[i],5], sigma_w =-1000 , delta = delta_ranking, m = Mass_PPxSero_mcmc[sampled_param_id[i],6], migVec =  as.matrix(avg_cluster_freq), v = Mass_PPxSero_mcmc[sampled_param_id[i],7] , vaccTypes = mass_VT, vacc_time = 0, sero_no = sero_no)
WF_PPxSero_model <- WF_PPxSero$new(pars = PPxSero_params,
time = 0,
n_particles = 1L,
n_threads = 4L,
seed = 1L)
simMeanggCPP3_Mass_1 <- WF_PPxSero_model$run(72)[-1,1][1:mass_clusters]
sim_results_Mass[,i] <- simMeanggCPP3_Mass_1
}
divide_by_sum <- function(x){
x <- x / sum(x)
x
}
# collect confidence intervals for all clusters
conf_intervals_Mass <- array(c(empty_vec,empty_vec),dim = c(mass_clusters, 2))
for (i in 1:mass_clusters) {
ttest <- t.test(sim_results_Mass_rel[i,])
conf_intervals_Mass[i,] <- c(ttest$conf.int[1], ttest$conf.int[2])
}
head(conf_intervals_Mass)
lollipop_cluster_freqs_2x2_VTandNVT_labelSero(year = "2007", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_3/sum(mass_cluster_freq_3), model_name_1 ="lower_bound", model1 = conf_intervals_Mass[,1], model_name_2 ="upper_bound", model2 = conf_intervals_Mass[,2], VT_vec = PP_mass_VT, SeroLabel = PP_serotype_comp)
colSums(conf_intervals_Mass)
head(sim_results_Mass_rel)
sim_results_Mass_rel <- apply(sim_results_Mass, 2, divide_by_sum)
# collect confidence intervals for all clusters
conf_intervals_Mass <- array(c(empty_vec,empty_vec),dim = c(mass_clusters, 2))
for (i in 1:mass_clusters) {
ttest <- t.test(sim_results_Mass_rel[i,])
conf_intervals_Mass[i,] <- c(ttest$conf.int[1], ttest$conf.int[2])
}
lollipop_cluster_freqs_2x2_VTandNVT_labelSero(year = "2007", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_3/sum(mass_cluster_freq_3), model_name_1 ="lower_bound", model1 = conf_intervals_Mass[,1], model_name_2 ="upper_bound", model2 = conf_intervals_Mass[,2], VT_vec = PP_mass_VT, SeroLabel = PP_serotype_comp)
PPxSero_params <- list(dt = 1/36, species_no =mass_clusters,  gene_no = nrow(intermed_gene_presence_absence_consensus)-1, Pop_ini = ( model_start_pop), Pop_eq = Pop_eq <- rowSums(model_start_pop), capacity = sum( model_start_pop), Genotypes = intermed_gene_presence_absence_consensus_matrix, sigma_f = Mass_PPxSero_mcmc[sampled_param_id[i],4], prop_f = Mass_PPxSero_mcmc[sampled_param_id[i],5], sigma_w =-1000 , delta = delta_ranking, m = Mass_PPxSero_mcmc[sampled_param_id[i],6], migVec =  as.matrix(avg_cluster_freq), v = Mass_PPxSero_mcmc[sampled_param_id[i],7] , vaccTypes = mass_VT, vacc_time = 0, sero_no = sero_no)
WF_PPxSero_model <- WF_PPxSero$new(pars = PPxSero_params,
time = 0,
n_particles = 1L,
n_threads = 4L,
seed = 1L)
WF_PPxSero_model <- WF_PPxSero$new(pars = PPxSero_params,
time = 0,
n_particles = 100L,
n_threads = 4L,
seed = 1L)
simMeanggCPP3_Mass_1 <- WF_PPxSero_model$run(72)[-1,1][1:mass_clusters]
simMeanggCPP3_Mass_1
PPxSero_params <- list(dt = 1/36, species_no =mass_clusters,  gene_no = nrow(intermed_gene_presence_absence_consensus)-1, Pop_ini = ( model_start_pop), Pop_eq = Pop_eq <- rowSums(model_start_pop), capacity = sum( model_start_pop), Genotypes = intermed_gene_presence_absence_consensus_matrix, sigma_f = Mass_PPxSero_mcmc[sampled_param_id[i],4], prop_f = Mass_PPxSero_mcmc[sampled_param_id[i],5], sigma_w =-1000 , delta = delta_ranking, m = Mass_PPxSero_mcmc[sampled_param_id[i],6], migVec =  as.matrix(avg_cluster_freq), v = Mass_PPxSero_mcmc[sampled_param_id[i],7] , vaccTypes = mass_VT, vacc_time = 0, sero_no = sero_no)
WF_PPxSero_model <- WF_PPxSero$new(pars = PPxSero_params,
time = 0,
n_particles = 100L,
n_threads = 8L,
seed = 1L)
simMeanggCPP3_Mass_1 <- WF_PPxSero_model$run(72)[(2:(mass_clusters+1)),]
head(simMeanggCPP3_Mass_1)
sim_results_Mass_rel <- apply(simMeanggCPP3_Mass_1, 2, divide_by_sum)
# collect confidence intervals for all clusters
conf_intervals_Mass <- array(c(empty_vec,empty_vec),dim = c(mass_clusters, 2))
for (i in 1:mass_clusters) {
ttest <- t.test(sim_results_Mass_rel[i,])
conf_intervals_Mass[i,] <- c(ttest$conf.int[1], ttest$conf.int[2])
}
lollipop_cluster_freqs_2x2_VTandNVT_labelSero(year = "2007", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_3/sum(mass_cluster_freq_3), model_name_1 ="lower_bound", model1 = conf_intervals_Mass[,1], model_name_2 ="upper_bound", model2 = conf_intervals_Mass[,2], VT_vec = PP_mass_VT, SeroLabel = PP_serotype_comp)
head(sim_results_Mass_rel)
# collect confidence intervals for all clusters
conf_intervals_Mass <- array(c(empty_vec,empty_vec),dim = c(mass_clusters, 2))
for (i in 1:mass_clusters) {
ttest <- t.test(simMeanggCPP3_Mass_1[i,])
conf_intervals_Mass[i,] <- c(ttest$conf.int[1], ttest$conf.int[2])
}
conf_intervals_Mass
colSums(conf_intervals_Mass)
colSums(simMeanggCPP3_Mass_1)
mean(colSums(simMeanggCPP3_Mass_1))
lollipop_cluster_freqs_2x2_VTandNVT_labelSero(year = "2007", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_3/sum(mass_cluster_freq_3), model_name_1 ="lower_bound", model1 = (conf_intervals_Mass[,1])/mean(colSums(simMeanggCPP3_Mass_1)), model_name_2 ="upper_bound", model2 = (conf_intervals_Mass[,2])/mean(colSums(simMeanggCPP3_Mass_1)), VT_vec = PP_mass_VT, SeroLabel = PP_serotype_comp)
sim_results_Mass_rel[1,]
plot(sim_results_Mass_rel[1,])
t.test(sim_results_Mass_rel[1,])
t.test(sim_results_Mass_rel[2,])
