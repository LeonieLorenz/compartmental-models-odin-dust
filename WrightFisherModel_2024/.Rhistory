complex_params = list(species_no = species_no, Pop_ini = Pop_ini, Pop_eq = Pop_eq, Genotypes = intermed_gene_presence_absence_consensus[-1,-1], capacity = capacity, delta = delta, vaccTypes = vaccTypes, gene_no = gene_no, vacc_time = vacc_time, dt = dt, migVec = migVec, sigma_w = pmcmc_sigma_w)
make_transform <- function(m) {
function(theta) {
as_double_mtx <- function(x){
sapply(x,as.double)
}
c(lapply(m, as_double_mtx), as.list(theta))
}
}
take_list <- function(x){
print(x$Genotype)
}
transform <- function() {
make_transform(complex_params)}
transformed_params <<- make_transform(complex_params)
proposal_matrix <- diag(0.1,4) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 01), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars$initial()
#WF$public_methods$has_openmp()
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
n_steps <- 5
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 1)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
n_steps <- 25
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains =4, n_workers = 4,
n_threads_total = 4)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run, burnin = 250, thin = 1)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run, burnin = 10, thin = 1)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
print(parameter_mean_hpd)
det_mcmc1 <- coda::as.mcmc(cbind(det_pmcmc_run$probabilities, det_pmcmc_run$pars))
plot(det_mcmc1)
Nepal_cluster_freqs[[6]]
seq_clusters <- readRDS("Nepal_PP.rds")
intermed_gene_presence_absence_consensus <- readRDS(file = "Nepal_ggCaller_intermed_consensus.rds")
intermed_gene_presence_absence_consensus_matrix <- sapply(intermed_gene_presence_absence_consensus[-1,-1],as.double)
model_start_pop <- readRDS(file = "Nepal_model_start_pop.rds")
delta_ranking <- readRDS(file = "Nepal_delta_ranking.rds")
#mass_cluster_freq_1 <- readRDS(file = "Nepal_cluster_freqs_1.rds")
#mass_cluster_freq_2 <- readRDS(file = "Nepal_cluster_freqs_2.rds")
#mass_cluster_freq_3 <- readRDS(file = "Nepal_cluster_freqs_3.rds")
#mass_cluster_freq_4 <- readRDS(file = "Nepal_cluster_freqs_4.rds")
#mass_cluster_freq_5 <- readRDS(file = "Nepal_cluster_freqs_5.rds")
mass_cluster_freq_6 <- readRDS(file = "Nepal_cluster_freqs_6.rds")
mass_cluster_freq_7 <- readRDS(file = "Nepal_cluster_freqs_7.rds")
mass_cluster_freq_8 <- readRDS(file = "Nepal_cluster_freqs_8.rds")
mass_cluster_freq_9 <- readRDS(file = "Nepal_cluster_freqs_9.rds")
mass_cluster_freq_10 <- readRDS(file = "Nepal_cluster_freqs_10.rds")
mass_cluster_freq_11 <- readRDS(file = "Nepal_cluster_freqs_11.rds")
mass_cluster_freq_12 <- readRDS(file = "Nepal_cluster_freqs_12.rds")
mass_cluster_freq_13 <- readRDS(file = "Nepal_cluster_freqs_13.rds")
mass_cluster_freq_14 <- readRDS(file = "Nepal_cluster_freqs_14.rds")
mass_VT <- readRDS(file = "Nepal_VT.rds")
mass_clusters <- length(unique(seq_clusters$Cluster))
avg_cluster_freq <- rep(1/mass_clusters, mass_clusters)
output_filename <- "Nepal_ggCaller_PopPUNK"
dt <- 1/12
#peripost_mass_cluster_freq <- data.frame("year" = 1:13, rbind(mass_cluster_freq_2, mass_cluster_freq_3, mass_cluster_freq_4, mass_cluster_freq_5, mass_cluster_freq_6, mass_cluster_freq_7, mass_cluster_freq_8, mass_cluster_freq_9,mass_cluster_freq_10, mass_cluster_freq_11, mass_cluster_freq_12, mass_cluster_freq_13,mass_cluster_freq_14))
# now using 2009 as the start population (Nepal_cluster_freqs_5.rds)
peripost_mass_cluster_freq <- data.frame("year" = 1:9, rbind(mass_cluster_freq_6, mass_cluster_freq_7, mass_cluster_freq_8, mass_cluster_freq_9,mass_cluster_freq_10, mass_cluster_freq_11, mass_cluster_freq_12, mass_cluster_freq_13,mass_cluster_freq_14))
names(peripost_mass_cluster_freq) <- c("year", as.character(1:mass_clusters))
vacc_time <- 6
fitting_mass_data <- mcstate::particle_filter_data(data = peripost_mass_cluster_freq,
time = "year",
rate = 1 / dt,
initial_time = 0)
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
# Using MCMC to infer parameters
pmcmc_sigma_f <- mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0, max = 1)
#pmcmc_sigma_w <- 0
pmcmc_sigma_w <- -1000
pmcmc_prop_f <- mcstate::pmcmc_parameter("prop_f", 0.2, min = 0, max = 1)
pmcmc_m <- mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1)
pmcmc_v <- mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)
species_no <- mass_clusters
no_clusters <- mass_clusters
gene_no <- nrow(intermed_gene_presence_absence_consensus_matrix)
Pop_ini <- model_start_pop
Pop_eq <- model_start_pop
Genotypes <- intermed_gene_presence_absence_consensus_matrix
capacity <- sum(model_start_pop)
delta <- delta_ranking
vaccTypes <- mass_VT
#vacc_time <- 0
#dt <- 1/36
migVec <- avg_cluster_freq
complex_params = list(species_no = species_no, Pop_ini = Pop_ini, Pop_eq = Pop_eq, Genotypes = intermed_gene_presence_absence_consensus[-1,-1], capacity = capacity, delta = delta, vaccTypes = vaccTypes, gene_no = gene_no, vacc_time = vacc_time, dt = dt, migVec = migVec, sigma_w = pmcmc_sigma_w)
make_transform <- function(m) {
function(theta) {
as_double_mtx <- function(x){
sapply(x,as.double)
}
c(lapply(m, as_double_mtx), as.list(theta))
}
}
take_list <- function(x){
print(x$Genotype)
}
transform <- function() {
make_transform(complex_params)}
transformed_params <<- make_transform(complex_params)
proposal_matrix <- diag(0.1,4) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 01), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars$initial()
#WF$public_methods$has_openmp()
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
n_steps <- 5
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 1)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
n_steps <- 1000
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains =4, n_workers = 4,
n_threads_total = 4)
path_to_data <- "~/Documents/PhD_Project/Data/"
### Reading in the Accession Codes, Population and the Sequence Clusters
library(readxl)
Samples_accCodes <- read_excel(paste(path_to_data, "Massachusetts_data_NickCroucher/SupplementaryDataPaper/Samples_accCodes.xlsx", sep = ""))
Mass_Samples_accCodes <- Samples_accCodes[Samples_accCodes$Population=="Massachusetts",]
Mass_Isolates <- Mass_Samples_accCodes$`Isolate Name`
Mass_Isolates_dict <- 1:length(Mass_Isolates)
names(Mass_Isolates_dict) <- Mass_Isolates
Isolates <- Samples_accCodes$`Isolate Name`
Isolates_dict <- 1:length(Isolates)
names(Isolates_dict) <- Isolates
Isolate_from_Mass_dict <- rep(0, length(Isolates))
names(Isolate_from_Mass_dict) <- Isolates
Isolate_from_Mass_dict[Mass_Isolates] <- 1
PopPUNK_clusters <- read.csv("/Users/llorenz/Documents/PhD_Project/Data/Massachusetts_SeqClusters/PopPUNKwithStandardDB /poppunk_clusters_clusters.csv")
PopPUNK_clusters <- read.csv("/Users/llorenz/Documents/PhD_Project/Data/Massachusetts_SeqClusters/PopPUNKwithStandardDB/poppunk_clusters_clusters.csv")
no_PopPUNK_clusters <- length(unique(PopPUNK_clusters$Cluster)) # number of clusters in dataset
no_PopPUNK_clusters
View(PopPUNK_clusters)
# since Mass was in the database, I had to run PopPUNK with --write-references
# so now I need to filter this dataset to only have the real Nepal sequences
PP_taxon_ind_dict <- 1:nrow(PP_all)
# since Mass was in the database, I had to run PopPUNK with --write-references
# so now I need to filter this dataset to only have the real Nepal sequences
PP_taxon_ind_dict <- 1:nrow(PopPUNK_clusters)
names(PP_taxon_ind_dict) <- PopPUNK_clusters$Taxon
PP_taxon_ind_dict
PP_is_Nepal_dict <- rep(FALSE,nrow(PopPUNK_clusters))
names(PP_is_Nepal_dict) <- PopPUNK_clusters$Taxon
View(Mass_Samples_accCodes)
View(Mass_Samples_accCodes)
# Add Isolate Name to PopPUNK data frame
accNo_to_filename <- read.delim("~/Documents/PhD_Project/Code/1st_project/odin-dust-examples/Data/filereport_read_run_PRJEB2632_tsv.txt")
accNo_to_filename <- accNo_to_filename[,c(1,8)]
accNo_to_filename[,3] <- matrix(unlist(strsplit(accNo_to_filename[,2],"/")), ncol=6, byrow = TRUE)[,6]
accNo_to_filename[,3] <- matrix(unlist(strsplit(accNo_to_filename[,3],"[.]")), ncol=2, byrow = TRUE)[,1]
accNo_to_filename <- accNo_to_filename[,c(1,3)]
colnames(accNo_to_filename) <- c(colnames(accNo_to_filename)[1], "filenames")
filenameToAccNo_dict <- accNo_to_filename$run_accession
names(filenameToAccNo_dict) <- accNo_to_filename$filenames
AccNoToIsolate_dict <- Mass_Samples_accCodes$`Isolate Name`
names(AccNoToIsolate_dict) <- Mass_Samples_accCodes$`Accession Code`
AccNoToIsolate_dict
filenameToAccNo_dict
length(filenameToAccNo_dict)
filenameToAccNo_dict["14936_6#80"]
is.element("14936_6#80", filenameToAccNo_dict)
is.element("7622_5#77", filenameToAccNo_dict)
is.element("7622_5#77", names(filenameToAccNo_dict))
is.element("14936_6#80", names(filenameToAccNo_dict))
length(filenameToAccNo_dict)
PopPUNK_all <- read.csv("/Users/llorenz/Documents/PhD_Project/Data/Massachusetts_SeqClusters/PopPUNKwithStandardDB/poppunk_clusters_clusters.csv")
no_PopPUNK_all <- length(unique(PopPUNK_clusters$Cluster)) # number of clusters in dataset
PopPUNK_clusters <- data.frame(matrix(NA, nrow = length(filenameToAccNo_dict), ncol = 2))
colnames(PopPUNK_clusters) <- colnames(PopPUNK_all)
View(PopPUNK_clusters)
counter <- 0
for (i in 1:nrow(PopPUNK_all)) {
if(is.element(PopPUNK_all$Taxon[i], names(filenameToAccNo_dict))){
counter <- counter + 1
PopPUNK_clusters[counter,] <- c(AccNoToIsolate_dict[filenameToAccNo_dict[PopPUNK_all[i,1]]], PopPUNK_all[i,2])
}
}
View(PopPUNK_clusters)
PopPUNK_clusters <- data.frame(matrix(NA, nrow = nrow(Mass_Samples_accCodes), ncol = 2))
colnames(PopPUNK_clusters) <- colnames(PopPUNK_all)
counter <- 0
for (i in 1:nrow(PopPUNK_all)) {
if(is.element(PopPUNK_all$Taxon[i], names(filenameToAccNo_dict))){
if(is.element(filenameToAccNo_dict[PopPUNK_all$Taxon[i]], names(AccNoToIsolate_dict))){
counter <- counter + 1
PopPUNK_clusters[counter,] <- c(AccNoToIsolate_dict[filenameToAccNo_dict[PopPUNK_all[i,1]]], PopPUNK_all[i,2])
}
}
}
PopPUNK_clusters <- read.csv("~/Documents/PhD_Project/Code/1st_project/odin-dust-examples/Data/refined_modelfitk3_clusters.csv")
no_PopPUNK_clusters <- length(unique(PopPUNK_clusters$Cluster)) # number of clusters in dataset
PopPUNK_clusters$IsolateName <- AccNoToIsolate_dict[filenameToAccNo_dict[PopPUNK_clusters$Taxon]]
PopPUNK_clusters <- data.frame(matrix(NA, nrow = nrow(Mass_Samples_accCodes), ncol = 3))
colnames(PopPUNK_clusters) <- c(colnames(PopPUNK_all), "IsolateName")
counter <- 0
for (i in 1:nrow(PopPUNK_all)) {
if(is.element(PopPUNK_all$Taxon[i], names(filenameToAccNo_dict))){
if(is.element(filenameToAccNo_dict[PopPUNK_all$Taxon[i]], names(AccNoToIsolate_dict))){
counter <- counter + 1
PopPUNK_clusters[counter,] <- c(PopPUNK_all[i,],AccNoToIsolate_dict[filenameToAccNo_dict[PopPUNK_all[i,1]]])
}
}
}
PopPUNK_clusters_old <- read.csv("~/Documents/PhD_Project/Code/1st_project/odin-dust-examples/Data/refined_modelfitk3_clusters.csv")
no_PopPUNK_clusters_old <- length(unique(PopPUNK_clusters$Cluster)) # number of clusters in dataset
View(PopPUNK_clusters_old)
no_PopPUNK_clusters <- length(unique(PopPUNK_clusters$Cluster))
no_PopPUNK_clusters
no_PopPUNK_clusters_old
no_PopPUNK_clusters_old <- length(unique(PopPUNK_clusters_old$Cluster)) # number of clusters in dataset
no_PopPUNK_clusters_old
# Add VT information
VT_dict <- Mass_Samples_accCodes$`Vaccine Type`
names(VT_dict) <- Mass_Samples_accCodes$`Isolate Name`
PopPUNK_clusters$VT <- VT_dict[PopPUNK_clusters$IsolateName]
PopPUNK_clusters$VT <- VT_dict[PopPUNK_clusters$IsolateName]
```{r}
# Add sequencing year information
SeqYear_dict <- Mass_Samples_accCodes$`Year of Isolation`
names(SeqYear_dict) <- Mass_Samples_accCodes$`Isolate Name`
PopPUNK_clusters$SeqYear <- SeqYear_dict[PopPUNK_clusters$IsolateName]
# Add Serotype Information
Serotype_dict <- Mass_Samples_accCodes$Serotype
names(Serotype_dict) <- Mass_Samples_accCodes$`Isolate Name`
PopPUNK_clusters$Serotype <- Serotype_dict[PopPUNK_clusters$IsolateName]
saveRDS(PopPUNK_clusters, file = "PopPUNK_clusters.rds")
#Compute consensus genomes for sequence clusters
PP_Mass_seq_clusters_dict <- PopPUNK_clusters$Cluster
names(PP_Mass_seq_clusters_dict) <- PopPUNK_clusters$IsolateName
PP_intermed_gene_presence_absence_consensus <- data.frame(matrix(0, nrow = sum(cog_filter)+1, ncol = length(unique(PopPUNK_clusters$Cluster))+1))
PP_intermed_gene_presence_absence_consensus[1,-1] <- paste("SeqCl_",unique(PopPUNK_clusters$Cluster),sep = "")
PP_intermed_gene_presence_absence_consensus_2001 <- data.frame(matrix(0, nrow = sum(cog_filter)+1, ncol = length(unique(PopPUNK_clusters$Cluster))+1))
PP_intermed_gene_presence_absence_consensus_2001[1,-1] <- paste("SeqCl_",unique(PopPUNK_clusters$Cluster),sep = "")
PP_intermed_gene_presence_absence_consensus_2004 <- data.frame(matrix(0, nrow = sum(cog_filter)+1, ncol = length(unique(PopPUNK_clusters$Cluster))+1))
PP_intermed_gene_presence_absence_consensus_2004[1,-1] <- paste("SeqCl_",unique(PopPUNK_clusters$Cluster),sep = "")
PP_intermed_gene_presence_absence_consensus_2007 <- data.frame(matrix(0, nrow = sum(cog_filter)+1, ncol = length(unique(PopPUNK_clusters$Cluster))+1))
PP_intermed_gene_presence_absence_consensus_2007[1,-1] <- paste("SeqCl_",unique(PopPUNK_clusters$Cluster),sep = "")
cons_genomes <- function(x){
as.double(ceiling(median(as.integer(x))))
}
for (i in unique(PopPUNK_clusters$Cluster)) {
PP_intermed_gene_presence_absence_consensus[-1,i+1] <- apply(as.matrix(intermed_gene_presence_absence[-1,c(FALSE,PP_Mass_seq_clusters_dict[unlist(intermed_gene_presence_absence[1,-1])]==i)]), 1, cons_genomes)
PP_intermed_gene_presence_absence_consensus_2001[-1,i+1] <- apply(as.matrix(intermed_gene_presence_absence_2001[-1,c(FALSE,PP_Mass_seq_clusters_dict[unlist(intermed_gene_presence_absence_2001[1,-1])]==i)]), 1, cons_genomes)
PP_intermed_gene_presence_absence_consensus_2004[-1,i+1] <- apply(as.matrix(intermed_gene_presence_absence_2004[-1,c(FALSE,PP_Mass_seq_clusters_dict[unlist(intermed_gene_presence_absence_2004[1,-1])]==i)]), 1, cons_genomes)
PP_intermed_gene_presence_absence_consensus_2007[-1,i+1] <- apply(as.matrix(intermed_gene_presence_absence_2007[-1,c(FALSE,PP_Mass_seq_clusters_dict[unlist(intermed_gene_presence_absence_2007[1,-1])]==i)]), 1, cons_genomes)
}
PP_intermed_gene_presence_absence_consensus_2001[-1,1] <- intermed_gene_presence_absence[-1,1]
PP_intermed_gene_presence_absence_consensus_2004[-1,1] <- intermed_gene_presence_absence[-1,1]
PP_intermed_gene_presence_absence_consensus_2007[-1,1] <- intermed_gene_presence_absence[-1,1]
cons_genomes <- function(x){
as.double(ceiling(median(as.integer(x))))
}
for (i in unique(PopPUNK_clusters$Cluster)) {
))))
#Compute consensus genomes for sequence clusters
PP_Mass_seq_clusters_dict <- PopPUNK_clusters$Cluster
names(PP_Mass_seq_clusters_dict) <- PopPUNK_clusters$IsolateName
PP_intermed_gene_presence_absence_consensus <- data.frame(matrix(0, nrow = sum(cog_filter)+1, ncol = length(unique(PopPUNK_clusters$Cluster))+1))
PP_intermed_gene_presence_absence_consensus[1,-1] <- paste("SeqCl_",unique(PopPUNK_clusters$Cluster),sep = "")
PP_intermed_gene_presence_absence_consensus_2001 <- data.frame(matrix(0, nrow = sum(cog_filter)+1, ncol = length(unique(PopPUNK_clusters$Cluster))+1))
PP_intermed_gene_presence_absence_consensus_2001[1,-1] <- paste("SeqCl_",unique(PopPUNK_clusters$Cluster),sep = "")
PP_intermed_gene_presence_absence_consensus_2004 <- data.frame(matrix(0, nrow = sum(cog_filter)+1, ncol = length(unique(PopPUNK_clusters$Cluster))+1))
PP_intermed_gene_presence_absence_consensus_2004[1,-1] <- paste("SeqCl_",unique(PopPUNK_clusters$Cluster),sep = "")
PP_intermed_gene_presence_absence_consensus_2007 <- data.frame(matrix(0, nrow = sum(cog_filter)+1, ncol = length(unique(PopPUNK_clusters$Cluster))+1))
PP_intermed_gene_presence_absence_consensus_2007[1,-1] <- paste("SeqCl_",unique(PopPUNK_clusters$Cluster),sep = "")
cons_genomes <- function(x){
as.double(ceiling(median(as.integer(x))))
}
for (i in unique(PopPUNK_clusters$Cluster)) {
PP_intermed_gene_presence_absence_consensus[-1,(which(unique(PopPUNK_clusters$Cluster) == i))+1] <- apply(as.matrix(intermed_gene_presence_absence[-1,c(FALSE,PP_Mass_seq_clusters_dict[unlist(intermed_gene_presence_absence[1,-1])]==i)]), 1, cons_genomes)
PP_intermed_gene_presence_absence_consensus_2001[-1,(which(unique(PopPUNK_clusters$Cluster) == i))+1] <- apply(as.matrix(intermed_gene_presence_absence_2001[-1,c(FALSE,PP_Mass_seq_clusters_dict[unlist(intermed_gene_presence_absence_2001[1,-1])]==i)]), 1, cons_genomes)
PP_intermed_gene_presence_absence_consensus_2004[-1,(which(unique(PopPUNK_clusters$Cluster) == i))+1] <- apply(as.matrix(intermed_gene_presence_absence_2004[-1,c(FALSE,PP_Mass_seq_clusters_dict[unlist(intermed_gene_presence_absence_2004[1,-1])]==i)]), 1, cons_genomes)
PP_intermed_gene_presence_absence_consensus_2007[-1,(which(unique(PopPUNK_clusters$Cluster) == i))+1] <- apply(as.matrix(intermed_gene_presence_absence_2007[-1,c(FALSE,PP_Mass_seq_clusters_dict[unlist(intermed_gene_presence_absence_2007[1,-1])]==i)]), 1, cons_genomes)
}
PP_intermed_gene_presence_absence_consensus[-1,1] <- intermed_gene_presence_absence[-1,1]
PP_intermed_gene_presence_absence_consensus_2001[-1,1] <- intermed_gene_presence_absence[-1,1]
PP_intermed_gene_presence_absence_consensus_2004[-1,1] <- intermed_gene_presence_absence[-1,1]
PP_intermed_gene_presence_absence_consensus_2007[-1,1] <- intermed_gene_presence_absence[-1,1]
saveRDS(PP_intermed_gene_presence_absence_consensus, file = "PP_intermed_gene_presence_absence_consensus.rds")
saveRDS(PP_intermed_gene_presence_absence_consensus_2001, file = "PP_intermed_gene_presence_absence_consensus_2001.rds")
saveRDS(PP_intermed_gene_presence_absence_consensus_2004, file = "PP_intermed_gene_presence_absence_consensus_2004.rds")
saveRDS(PP_intermed_gene_presence_absence_consensus_2007, file = "PP_intermed_gene_presence_absence_consensus_2007.rds")
# read in gene presence absence matrix
PP_intermed_gene_presence_absence_consensus <- readRDS(file = "PP_intermed_gene_presence_absence_consensus.rds")
PP_intermed_gene_presence_absence_consensus_2001 <- readRDS(file = "PP_intermed_gene_presence_absence_consensus_2001.rds")
PP_intermed_gene_presence_absence_consensus_2004 <- readRDS(file = "PP_intermed_gene_presence_absence_consensus_2004.rds")
PP_intermed_gene_presence_absence_consensus_2007 <- readRDS(file = "PP_intermed_gene_presence_absence_consensus_2007.rds")
# read in gene presence absence matrix
PP_intermed_gene_presence_absence_consensus <- readRDS(file = "PP_intermed_gene_presence_absence_consensus.rds")
PP_intermed_gene_presence_absence_consensus_2001 <- readRDS(file = "PP_intermed_gene_presence_absence_consensus_2001.rds")
PP_intermed_gene_presence_absence_consensus_2004 <- readRDS(file = "PP_intermed_gene_presence_absence_consensus_2004.rds")
PP_intermed_gene_presence_absence_consensus_2007 <- readRDS(file = "PP_intermed_gene_presence_absence_consensus_2007.rds")
View(PP_intermed_gene_presence_absence_consensus_2007)
# calculate Vaccine Type consensus for clusters
PP_mass_VT <- rep(0, no_PopPUNK_clusters)
for (i in 1:no_PopPUNK_clusters){
PP_mass_VT[i] <- ceiling(median(as.integer(PopPUNK_clusters[PopPUNK_clusters$Cluster == i,"VT"]=="VT")))
}
PP_mass_VT_mean <- rep(0, no_PopPUNK_clusters)
for (i in 1:no_PopPUNK_clusters){
PP_mass_VT_mean[i] <- (mean(as.integer(PopPUNK_clusters[PopPUNK_clusters$Cluster == i,"VT"]=="VT")))
}
saveRDS(PP_mass_VT_mean, file = "PP_mass_VT_mean.rds")
saveRDS(PP_mass_VT, file = "PP_mass_VT.rds")
#calculate the frequency of the gene clusters and year
PP_mass_cluster_freq_1 <- rep(0,no_PopPUNK_clusters)
PP_mass_cluster_freq_2 <- rep(0,no_PopPUNK_clusters)
PP_mass_cluster_freq_3 <- rep(0,no_PopPUNK_clusters)
for (i in 1:no_PopPUNK_clusters){
PP_mass_cluster_freq_1[i] <- length(which(PopPUNK_clusters[which(PopPUNK_clusters$Cluster==i),]$"SeqYear"==2001))
PP_mass_cluster_freq_2[i] <- length(which(PopPUNK_clusters[which(PopPUNK_clusters$Cluster==i),]$"SeqYear"==2004))
PP_mass_cluster_freq_3[i] <- length(which(PopPUNK_clusters[which(PopPUNK_clusters$Cluster==i),]$"SeqYear"==2007))
}
saveRDS(PP_mass_cluster_freq_1, file = "PP_mass_cluster_freq_1.rds")
saveRDS(PP_mass_cluster_freq_2, file = "PP_mass_cluster_freq_2.rds")
saveRDS(PP_mass_cluster_freq_3, file = "PP_mass_cluster_freq_3.rds")
### create initial population that is based on the 2001 data set but not an exact sampling from it
# but a Poisson process
PP_expand_factor <- 15000 / sum(PP_mass_cluster_freq_1)
exp_noise <- 10
PP_model_start_pop <- (sapply((PP_mass_cluster_freq_1 + rexp(n = length(PP_mass_cluster_freq_1), rate = exp_noise)) * PP_expand_factor, rpois, n=1))
# visual check for the "sampling"
plot(PP_mass_cluster_freq_1/sum(PP_mass_cluster_freq_1))
points(PP_model_start_pop/sum(PP_model_start_pop), col = "red")
saveRDS(PP_model_start_pop, file = "PP_model_start_pop.rds")
#Compute consensus genomes for sequence clusters
ggCPP_Mass_seq_clusters_dict <- PopPUNK_clusters$Cluster
names(ggCPP_Mass_seq_clusters_dict) <- PopPUNK_clusters$Taxon
ggCPP_intermed_gene_presence_absence_consensus <- data.frame(matrix(0, nrow = sum(ggC_filter)+1, ncol = length(unique(PopPUNK_clusters$Cluster))+1))
ggCPP_intermed_gene_presence_absence_consensus[1,-1] <- paste("SeqCl_",unique(PopPUNK_clusters$Cluster),sep = "")
ggCPP_intermed_gene_presence_absence_consensus_2001 <- data.frame(matrix(0, nrow = sum(ggC_filter)+1, ncol = length(unique(PopPUNK_clusters$Cluster))+1))
ggCPP_intermed_gene_presence_absence_consensus_2001[1,-1] <- paste("SeqCl_",unique(PopPUNK_clusters$Cluster),sep = "")
ggCPP_intermed_gene_presence_absence_consensus_2004 <- data.frame(matrix(0, nrow = sum(ggC_filter)+1, ncol = length(unique(PopPUNK_clusters$Cluster))+1))
ggCPP_intermed_gene_presence_absence_consensus_2004[1,-1] <- paste("SeqCl_",unique(PopPUNK_clusters$Cluster),sep = "")
ggCPP_intermed_gene_presence_absence_consensus_2007 <- data.frame(matrix(0, nrow = sum(ggC_filter)+1, ncol = length(unique(PopPUNK_clusters$Cluster))+1))
ggCPP_intermed_gene_presence_absence_consensus_2007[1,-1] <- paste("SeqCl_",unique(PopPUNK_clusters$Cluster),sep = "")
cons_genomes <- function(x){
as.double(ceiling(median(as.integer(x))))
}
for (i in unique(PopPUNK_clusters$Cluster)) {
ggCPP_intermed_gene_presence_absence_consensus[-1,(which(unique(PopPUNK_clusters$Cluster) == i))+1] <- apply(as.matrix(ggC_intermed_gene_presence_absence[-1,c(FALSE,ggCPP_Mass_seq_clusters_dict[unlist(ggC_intermed_gene_presence_absence[1,-1])]==i)]), 1, cons_genomes)
ggCPP_intermed_gene_presence_absence_consensus_2001[-1,(which(unique(PopPUNK_clusters$Cluster) == i))+1] <- apply(as.matrix(ggC_intermed_gene_presence_absence_2001[-1,c(FALSE,ggCPP_Mass_seq_clusters_dict[unlist(ggC_intermed_gene_presence_absence_2001[1,-1])]==i)]), 1, cons_genomes)
ggCPP_intermed_gene_presence_absence_consensus_2004[-1,(which(unique(PopPUNK_clusters$Cluster) == i))+1] <- apply(as.matrix(ggC_intermed_gene_presence_absence_2004[-1,c(FALSE,ggCPP_Mass_seq_clusters_dict[unlist(ggC_intermed_gene_presence_absence_2004[1,-1])]==i)]), 1, cons_genomes)
ggCPP_intermed_gene_presence_absence_consensus_2007[-1,(which(unique(PopPUNK_clusters$Cluster) == i))+1] <- apply(as.matrix(ggC_intermed_gene_presence_absence_2007[-1,c(FALSE,ggCPP_Mass_seq_clusters_dict[unlist(ggC_intermed_gene_presence_absence_2007[1,-1])]==i)]), 1, cons_genomes)
}
ggCPP_intermed_gene_presence_absence_consensus[-1,1] <- ggC_intermed_gene_presence_absence[-1,1]
ggCPP_intermed_gene_presence_absence_consensus_2001[-1,1] <- ggC_intermed_gene_presence_absence[-1,1]
ggCPP_intermed_gene_presence_absence_consensus_2004[-1,1] <- ggC_intermed_gene_presence_absence[-1,1]
ggCPP_intermed_gene_presence_absence_consensus_2007[-1,1] <- ggC_intermed_gene_presence_absence[-1,1]
saveRDS(ggCPP_intermed_gene_presence_absence_consensus, file = "ggCPP_intermed_gene_presence_absence_consensus.rds")
saveRDS(ggCPP_intermed_gene_presence_absence_consensus_2001, file = "ggCPP_intermed_gene_presence_absence_consensus_2001.rds")
saveRDS(ggCPP_intermed_gene_presence_absence_consensus_2004, file = "ggCPP_intermed_gene_presence_absence_consensus_2004.rds")
saveRDS(ggCPP_intermed_gene_presence_absence_consensus_2007, file = "ggCPP_intermed_gene_presence_absence_consensus_2007.rds")
ggC_mass_genesInVT <- apply(ggCPP_intermed_gene_presence_absence_consensus[-1,which(PP_mass_VT==1) + 1],1,max)
local_colours <- c("#E69F00","black")
plot(sort(ggC_delta_data3), main = "Different delta stats sort by peri_post - pre", col = local_colours[(as.integer(ggC_mass_genesInVT)+1)])
PP_clust_max <- apply(matrix(c(PP_mass_cluster_freq_1,PP_mass_cluster_freq_2, PP_mass_cluster_freq_3),nrow=3,ncol=length(PP_mass_cluster_freq_1),byrow = TRUE),2,max)
#PP_clust_max>1
filt_PP_mass_cluster_freq_1 <- PP_mass_cluster_freq_1[PP_clust_max>1]
filt_PP_mass_cluster_freq_2 <- PP_mass_cluster_freq_2[PP_clust_max>1]
filt_PP_mass_cluster_freq_3 <- PP_mass_cluster_freq_3[PP_clust_max>1]
#filter gene presence absence matrix
PP_intermed_gene_presence_absence_consensus <- readRDS(file = "PP_intermed_gene_presence_absence_consensus.rds")
filt_PP_intermed_gene_presence_absence_consensus <- PP_intermed_gene_presence_absence_consensus[,c(TRUE, PP_clust_max>1)]
# filter vaccination info
PP_mass_VT <- readRDS(file = "PP_mass_VT.rds")
filt_PP_mass_VT <- PP_mass_VT[PP_clust_max>1]
# filter start pop
PP_model_start_pop <- readRDS("PP_model_start_pop.rds")
filt_PP_model_start_pop <- PP_model_start_pop[PP_clust_max>1]
saveRDS(filt_PP_mass_cluster_freq_1, file = "filt_PP_mass_cluster_freq_1.rds")
saveRDS(filt_PP_mass_cluster_freq_2, file = "filt_PP_mass_cluster_freq_2.rds")
saveRDS(filt_PP_mass_cluster_freq_3, file = "filt_PP_mass_cluster_freq_3.rds")
saveRDS(filt_PP_intermed_gene_presence_absence_consensus, file = "filt_PP_intermed_gene_presence_absence_consensus.rds")
saveRDS(filt_PP_mass_VT, file = "filt_PP_mass_VT.rds")
saveRDS(filt_PP_model_start_pop, file = "filt_PP_model_start_pop.rds")
#filter gene presence absence matrix
ggCPP_intermed_gene_presence_absence_consensus <- readRDS(file = "ggCPP_intermed_gene_presence_absence_consensus.rds")
filt_ggCPP_intermed_gene_presence_absence_consensus <- ggCPP_intermed_gene_presence_absence_consensus[,c(TRUE, PP_clust_max>1)]
saveRDS(filt_ggCPP_intermed_gene_presence_absence_consensus, file = "filt_ggCPP_intermed_gene_presence_absence_consensus.rds")
#Compute consensus genomes for sequence clusters
Mass_serotypes_dict <- Mass_Samples_accCodes$Serotype
names(Mass_serotypes_dict) <- Mass_Samples_accCodes$`Isolate Name`
Sero_intermed_gene_presence_absence_consensus <- data.frame(matrix(0, nrow = sum(cog_filter)+1, ncol = length(unique(Mass_Samples_accCodes$Serotype))+1))
Sero_intermed_gene_presence_absence_consensus[1,-1] <- unique(Mass_Samples_accCodes$Serotype)
Sero_intermed_gene_presence_absence_consensus_2001 <- data.frame(matrix(0, nrow = sum(cog_filter)+1, ncol = length(unique(Mass_Samples_accCodes$Serotype))+1))
Sero_intermed_gene_presence_absence_consensus_2001[1,-1] <- unique(Mass_Samples_accCodes$Serotype)
Sero_intermed_gene_presence_absence_consensus_2004 <- data.frame(matrix(0, nrow = sum(cog_filter)+1, ncol = length(unique(Mass_Samples_accCodes$Serotype))+1))
Sero_intermed_gene_presence_absence_consensus_2004[1,-1] <- unique(Mass_Samples_accCodes$Serotype)
Sero_intermed_gene_presence_absence_consensus_2007 <- data.frame(matrix(0, nrow = sum(cog_filter)+1, ncol = length(unique(Mass_Samples_accCodes$Serotype))+1))
Sero_intermed_gene_presence_absence_consensus_2007[1,-1] <- unique(Mass_Samples_accCodes$Serotype)
cons_genomes <- function(x){
as.double(ceiling(median(as.integer(x))))
}
for (i in 1:length(unique(Mass_Samples_accCodes$Serotype))) {
Sero_intermed_gene_presence_absence_consensus[-1,i+1] <- apply(as.matrix(intermed_gene_presence_absence[-1,c(FALSE,Mass_serotypes_dict[unlist(intermed_gene_presence_absence[1,-1])]==unique(Mass_Samples_accCodes$Serotype)[i])]), 1, cons_genomes)
Sero_intermed_gene_presence_absence_consensus_2001[-1,i+1] <- apply(as.matrix(intermed_gene_presence_absence_2001[-1,c(FALSE,Mass_serotypes_dict[unlist(intermed_gene_presence_absence_2001[1,-1])]==unique(Mass_Samples_accCodes$Serotype)[i])]), 1, cons_genomes)
Sero_intermed_gene_presence_absence_consensus_2004[-1,i+1] <- apply(as.matrix(intermed_gene_presence_absence_2004[-1,c(FALSE,Mass_serotypes_dict[unlist(intermed_gene_presence_absence_2004[1,-1])]==unique(Mass_Samples_accCodes$Serotype)[i])]), 1, cons_genomes)
Sero_intermed_gene_presence_absence_consensus_2007[-1,i+1] <- apply(as.matrix(intermed_gene_presence_absence_2007[-1,c(FALSE,Mass_serotypes_dict[unlist(intermed_gene_presence_absence_2007[1,-1])]==unique(Mass_Samples_accCodes$Serotype)[i])]), 1, cons_genomes)
}
Sero_intermed_gene_presence_absence_consensus[-1,1] <- intermed_gene_presence_absence[-1,1]
Sero_intermed_gene_presence_absence_consensus_2001[-1,1] <- intermed_gene_presence_absence[-1,1]
Sero_intermed_gene_presence_absence_consensus_2004[-1,1] <- intermed_gene_presence_absence[-1,1]
Sero_intermed_gene_presence_absence_consensus_2007[-1,1] <- intermed_gene_presence_absence[-1,1]
saveRDS(Sero_intermed_gene_presence_absence_consensus, file = "Sero_intermed_gene_presence_absence_consensus.rds")
saveRDS(Sero_intermed_gene_presence_absence_consensus_2001, file = "Sero_intermed_gene_presence_absence_consensus_2001.rds")
saveRDS(Sero_intermed_gene_presence_absence_consensus_2004, file = "Sero_intermed_gene_presence_absence_consensus_2004.rds")
saveRDS(Sero_intermed_gene_presence_absence_consensus_2007, file = "Sero_intermed_gene_presence_absence_consensus_2007.rds")
# calculate Vaccine Type consensus for clusters
Sero_mass_VT <- rep(0, length(unique(Mass_Samples_accCodes$Serotype)))
for (i in 1:length(unique(Mass_Samples_accCodes$Serotype))){
Sero_mass_VT[i] <- ceiling(median(as.integer(Mass_Samples_accCodes[Mass_Samples_accCodes$Serotype == unique(Mass_Samples_accCodes$Serotype)[i],"Vaccine Type"]=="VT")))
}
saveRDS(Sero_mass_VT, file = "Sero_mass_VT.rds")
#calculate the frequency of the sequence clusters and year
Sero_freq_1 <- rep(0,length(unique(Mass_Samples_accCodes$Serotype)))
Sero_freq_2 <- rep(0,length(unique(Mass_Samples_accCodes$Serotype)))
Sero_freq_3 <- rep(0,length(unique(Mass_Samples_accCodes$Serotype)))
for (i in 1:length(unique(Mass_Samples_accCodes$Serotype))){
Sero_freq_1[i] <- length(which(Mass_Samples_accCodes[which(Mass_Samples_accCodes$Serotype==unique(Mass_Samples_accCodes$Serotype)[i]),]$"Year of Isolation"==2001))
Sero_freq_2[i] <- length(which(Mass_Samples_accCodes[which(Mass_Samples_accCodes$Serotype==unique(Mass_Samples_accCodes$Serotype)[i]),]$"Year of Isolation"==2004))
Sero_freq_3[i] <- length(which(Mass_Samples_accCodes[which(Mass_Samples_accCodes$Serotype==unique(Mass_Samples_accCodes$Serotype)[i]),]$"Year of Isolation"==2007))
}
#calculate the frequency of the sequence clusters and year
Sero_freq_1 <- rep(0,length(unique(Mass_Samples_accCodes$Serotype)))
Sero_freq_2 <- rep(0,length(unique(Mass_Samples_accCodes$Serotype)))
Sero_freq_3 <- rep(0,length(unique(Mass_Samples_accCodes$Serotype)))
for (i in 1:length(unique(Mass_Samples_accCodes$Serotype))){
Sero_freq_1[i] <- length(which(Mass_Samples_accCodes[which(Mass_Samples_accCodes$Serotype==unique(Mass_Samples_accCodes$Serotype)[i]),]$"Year of Isolation"==2001))
Sero_freq_2[i] <- length(which(Mass_Samples_accCodes[which(Mass_Samples_accCodes$Serotype==unique(Mass_Samples_accCodes$Serotype)[i]),]$"Year of Isolation"==2004))
Sero_freq_3[i] <- length(which(Mass_Samples_accCodes[which(Mass_Samples_accCodes$Serotype==unique(Mass_Samples_accCodes$Serotype)[i]),]$"Year of Isolation"==2007))
}
```{r}
#save sequence cluster frequencies
#saveRDS(Sero_freq_1, file = "Sero_freq_1.rds")
#saveRDS(Sero_freq_2, file = "Sero_freq_2.rds")
#saveRDS(Sero_freq_3, file = "Sero_freq_3.rds")
```
saveRDS(Sero_freq_1, file = "Sero_freq_1.rds")
saveRDS(Sero_freq_2, file = "Sero_freq_2.rds")
saveRDS(Sero_freq_3, file = "Sero_freq_3.rds")
### create initial population that is based on the 2001 data set but not an exact sampling from it
# but a Poisson process
Sero_expand_factor <- 15000 / sum(Sero_freq_1)
exp_noise <- 10
Sero_model_start_pop <- (sapply((Sero_freq_1 + rexp(n = length(Sero_freq_1), rate = exp_noise)) * Sero_expand_factor, rpois, n=1))
# visual check for the "sampling"
plot(Sero_freq_1/sum(Sero_freq_1))
points(Sero_model_start_pop/sum(Sero_model_start_pop), col = "red")
# looks similar enough, I would say
```
saveRDS(Sero_model_start_pop, file = "Sero_model_start_pop.rds")
# reading in the gene presence absence matrix produced by ggCaller
FuncAnn_ggCaller_gene_presence_absence <- read.csv(paste(path_to_data, "Massachusetts_ggcaller/run_withFuncAnn/ggCaller_output/gene_presence_absence.csv", sep = ""), header=FALSE)
FuncAnnOnly_ggCaller <- data.frame(cbind(FuncAnn_ggCaller_gene_presence_absence[,3],rep(NA,length(FuncAnn_ggCaller_gene_presence_absence[,3]))))
FuncAnnOnly_ggCaller[1,2] <- "Functional Annotation"
library(readxl)
Annotation_IntermediateFreqGenes <- read_excel(paste(path_to_data, "Massachusetts_data_NickCroucher/SupplementaryDataPaper/IntermediateFreqGenesAnnotation.xlsx", sep = ""))
View(Annotation_IntermediateFreqGenes)
FuncAnn_dict <- Annotation_IntermediateFreqGenes$Annotation
names(FuncAnn_dict) <- Annotation_IntermediateFreqGenes$COG
FuncAnnOnly_ggCaller[2,1]
strsplit(strsplit(FuncAnnOnly_ggCaller[2,1],";")[[1]],"CLS")
iter <- 1
for (ggCaller_name in FuncAnnOnly_ggCaller$X1[-1]) {
iter <- iter + 1
ggCaller_anno <- ""
annotations <- strsplit(ggCaller_name,";")[[1]]
for (annots in annotations) {
CLSname <- strsplit(annots,"CLS")[[1]][2]
CLSname <- paste("CLS",CLSname,sep = "")
ggCaller_anno <- paste(ggCaller_anno, paste(FuncAnn_dict[CLSname],"; ",sep=""), sep = "")
}
print(ggCaller_anno)
FuncAnnOnly_ggCaller[iter,2] <- ggCaller_anno
}
