View(Nepal_ggCaller_intermed)
Nepal_ggCaller_intermed_consensus[,1] <- Nepal_ggCaller_intermed[,1]
#by year
Nepal_ggCaller_byYear_intermed_consensus <- vector(mode = "list", length = length(Nepal_time_points_selected))
for (i in 1:length(Nepal_time_points_selected)) {
Nepal_ggCaller_year <- data.frame(matrix(0, nrow = sum(Nepal_gene_filter)+1,ncol = no_Nepal_PP+1))
Nepal_ggCaller_year[1,-1] <- paste("SeqCl_",unique(Nepal_PP$Cluster),sep = "")
for (i in unique(Nepal_PP$Cluster)) {
Nepal_ggCaller_year[-1,i+1] <- apply(as.matrix(Nepal_ggCaller_byYear_intermed[[i]][-1,c(FALSE,Nepal_seq_clusters_dict[unlist(Nepal_ggCaller_byYear_intermed[[i]][1,-1])]==i)]), 1, cons_genomes)
}
Nepal_ggCaller_year[,1] <- Nepal_ggCaller_byYear_intermed[[i]][,1]
Nepal_ggCaller_byYear_intermed_consensus[[i]] <- Nepal_ggCaller_year
}
for (i in 1:length(Nepal_time_points_selected)) {
Nepal_ggCaller_year <- data.frame(matrix(0, nrow = sum(Nepal_gene_filter)+1,ncol = no_Nepal_PP+1))
Nepal_ggCaller_year[1,-1] <- paste("SeqCl_",unique(Nepal_PP$Cluster),sep = "")
for (j in unique(Nepal_PP$Cluster)) {
Nepal_ggCaller_year[-1,j+1] <- apply(as.matrix(Nepal_ggCaller_byYear_intermed[[i]][-1,c(FALSE,Nepal_seq_clusters_dict[unlist(Nepal_ggCaller_byYear_intermed[[i]][1,-1])]==j)]), 1, cons_genomes)
}
Nepal_ggCaller_year[,1] <- Nepal_ggCaller_byYear_intermed[[i]][,1]
Nepal_ggCaller_byYear_intermed_consensus[[i]] <- Nepal_ggCaller_year
}
Nepal_ggCaller_byYear_intermed_consensus[[5]]
Nepal_ggCaller_byYear_intermed_consensus[[1]]
View(Nepal_ggCaller_byYear_intermed_consensus[[1]])
View(intermed_gene_presence_absence_consensus_2001)
View(Nepal_meta_dataPP)
Nepal_meta_dataPP$Phenotypic_serotype
unique(Nepal_meta_dataPP$Phenotypic_serotype)
# create dictionary for VTs of the PCV10
# 1, 4, 5, 6b, 7f, 9V, 14, 18c, 19f and 23f serotypes (source: NCBI)
PCV10_VTs <- rep(0,length(unique(Nepal_meta_dataPP$Phenotypic_serotype)))
names(PCV10_VTs) <- unique(Nepal_meta_dataPP$Phenotypic_serotype)
PCV10_VTs[c("1","4","5","6B", "7F", "9V", "14", "18C", "19F", "23F")] <- 1
PCV10_VTs
no_Nepal_PP
# calculate Vaccine Type consensus for clusters
Nepal_VT <- rep(0, no_Nepal_PP)
Nepal_PP$Cluster == 1
Nepal_PP[Nepal_PP$Cluster == 1,"Taxon"]
Nepal_SeqToSero_dict <- Nepal_meta_dataPP$Phenotypic_serotype
names(Nepal_SeqToSero_dict) <- Nepal_meta_dataPP$Lane_id
Nepal_SeqToSero_dict
PCV10_VTs(Nepal_SeqToSero_dict(Nepal_PP[Nepal_PP$Cluster == 1,"Taxon"]))
# create dictionary for VTs of the PCV10
# 1, 4, 5, 6b, 7f, 9V, 14, 18c, 19f and 23f serotypes (source: NCBI)
PCV10_VTs <- rep(0,length(unique(Nepal_meta_dataPP$Phenotypic_serotype)))
names(PCV10_VTs) <- unique(Nepal_meta_dataPP$Phenotypic_serotype)
PCV10_VTs[c("1","4","5","6B", "7F", "9V", "14", "18C", "19F", "23F")] <- 1
PCV10_VTs[Nepal_SeqToSero_dict[Nepal_PP[Nepal_PP$Cluster == 1,"Taxon"]]]
Nepal_SeqToSero_dict[Nepal_PP[Nepal_PP$Cluster == i-1,"Taxon"]]
Nepal_SeqToSero_dict[Nepal_PP[Nepal_PP$Cluster == 1,"Taxon"]]
PCV10_VTs
unique(Nepal_meta_dataPP$Phenotypic_serotype))
unique(Nepal_meta_dataPP$Phenotypic_serotype)
replace("",c("abc","","c"),"12")
Nepal_meta_dataPP$Phenotypic_serotype[643]
Nepal_meta_dataPP$Phenotypic_serotype[646]
Nepal_meta_dataPP$Phenotypic_serotype["646"]
Nepal_meta_dataPP$Phenotypic_serotype["647"]
Nepal_meta_dataPP$Phenotypic_serotype[645]
Nepal_meta_dataPP$Phenotypic_serotype[644]
Nepal_meta_dataPP$Phenotypic_serotype[649]
Nepal_meta_dataPP$Phenotypic_serotype[654]
Nepal_meta_dataPP$Phenotypic_serotype[655]
Nepal_meta_dataPP$Phenotypic_serotype[656]
Nepal_meta_dataPP$Phenotypic_serotype[657]
Nepal_meta_dataPP$Phenotypic_serotype[647]
Nepal_meta_dataPP$Phenotypic_serotype[637]
Nepal_meta_dataPP$Phenotypic_serotype[640]
Nepal_meta_dataPP$Phenotypic_serotype[642]
Nepal_meta_dataPP$Phenotypic_serotype[632]
Nepal_meta_dataPP$Phenotypic_serotype[612]
Nepal_meta_dataPP$Phenotypic_serotype[610]
Nepal_meta_dataPP$Phenotypic_serotype[609]
Nepal_meta_dataPP$Phenotypic_serotype[600]
Nepal_meta_dataPP$Phenotypic_serotype[601]
Nepal_meta_dataPP$Phenotypic_serotype[602]
Nepal_meta_dataPP$Phenotypic_serotype[603]
Nepal_meta_dataPP$Phenotypic_serotype[590]
View(Nepal_meta_data)
Nepal_meta_data$Phenotypic_serotype[643]
is.na(Nepal_meta_data$Phenotypic_serotype[643])
Nepal_meta_data$Phenotypic_serotype[643]==""
Nepal_meta_data$Phenotypic_serotype[644]==""
for (i in 2:nrow(Nepal_meta_dataPP)) {
if (Nepal_meta_dataPP$Phenotypic_serotype[i] == "") {
Nepal_meta_dataPP$Phenotypic_serotype[i] <- "NT"
print("here")
}
}
saveRDS(Nepal_meta_dataPP, "Nepal_meta_dataPP.rds")
# create dictionary for VTs of the PCV10
# 1, 4, 5, 6b, 7f, 9V, 14, 18c, 19f and 23f serotypes (source: NCBI)
PCV10_VTs <- rep(0,length(unique(Nepal_meta_dataPP$Phenotypic_serotype)))
names(PCV10_VTs) <- unique(Nepal_meta_dataPP$Phenotypic_serotype)
PCV10_VTs
Nepal_SeqToSero_dict <- Nepal_meta_dataPP$Phenotypic_serotype
names(Nepal_SeqToSero_dict) <- Nepal_meta_dataPP$Lane_id
# calculate Vaccine Type consensus for clusters
Nepal_VT <- rep(0, no_Nepal_PP)
for (i in 1:no_Nepal_PP){
Nepal_VT[i] <- ceiling(median(as.integer(PCV10_VTs[Nepal_SeqToSero_dict[Nepal_PP[Nepal_PP$Cluster == i-1,"Taxon"]]])))
}
Nepal_VT
PCV10_VTs[Nepal_SeqToSero_dict[Nepal_PP[Nepal_PP$Cluster == 1,"Taxon"]]]
names(PCV10_VTs) <- unique(Nepal_meta_dataPP$Phenotypic_serotype)
PCV10_VTs[c("1","4","5","6B", "7F", "9V", "14", "18C", "19F", "23F")] <- 1
Nepal_SeqToSero_dict <- Nepal_meta_dataPP$Phenotypic_serotype
names(Nepal_SeqToSero_dict) <- Nepal_meta_dataPP$Lane_id
# calculate Vaccine Type consensus for clusters
Nepal_VT <- rep(0, no_Nepal_PP)
for (i in 1:no_Nepal_PP){
Nepal_VT[i] <- ceiling(median(as.integer(PCV10_VTs[Nepal_SeqToSero_dict[Nepal_PP[Nepal_PP$Cluster == i-1,"Taxon"]]])))
}
Nepal_VT
for (i in 1:no_Nepal_PP){
Nepal_VT[i] <- ceiling(median(as.integer(PCV10_VTs[Nepal_SeqToSero_dict[Nepal_PP[Nepal_PP$Cluster == 1,"Taxon"]]])))
}
Nepal_VT
for (i in 1:no_Nepal_PP){
Nepal_VT[i] <- ceiling(median(as.integer(PCV10_VTs[Nepal_SeqToSero_dict[Nepal_PP[Nepal_PP$Cluster == i,"Taxon"]]])))
}
Nepal_VT
#save VTs
saveRDS(Nepal_VT, file = "Nepal_VT.rds")
Nepal_time_points_selected
Nepal_SeqToSero_dict[Nepal_PP[Nepal_PP$Cluster == 1,"Taxon"]]
Nepal_PP[Nepal_PP$Cluster == 1,"Taxon"]
Nepal_meta_IDtoInd["16288_7#16" ]
Nepal_meta_IDtoInd["16288_7#16"]
Nepal_PP[Nepal_PP$Cluster == 212,"Taxon"]
Nepal_meta_IDtoInd["16288_3#10"]
Nepal_meta_dataPP$Lane_id[9]
Nepal_meta_dataPP$Lane_id[932]
rownames(Nepal_meta_dataPP) <- 1:nrow(Nepal_meta_dataPP)
Nepal_meta_IDtoIndPP <- 1:nrow(Nepal_meta_dataPP)
names(Nepal_meta_IDtoIndPP) <- Nepal_meta_dataPP$Lane_id
Nepal_PP[Nepal_PP$Cluster == 1,"Taxon"]
Nepal_meta_IDtoIndPP[Nepal_PP[Nepal_PP$Cluster == 1,"Taxon"]]
Nepal_meta_dataPP[Nepal_meta_IDtoIndPP[Nepal_PP[Nepal_PP$Cluster == 1,"Taxon"]],]$"Year of Isolation"
Nepal_meta_IDtoIndPP[Nepal_PP[Nepal_PP$Cluster == 1,"Taxon"]]
unlist(Nepal_meta_IDtoIndPP[Nepal_PP[Nepal_PP$Cluster == 1,"Taxon"]])
Nepal_meta_dataPP[Nepal_meta_IDtoIndPP[Nepal_PP[Nepal_PP$Cluster == i,"Taxon"]],]
Nepal_meta_dataPP[Nepal_meta_IDtoIndPP[Nepal_PP[Nepal_PP$Cluster == i,"Taxon"]],]$Year
Nepal_meta_dataPP[Nepal_meta_IDtoIndPP[Nepal_PP[Nepal_PP$Cluster == 1,"Taxon"]],]$Year
Nepal_cluster_freqs <- vector(mode = "list", length = length(Nepal_time_points_selected))
for(j in 1:length(Nepal_time_points_selected)){
Nepal_cluster_freqs[[j]] <- rep(0, no_Nepal_PP)
for (i in 1:no_Nepal_PP){
Nepal_cluster_freqs[[j]] <- length(which(Nepal_meta_dataPP[Nepal_meta_IDtoIndPP[Nepal_PP[Nepal_PP$Cluster == i,"Taxon"]],]$Year==Nepal_time_points_selected[j]))
}
}
Nepal_cluster_freqs[[1]]
Nepal_cluster_freqs[[2]]
Nepal_cluster_freqs <- vector(mode = "list", length = length(Nepal_time_points_selected))
for(j in 1:length(Nepal_time_points_selected)){
Nepal_cluster_freqs[[j]] <- rep(0, no_Nepal_PP)
for (i in 1:no_Nepal_PP){
Nepal_cluster_freqs[[j]][i] <- length(which(Nepal_meta_dataPP[Nepal_meta_IDtoIndPP[Nepal_PP[Nepal_PP$Cluster == i,"Taxon"]],]$Year==Nepal_time_points_selected[j]))
}
}
Nepal_cluster_freqs[[2]]
Nepal_cluster_freqs[[1]]
length(Nepal_cluster_freqs[[1]])
sum(Nepal_cluster_freqs)
sum(Nepal_cluster_freqs[[1:length(Nepal_time_points_selected)]])
length(Nepal_time_points_selected)
sum(Nepal_cluster_freqs[[1]] + Nepal_cluster_freqs[[2]] + Nepal_cluster_freqs[[3]] + Nepal_cluster_freqs[[4]] + Nepal_cluster_freqs[[5]])
length(which(Nepal_meta_dataPP$Year==Nepal_time_points_selected[1]))
length(which(Nepal_meta_dataPP$Year==Nepal_time_points_selected[1])) + length(which(Nepal_meta_dataPP$Year==Nepal_time_points_selected[2])) + length(which(Nepal_meta_dataPP$Year==Nepal_time_points_selected[3])) + length(which(Nepal_meta_dataPP$Year==Nepal_time_points_selected[4])) + length(which(Nepal_meta_dataPP$Year==Nepal_time_points_selected[5]))
### create initial population that is based on the first time point data set
# sample from it with an Poisson process
expand_factor <- 15000 / sum(Nepal_cluster_freqs[[1]])
exp_noise <- 10
Nepal_model_start_pop <- (sapply((Nepal_cluster_freqs[[1]] + rexp(n = length(Nepal_cluster_freqs[[1]]), rate = exp_noise)) * expand_factor, rpois, n=1))
# visual check for the "sampling"
plot(Nepal_cluster_freqs[[1]]/sum(Nepal_cluster_freqs[[1]]))
points(Nepal_model_start_pop/sum(Nepal_model_start_pop), col = "red")
install.packages("GA")
library(GA)
fitting_closure_fl <- function(all_other_params, data1, data2){
null_fit_dfoptim_fl <- function(fit_params){
rnd_vect_full <- fit_params
params$delta_bool = rnd_vect_full
WFmodel_ggCPP <- WF$new(pars = params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
#n_particles <- 10L
#n_times <- 73
#x <- array(NA, dim = c(WFmodel_ggCPP$info()$len, n_particles, n_times))
#for (t in seq_len(n_times)) {
#  x[ , , t] <- WFmodel_ggCPP$run(t)
#}
#time <- x[1, 1, ]
#x <- x[-1, , ]
simMeanggCPP2 <- rowMeans(WFmodel_ggCPP$run(36)[-1,])
simMeanggCPP3 <- rowMeans(WFmodel_ggCPP$run(72)[-1,])
- combined_compare(simMeanggCPP2,data1) - combined_compare(simMeanggCPP3,data2)
#- combined_compare(x[,1,37],data1) - combined_compare(x[,1,73],data2)
}
}
ga_fit_FindGenes_ggCPP <- fitting_closure_fl(FindGenes_ggCPP_params, PP_mass_cluster_freq_2, PP_mass_cluster_freq_3)
best_best_vec
gann <- ga(type = "permutation", fitness = ga_fit_FindGenes_ggCPP, lower = 1, upper = length(best_best_vec),
seed = 123, elitism = 50, maxiter = 30, popSize = 300, run = 30, parallel = parallel::detectCores())
gann <- ga(type = "permutation", fitness = ga_fit_FindGenes_ggCPP, lower = 1, upper = length(best_best_vec),
seed = 123, elitism = 50, maxiter = 30, popSize = 300, run = 30)
### load model
WF <- odin.dust::odin_dust("NFDS_Model_FindGenes.R")
gann <- ga(type = "permutation", fitness = ga_fit_FindGenes_ggCPP, lower = 1, upper = length(best_best_vec),
seed = 123, elitism = 50, maxiter = 30, popSize = 300, run = 30)
### Likelihood
ll_pois <- function(obs, model) {
exp_noise <- 1e6
if (is.na(obs)) {
# Creates vector of zeros in ll with same length, if no data
ll_obs <- numeric(length(model))
} else {
lambda <- model + rexp(n = length(model), rate = exp_noise)
ll_obs <- dpois(x = obs, lambda = lambda, log = TRUE)
}
ll_obs
}
combined_compare <- function(state, observed, pars = NULL) {
result <- 0
#data_size <- sum(mass_cluster_freq_1)
#model_size = 15000
data_size <- sum(observed)
model_size = sum(state)
for (i in 1:length(observed)){
result <- result + ll_pois(observed[i], state[i]/model_size * data_size)
}
result
}
fitting_closure_fl <- function(all_other_params, data1, data2){
null_fit_dfoptim_fl <- function(fit_params){
rnd_vect_full <- fit_params
params$delta_bool = rnd_vect_full
WFmodel_ggCPP <- WF$new(pars = params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
#n_particles <- 10L
#n_times <- 73
#x <- array(NA, dim = c(WFmodel_ggCPP$info()$len, n_particles, n_times))
#for (t in seq_len(n_times)) {
#  x[ , , t] <- WFmodel_ggCPP$run(t)
#}
#time <- x[1, 1, ]
#x <- x[-1, , ]
simMeanggCPP2 <- rowMeans(WFmodel_ggCPP$run(36)[-1,])
simMeanggCPP3 <- rowMeans(WFmodel_ggCPP$run(72)[-1,])
- combined_compare(simMeanggCPP2,data1) - combined_compare(simMeanggCPP3,data2)
#- combined_compare(x[,1,37],data1) - combined_compare(x[,1,73],data2)
}
}
FindGenes_ggCPP_params <- list(dt = 1/36, species_no = PP_mass_clusters,  gene_no = nrow(ggCPP_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(PP_model_start_pop), Pop_eq = as.double(PP_model_start_pop), capacity = sum(PP_model_start_pop), Genotypes = ggCPP_intermed_gene_presence_absence_consensus_matrix, sigma_f = 0.3090376, sigma_w = 0, prop_f = 1, m = 0.03104461, migVec = PP_avg_cluster_freq, vaccTypes = PP_mass_VT, v = 0.15977862, vacc_time = 0)
ga_fit_FindGenes_ggCPP <- fitting_closure_fl(FindGenes_ggCPP_params, PP_mass_cluster_freq_2, PP_mass_cluster_freq_3)
gann <- ga(type = "permutation", fitness = ga_fit_FindGenes_ggCPP, lower = 1, upper = length(best_best_vec),
seed = 123, elitism = 50, maxiter = 30, popSize = 300, run = 30)
summary(gann)
- combined_compare(simMeanggCPP2,data1) - combined_compare(simMeanggCPP3,data2)
- combined_compare(simMeanggCPP2,PP_mass_cluster_freq_2) - combined_compare(simMeanggCPP3,PP_mass_cluster_freq_3)
fitting_closure_max <- function(all_other_params, data1, data2){
null_fit_dfoptim_fl <- function(fit_params){
rnd_vect_full <- fit_params
params$delta_bool = rnd_vect_full
WFmodel_ggCPP <- WF$new(pars = params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
#n_particles <- 10L
#n_times <- 73
#x <- array(NA, dim = c(WFmodel_ggCPP$info()$len, n_particles, n_times))
#for (t in seq_len(n_times)) {
#  x[ , , t] <- WFmodel_ggCPP$run(t)
#}
#time <- x[1, 1, ]
#x <- x[-1, , ]
simMeanggCPP2 <- rowMeans(WFmodel_ggCPP$run(36)[-1,])
simMeanggCPP3 <- rowMeans(WFmodel_ggCPP$run(72)[-1,])
combined_compare(simMeanggCPP2,data1) + combined_compare(simMeanggCPP3,data2)
#- combined_compare(x[,1,37],data1) - combined_compare(x[,1,73],data2)
}
}
ga_fit_FindGenes_ggCPP <- fitting_closure_max(FindGenes_ggCPP_params, PP_mass_cluster_freq_2, PP_mass_cluster_freq_3)
gann <- ga(type = "permutation", fitness = ga_fit_FindGenes_ggCPP, lower = 1, upper = length(best_best_vec),
seed = 123, elitism = 50, maxiter = 30, popSize = 300, run = 30)
ga_fit_FindGenes_ggCPP <- fitting_closure_max(FindGenes_ggCPP_params, PP_mass_cluster_freq_2, PP_mass_cluster_freq_3)
gann <- ga(type = "permutation", fitness = ga_fit_FindGenes_ggCPP, lower = rep(0, length(best_best_vec)), upper = rep(1,length(best_best_vec)),
seed = 123, elitism = 50, maxiter = 30, popSize = 300, run = 30)
length(best_best_vec)
ga_fit_FindGenes_ggCPP(best_best_vec)
gann <- ga(type = "real-valued", fitness = ga_fit_FindGenes_ggCPP, lower = rep(0, length(best_best_vec)), upper = rep(1,length(best_best_vec)),
seed = 123, elitism = 50, maxiter = 30, popSize = 300, run = 30)
gann <- ga(type = "real-valued", fitness = ga_fit_FindGenes_ggCPP, lower = rep(0, length(best_best_vec)), upper = rep(1,length(best_best_vec)),
seed = 123, elitism = 50, maxiter = 5, popSize = 300, run = 30)
sample(best_best_vec, 0.5*length(best_best_vec))
round(0.5 * length(best_best_vec))
my_crossover <- function(x1, x2){
x <- c(x1[1:round(0.5 * length(best_best_vec))], x2[(round(0.5 * length(best_best_vec))+1):length(best_best_vec)])
}
ga_fit_FindGenes_ggCPP <- fitting_closure_max(FindGenes_ggCPP_params, PP_mass_cluster_freq_2, PP_mass_cluster_freq_3)
gann <- ga(type = "real-valued", fitness = ga_fit_FindGenes_ggCPP, lower = rep(0, length(best_best_vec)), upper = rep(1,length(best_best_vec)),
seed = 123, elitism = 50, maxiter = 5, popSize = 300, run = 30, crossover = ga_spCrossover, mutation = gabin_raMutation)
rep(0, length(best_best_vec))
rep(1,length(best_best_vec))
gann <- ga(type = "binary", fitness = ga_fit_FindGenes_ggCPP, lower = rep(0, length(best_best_vec)), upper = rep(1,length(best_best_vec)),
seed = 123, elitism = 50, maxiter = 5, popSize = 300, run = 30, crossover = ga_spCrossover, mutation = gabin_raMutation)
gann <- ga(type = "real-valued", fitness = ga_fit_FindGenes_ggCPP, lower = rep(0, length(best_best_vec)), upper = rep(1,length(best_best_vec)),
seed = 123, elitism = 50, maxiter = 3, popSize = 300, run = 30)
# crossover = ga_spCrossover, mutation = gabin_raMutation
summary(gann)
gann2 <- ga(type = "permutation", fitness = ga_fit_FindGenes_ggCPP, lower = rep(0, length(best_best_vec)), upper = rep(1,length(best_best_vec)),
seed = 123, elitism = 50, maxiter = 3, popSize = 300, run = 30)
floor(c(1.1,2.1,3))
round(c(1.1,2.1,3))
decode2 <- function(x)
{
x <- round(x)
return(x)
}
fitting_closure_max_decode <- function(all_other_params, data1, data2){
null_fit_dfoptim_fl <- function(fit_params){
fit_params <- decode2(fit_params)
rnd_vect_full <- fit_params
params$delta_bool = rnd_vect_full
WFmodel_ggCPP <- WF$new(pars = params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
#n_particles <- 10L
#n_times <- 73
#x <- array(NA, dim = c(WFmodel_ggCPP$info()$len, n_particles, n_times))
#for (t in seq_len(n_times)) {
#  x[ , , t] <- WFmodel_ggCPP$run(t)
#}
#time <- x[1, 1, ]
#x <- x[-1, , ]
simMeanggCPP2 <- rowMeans(WFmodel_ggCPP$run(36)[-1,])
simMeanggCPP3 <- rowMeans(WFmodel_ggCPP$run(72)[-1,])
combined_compare(simMeanggCPP2,data1) + combined_compare(simMeanggCPP3,data2)
#- combined_compare(x[,1,37],data1) - combined_compare(x[,1,73],data2)
}
}
ga_fit_FindGenes_ggCPP <- fitting_closure_max_decode(FindGenes_ggCPP_params, PP_mass_cluster_freq_2, PP_mass_cluster_freq_3)
gann <- ga(type = "real-valued", fitness = ga_fit_FindGenes_ggCPP, lower = rep(0, length(best_best_vec)), upper = rep(1,length(best_best_vec)),
seed = 123, elitism = 50, maxiter = 3, popSize = 300, run = 30)
summary(gann)
t(apply(gann, 1, decode2))
t(apply(gann2@solution, 1, decode2))
t(apply(gann@solution, 1, decode2))
t(apply(gann@solution, 1, decode2))[1:10]
gann <- ga(type = "real-valued", fitness = ga_fit_FindGenes_ggCPP, lower = rep(0, length(best_best_vec)), upper = rep(1,length(best_best_vec)),
seed = 123, elitism = 50, maxiter = 10, popSize = 300, run = 30)
summary(gann)
ga_fit_FindGenes_ggCPP(gann@solution)
gann@solution
unlist(gann@solution)
as.vector(gann@solution)
ga_fit_FindGenes_ggCPP(as.vector(gann@solution))
ga_fit_FindGenes_ggCPP(as.vector(t(apply(gann@solution, 1, decode2))))
min(as.vector(gann@solution))
max(as.vector(gann@solution))
gann <- ga(type = "real-valued", fitness = ga_fit_FindGenes_ggCPP, lower = rep(0, length(best_best_vec)), upper = rep(1,length(best_best_vec)),
seed = 123, elitism = 50, maxiter = 20, popSize = 300, run = 30)
summary(gann)
unlist(t(apply(gann@solution, 1, decode2)))
as.vector(t(apply(gann@solution, 1, decode2)))
sum(as.vector(t(apply(gann@solution, 1, decode2))))/length(best_best_vec)
plot(as.vector(t(apply(gann@solution, 1, decode2))))
plot(as.vector(gann@solution))
plot(sort(as.vector(gann@solution)))
ga_fit_FindGenes_ggCPP(as.vector(gann@solution))
ga_fit_FindGenes_ggCPP(as.vector(t(apply(gann@solution, 1, decode2))))
ga_fit_FindGenes_ggCPP <- fitting_closure_max(FindGenes_ggCPP_params, PP_mass_cluster_freq_2, PP_mass_cluster_freq_3)
ga_fit_FindGenes_ggCPP(as.vector(gann@solution))
ga_fit_FindGenes_ggCPP_dec <- fitting_closure_max_decode(FindGenes_ggCPP_params, PP_mass_cluster_freq_2, PP_mass_cluster_freq_3)
gann <- ga(type = "real-valued", fitness = ga_fit_FindGenes_ggCPP_dec, lower = rep(0, length(best_best_vec)), upper = rep(1,length(best_best_vec)),
seed = 123, elitism = 50, maxiter = 30, popSize = 300, run = 30)
gann <- ga(type = "real-valued", fitness = ga_fit_FindGenes_ggCPP_dec, lower = rep(0, length(best_best_vec)), upper = rep(1,length(best_best_vec)),
seed = 123, elitism = 50, maxiter = 50, popSize = 400, run = 30)
summary(gann)
as.vector(t(apply(gann@solution, 1, decode2)))
sum(as.vector(t(apply(gann@solution, 1, decode2))))/length(best_best_vec)
saveRDS(gann,"gann.rds")
# all values between 0.3 and 0.65
plot(as.vector(gann@solution))
plot(sort(as.vector(gann@solution)))
summary(gann)
# import data
seq_clusters <- readRDS("PopPUNK_clusters.rds")
intermed_gene_presence_absence_consensus <- readRDS(file = "ggCPP_intermed_gene_presence_absence_consensus.rds")
intermed_gene_presence_absence_consensus_matrix <- sapply(intermed_gene_presence_absence_consensus[-1,-1],as.double)
model_start_pop <- readRDS(file = "PP_model_start_pop.rds")
#delta_ranking <- readRDS(file = "ggC_delta_ranking.rds")
mass_cluster_freq_1 <- readRDS(file = "PP_mass_cluster_freq_1.rds")
mass_cluster_freq_2 <- readRDS(file = "PP_mass_cluster_freq_2.rds")
mass_cluster_freq_3 <- readRDS(file = "PP_mass_cluster_freq_3.rds")
mass_VT <- readRDS(file = "PP_mass_VT.rds")
mass_clusters <- length(unique(seq_clusters$Cluster))
avg_cluster_freq <- rep(1/mass_clusters, mass_clusters)
output_filename <- "ggCaller_PopPUNK"
FindGenes_ggCPP_params <- list(dt = 1/36, species_no = mass_clusters,  gene_no = nrow(intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(model_start_pop), Pop_eq = as.double(model_start_pop), capacity = sum(model_start_pop), Genotypes = intermed_gene_presence_absence_consensus_matrix, sigma_f = 0.3090376, sigma_w = 0, prop_f = 1, m = 0.03104461, migVec = avg_cluster_freq, vaccTypes = mass_VT, v = 0.15977862, vacc_time = 0)
ll_pois <- function(obs, model) {
exp_noise <- 1e6
if (is.na(obs)) {
# Creates vector of zeros in ll with same length, if no data
ll_obs <- numeric(length(model))
} else {
lambda <- model + rexp(n = length(model), rate = exp_noise)
ll_obs <- dpois(x = obs, lambda = lambda, log = TRUE)
}
ll_obs
}
combined_compare <- function(state, observed, pars = NULL) {
result <- 0
#data_size <- sum(mass_cluster_freq_1)
#model_size = 15000
data_size <- sum(observed)
model_size = sum(state)
for (i in 1:length(observed)){
result <- result + ll_pois(observed[i], state[i]/model_size * data_size)
}
result
}
### load model
WF <- odin.dust::odin_dust("NFDS_Model_FindGenes.R")
library(GA)
decode2 <- function(x)
{
x <- round(x)
return(x)
}
fitting_closure_max_decode <- function(all_other_params, data1, data2){
null_fit_dfoptim_fl <- function(fit_params){
fit_params <- decode2(fit_params)
rnd_vect_full <- fit_params
params$delta_bool = rnd_vect_full
WFmodel_ggCPP <- WF$new(pars = params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
#n_particles <- 10L
#n_times <- 73
#x <- array(NA, dim = c(WFmodel_ggCPP$info()$len, n_particles, n_times))
#for (t in seq_len(n_times)) {
#  x[ , , t] <- WFmodel_ggCPP$run(t)
#}
#time <- x[1, 1, ]
#x <- x[-1, , ]
simMeanggCPP2 <- rowMeans(WFmodel_ggCPP$run(36)[-1,])
simMeanggCPP3 <- rowMeans(WFmodel_ggCPP$run(72)[-1,])
combined_compare(simMeanggCPP2,data1) + combined_compare(simMeanggCPP3,data2)
#- combined_compare(x[,1,37],data1) - combined_compare(x[,1,73],data2)
}
}
gann_test <- readRDS("gann.rds")
gann_test@solution
all_other_params
FindGenes_ggCPP_params
FindGenes_ggCPP_params$delta <- 0
# path to results:
results_path_22 <- "/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_05_2/"
# path to results:
results_path_22 <- "/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_05_22/"
ga_results <- readRDs(paste(results_path_22, "FindGenesGA_results.rds"))
ga_results <- readRDS(paste(results_path_22, "FindGenesGA_results.rds"))
ga_results <- readRDS(paste(results_path_22, "FindGenesGA_results.rds",sep = ""))
summary(ga_results)
as.vector(t(apply(ga_results@solution, 1, decode2)))
sum(as.vector(t(apply(ga_results@solution, 1, decode2))))/length(best_best_vec)
# all values between 0.3 and 0.65
plot(as.vector(ga_results@solution))
plot(sort(as.vector(ga_results@solution)))
plot((as.vector(ga_results@solution))[delta_ranking3])
plot((as.vector(ga_results@solution))[[names(sort(ggCPP_delta_data3))]])
plot((as.vector(ga_results@solution))[[names(sort(ggC_delta_data3))]])
plot((as.vector(ga_results@solution))[names(sort(ggC_delta_data3))])
names(sort(ggC_delta_data3))
length(names(sort(ggC_delta_data3)))
length(as.vector(ga_results@solution)
)
max(as.vector(ga_results@solution)
)
plot((as.vector(ga_results@solution))[names(sort(ggC_delta_data3))], ylim = c(0,1))
as.vector(ga_results@solution))[1:10]
as.vector(ga_results@solution)[1:10]
(as.vector(ga_results@solution))[1:10]
plot((as.vector(ga_results@solution))[as.integer(names(sort(ggC_delta_data3)))], ylim = c(0,1))
as.integer(names(sort(ggC_delta_data3)))
(as.vector(ga_results@solution))[as.integer(names(sort(ggC_delta_data3)))]
(as.vector(ga_results@solution))[1000:1200]
ga_results_dict <- as.vector(ga_results@solution)
names(ga_results_dict) <- 1:length(as.vector(ga_results@solution))
plot((ga_results_dict)[(names(sort(ggC_delta_data3)))], ylim = c(0,1))
(ga_results_dict)[(names(sort(ggC_delta_data3)))]
(ga_results_dict)[(names(sort(ggC_delta_data3)))]
names(sort(ggC_delta_data3))
ggC_delta_data3
ggC_delta_data3_newNames <- ggC_delta_data3
names(ggC_delta_data3_newNames) <- 1:length(ggC_delta_data3)
plot((ga_results_dict)[(names(sort(ggC_delta_data3_newNames)))], ylim = c(0,1))
plot((ga_results_dict)[(names(sort(ggC_delta_data3_newNames)))])
plot(sort(as.vector(ga_results@solution)))
