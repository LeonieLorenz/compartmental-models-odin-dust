points(0+ ((i-1)), sim_ggCPP2[1,i]/sum(sim_ggCPP2[,i]), col = viridis(218)[i], cex = 1.5)
}
points(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[1],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[1], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[1]), pch = 19, col = "#E69F00")
points(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[1],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[1], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[1]), pch = 19, col = "black")
points(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[1],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[1], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[1]), pch = 4, col = "black")
plot(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[1],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[1], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[1]), pch = 19, col = "#E69F00", ylim = c(0, 0.2), xlim = c(0, 220))
for (i in 1:218) {
points(0+ ((i-1)), sim_ggCPP2[1,i]/sum(sim_ggCPP2[,i]), col = viridis(218)[i], cex = 1.5)
}
points(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[1],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[1], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[1]), pch = 4, col = "black")
for (j in 1:mass_clusters) {
plot(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[j],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[j], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[j]), pch = 19, col = "#E69F00", ylim = c(0, 0.2), xlim = c(0, 220))
for (i in 1:218) {
points(0+ ((i-1)), sim_ggCPP2[j,i]/sum(sim_ggCPP2[,i]), col = viridis(218)[i], cex = 1.5)
}
points(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[j],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[j], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[j]), pch = 4, col = "black")
}
for (j in 1:2) {
loc <- "/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_11_06/TimeTrajMass/"
file_name <- paste("Cluster", as.character(j), ".pdf", sep = "")
pdf(file = paste(loc,file_name,sep = ""),   # The directory you want to save the file in
width = 6, # The width of the plot in inches
height = 12)
plot(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[j],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[j], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[j]), pch = 19, col = "#E69F00", ylim = c(0, 0.2), xlim = c(0, 220))
for (i in 1:218) {
points(0+ ((i-1)), sim_ggCPP2[j,i]/sum(sim_ggCPP2[,i]), col = viridis(218)[i], cex = 1.5)
}
points(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[j],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[j], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[j]), pch = 4, col = "black")
dev.off()
}
for (j in 1:2) {
loc <- "/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_11_06/TimeTrajMass/"
file_name <- paste("Cluster", as.character(j), ".pdf", sep = "")
pdf(file = paste(loc,file_name,sep = ""),   # The directory you want to save the file in
width = 12, # The width of the plot in inches
height = 6)
plot(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[j],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[j], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[j]), pch = 19, col = "#E69F00", ylim = c(0, 0.2), xlim = c(0, 220))
for (i in 1:218) {
points(0+ ((i-1)), sim_ggCPP2[j,i]/sum(sim_ggCPP2[,i]), col = viridis(218)[i], cex = 1.5)
}
points(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[j],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[j], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[j]), pch = 4, col = "black")
dev.off()
}
for (j in 1:2) {
loc <- "/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_11_06/TimeTrajMass/"
file_name <- paste("Cluster", as.character(j), ".pdf", sep = "")
pdf(file = paste(loc,file_name,sep = ""),   # The directory you want to save the file in
width = 12, # The width of the plot in inches
height = 6)
plot(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[j],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[j], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[j]), pch = 4, col = "black", ylim = c(0, 0.2), xlim = c(0, 220))
for (i in 1:218) {
points(0+ ((i-1)), sim_ggCPP2[j,i]/sum(sim_ggCPP2[,i]), col = viridis(218)[i], cex = 1.5)
}
points(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[j],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[j], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[j]), pch = 4, col = "black")
legend(40, 0.2, legend = c("Model 0", "Model 36", "Model 72","Data 2001", "Data 2004", "Data 2007"), fill = c(viridis(218)[1], viridis(218)[37], viridis(218)[73], "black","black", "black"), cex = 2)
dev.off()
}
for (j in 1:2) {
loc <- "/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_11_06/TimeTrajMass/"
file_name <- paste("Cluster", as.character(j), ".pdf", sep = "")
pdf(file = paste(loc,file_name,sep = ""),   # The directory you want to save the file in
width = 12, # The width of the plot in inches
height = 6)
plot(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[j],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[j], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[j]), pch = 4, col = "#CC79A7", ylim = c(0, 0.2), xlim = c(0, 220))
for (i in 1:218) {
points(0+ ((i-1)), sim_ggCPP2[j,i]/sum(sim_ggCPP2[,i]), col = viridis(218)[i], cex = 1.5)
}
points(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[j],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[j], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[j]), pch = 4, col = "#CC79A7")
legend(40, 0.2, legend = c("Model 0", "Model 36", "Model 72","Data 2001", "Data 2004", "Data 2007"), fill = c(viridis(218)[1], viridis(218)[37], viridis(218)[73], "black","black", "black"), cex = 2)
dev.off()
}
for (j in 1:2) {
loc <- "/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_11_06/TimeTrajMass/"
file_name <- paste("Cluster", as.character(j), ".pdf", sep = "")
pdf(file = paste(loc,file_name,sep = ""),   # The directory you want to save the file in
width = 12, # The width of the plot in inches
height = 6)
plot(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[j],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[j], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[j]), pch = 23, col = "black", ylim = c(0, 0.2), xlim = c(0, 220))
for (i in 1:218) {
points(0+ ((i-1)), sim_ggCPP2[j,i]/sum(sim_ggCPP2[,i]), col = viridis(218)[i], cex = 1.5)
}
points(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[j],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[j], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[j]), pch = 23, col = "black")
legend(40, 0.2, legend = c("Model 0", "Model 36", "Model 72","Data 2001", "Data 2004", "Data 2007"), fill = c(viridis(218)[1], viridis(218)[37], viridis(218)[73], "black","black", "black"), cex = 2)
dev.off()
}
for (j in 1:2) {
loc <- "/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_11_06/TimeTrajMass/"
file_name <- paste("Cluster", as.character(j), ".pdf", sep = "")
pdf(file = paste(loc,file_name,sep = ""),   # The directory you want to save the file in
width = 12, # The width of the plot in inches
height = 6)
plot(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[j],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[j], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[j]), pch = 4, col = "black", ylim = c(0, 0.2), xlim = c(0, 220))
for (i in 1:218) {
points(0+ ((i-1)), sim_ggCPP2[j,i]/sum(sim_ggCPP2[,i]), col = viridis(218)[i], cex = 1.5, pch = 19)
}
points(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[j],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[j], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[j]), pch = 4, col = "black")
legend(40, 0.2, legend = c("Model 0", "Model 36", "Model 72","Data 2001", "Data 2004", "Data 2007"), fill = c(viridis(218)[1], viridis(218)[37], viridis(218)[73], "black","black", "black"), cex = 2)
dev.off()
}
for (j in 1:2) {
loc <- "/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_11_06/TimeTrajMass/"
file_name <- paste("Cluster", as.character(j), ".pdf", sep = "")
pdf(file = paste(loc,file_name,sep = ""),   # The directory you want to save the file in
width = 12, # The width of the plot in inches
height = 6)
plot(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[j],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[j], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[j]), pch = 4, col = "black", ylim = c(0, 0.2), xlim = c(0, 220))
for (i in 1:218) {
points(0+ ((i-1)), sim_ggCPP2[j,i]/sum(sim_ggCPP2[,i]), col = viridis(218)[i], cex = 1.5, pch = 19)
}
points(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[j],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[j], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[j]), pch = 4, col = "black", cex = 2)
legend(40, 0.2, legend = c("Model 0", "Model 36", "Model 72","Data 2001", "Data 2004", "Data 2007"), fill = c(viridis(218)[1], viridis(218)[37], viridis(218)[73], "black","black", "black"), cex = 2)
dev.off()
}
for (j in 1:2) {
loc <- "/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_11_06/TimeTrajMass/"
file_name <- paste("Cluster", as.character(j), ".pdf", sep = "")
pdf(file = paste(loc,file_name,sep = ""),   # The directory you want to save the file in
width = 12, # The width of the plot in inches
height = 6)
plot(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[j],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[j], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[j]), pch = 4, col = "red", ylim = c(0, 0.2), xlim = c(0, 220))
for (i in 1:218) {
points(0+ ((i-1)), sim_ggCPP2[j,i]/sum(sim_ggCPP2[,i]), col = viridis(218)[i], cex = 1.5, pch = 19)
}
points(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[j],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[j], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[j]), pch = 4, col = "red", cex = 2)
legend(40, 0.2, legend = c("Model 0", "Model 36", "Model 72","Data 2001", "Data 2004", "Data 2007"), fill = c(viridis(218)[1], viridis(218)[37], viridis(218)[73], "black","black", "black"), cex = 2)
dev.off()
}
for (j in 1:mass_clusters) {
loc <- "/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_11_06/TimeTrajMass/"
file_name <- paste("Cluster", as.character(j), ".pdf", sep = "")
pdf(file = paste(loc,file_name,sep = ""),   # The directory you want to save the file in
width = 12, # The width of the plot in inches
height = 6)
plot(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[j],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[j], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[j]), pch = 4, col = "red", ylim = c(0, 0.2), xlim = c(0, 220))
for (i in 1:218) {
points(0+ ((i-1)), sim_ggCPP2[j,i]/sum(sim_ggCPP2[,i]), col = viridis(218)[i], cex = 1.5, pch = 19)
}
points(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[j],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[j], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[j]), pch = 4, col = "red", cex = 2)
legend(40, 0.2, legend = c("Model 0", "Model 36", "Model 72","Data 2001", "Data 2004", "Data 2007"), fill = c(viridis(218)[1], viridis(218)[37], viridis(218)[73], "black","black", "black"), cex = 2)
dev.off()
}
for (j in 1:mass_clusters) {
loc <- "/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_11_06/TimeTrajMass/"
file_name <- paste("Cluster", as.character(j), ".pdf", sep = "")
pdf(file = paste(loc,file_name,sep = ""),   # The directory you want to save the file in
width = 12, # The width of the plot in inches
height = 6)
plot(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[j],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[j], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[j]), pch = 4, col = "red", ylim = c(0, 0.2), xlim = c(0, 220))
for (i in 1:218) {
points(0+ ((i-1)), sim_ggCPP2[j,i]/sum(sim_ggCPP2[,i]), col = viridis(218)[i], cex = 1.5, pch = 19)
}
points(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[j],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[j], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[j]), pch = 4, col = "red", cex = 2)
#legend(40, 0.2, legend = c("Model 0", "Model 36", "Model 72","Data 2001", "Data 2004", "Data 2007"), fill = c(viridis(218)[1], viridis(218)[37], viridis(218)[73], "black","black", "black"), cex = 2)
dev.off()
}
plot(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[1],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[1], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[1]), pch = 19, col = "#E69F00", ylim = c(0, 0.2), xlim = c(0, 220))
for (i in 1:218) {
points(0+ ((i-1)), sim_ggCPP2[1,i]/sum(sim_ggCPP2[,i]), col = viridis(218)[i], cex = 1.5)
}
library("viridis")
plot(1:mass_clusters, mass_cluster_freq_1/sum(mass_cluster_freq_1), pch = 19, col = "#E69F00", ylim = c(0, 0.2))
for (i in 1:218) {
points((1:mass_clusters)+ ((i-1)*0.0045), sim_ggCPP2[,i]/sum(sim_ggCPP2[,i]), col = viridis(218)[i], cex = 1.5)
}
plot(1:mass_clusters, mass_cluster_freq_1/sum(mass_cluster_freq_1), pch = 19, col = viridis(218)[1], ylim = c(0, 0.2))
plot(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[j],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[j], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[j]), pch = 4, col = "red", ylim = c(0, 0.2), xlim = c(0, 220))
for (i in 1:218) {
points(0+ ((i-1)), sim_ggCPP2[j,i]/sum(sim_ggCPP2[,i]), col = viridis(218)[i], cex = 1.5, pch = 19)
}
plot(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[1],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[1], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[1]), pch = 4, col = viridis(218)[1], ylim = c(0, 0.2), xlim = c(0, 220))
for (j in 1:mass_clusters) {
#loc <- "/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_11_06/TimeTrajMass/"
#file_name <- paste("Cluster", as.character(j), ".pdf", sep = "")
#pdf(file = paste(loc,file_name,sep = ""),   # The directory you want to save the file in
#  width = 12, # The width of the plot in inches
#  height = 6)
for (i in 1:218) {
points(0+ ((i-1)), sim_ggCPP2[j,i]/sum(sim_ggCPP2[,i]), col = viridis(218)[j], cex = 1.5, pch = 19)
}
points(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[j],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[j], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[j]), pch = 4, col = viridis(218)[j], cex = 2)
#legend(40, 0.2, legend = c("Model 0", "Model 36", "Model 72","Data 2001", "Data 2004", "Data 2007"), fill = c(viridis(218)[1], viridis(218)[37], viridis(218)[73], "black","black", "black"), cex = 2)
#dev.off()
}
mass_clusters
plot(1:mass_clusters, mass_cluster_freq_1/sum(mass_cluster_freq_1), pch = 19, col = viridis(mass_clusters)[1], ylim = c(0, 0.2))
plot(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[1],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[1], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[1]), pch = 4, col = viridis(mass_clusters)[1], ylim = c(0, 0.2), xlim = c(0, 220))
for (j in 1:mass_clusters) {
#loc <- "/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_11_06/TimeTrajMass/"
#file_name <- paste("Cluster", as.character(j), ".pdf", sep = "")
#pdf(file = paste(loc,file_name,sep = ""),   # The directory you want to save the file in
#  width = 12, # The width of the plot in inches
#  height = 6)
for (i in 1:218) {
points(0+ ((i-1)), sim_ggCPP2[j,i]/sum(sim_ggCPP2[,i]), col = viridis(mass_clusters)[j], cex = 1.5, pch = 19)
}
points(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[j],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[j], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[j]), pch = 4, col = viridis(mass_clusters)[j], cex = 2)
#legend(40, 0.2, legend = c("Model 0", "Model 36", "Model 72","Data 2001", "Data 2004", "Data 2007"), fill = c(viridis(218)[1], viridis(218)[37], viridis(218)[73], "black","black", "black"), cex = 2)
#dev.off()
}
plot(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[1],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[1], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[1]), pch = 4, col = viridis(mass_clusters)[1], ylim = c(0, 0.2), xlim = c(0, 220))
for (j in 1:mass_clusters) {
#loc <- "/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_11_06/TimeTrajMass/"
#file_name <- paste("Cluster", as.character(j), ".pdf", sep = "")
#pdf(file = paste(loc,file_name,sep = ""),   # The directory you want to save the file in
#  width = 12, # The width of the plot in inches
#  height = 6)
for (i in 1:218) {
lines(0+ ((i-1)), sim_ggCPP2[j,i]/sum(sim_ggCPP2[,i]), col = viridis(mass_clusters)[j], cex = 1.5, pch = 19)
}
points(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[j],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[j], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[j]), pch = 4, col = viridis(mass_clusters)[j], cex = 2)
#legend(40, 0.2, legend = c("Model 0", "Model 36", "Model 72","Data 2001", "Data 2004", "Data 2007"), fill = c(viridis(218)[1], viridis(218)[37], viridis(218)[73], "black","black", "black"), cex = 2)
#dev.off()
}
sim_ggCPP2[j,i]/sum(sim_ggCPP2[,i]
)
sim_ggCPP2[j,]/colSum(sim_ggCPP2)
sim_ggCPP2[j,]/colSums(sim_ggCPP2)
sim_ggCPP2[1,]/colSums(sim_ggCPP2)
sim_ggCPP2[1,1:218]/sum(sim_ggCPP2[,1:218])
sim_ggCPP2[1,1]/sum(sim_ggCPP2[,1])
sim_ggCPP2[1,218]/sum(sim_ggCPP2[,218])
plot(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[1],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[1], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[1]), pch = 4, col = viridis(mass_clusters)[1], ylim = c(0, 0.2), xlim = c(0, 220))
for (j in 1:mass_clusters) {
#loc <- "/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_11_06/TimeTrajMass/"
#file_name <- paste("Cluster", as.character(j), ".pdf", sep = "")
#pdf(file = paste(loc,file_name,sep = ""),   # The directory you want to save the file in
#  width = 12, # The width of the plot in inches
#  height = 6)
plot_vec <- rep(0, 218)
for (i in 1:218) {
plot_vec[i] <- sim_ggCPP2[j,i]/sum(sim_ggCPP2[,i])
#lines(0+ ((i-1)), sim_ggCPP2[j,i]/sum(sim_ggCPP2[,i]), col = viridis(mass_clusters)[j], cex = 1.5, pch = 19)
}
lines(plot_vec, col = viridis(mass_clusters)[j])
points(c(0,36,72), c((mass_cluster_freq_1/sum(mass_cluster_freq_1))[j],(mass_cluster_freq_2/sum(mass_cluster_freq_2))[j], (mass_cluster_freq_3/sum(mass_cluster_freq_3))[j]), pch = 4, col = viridis(mass_clusters)[j], cex = 2)
#legend(40, 0.2, legend = c("Model 0", "Model 36", "Model 72","Data 2001", "Data 2004", "Data 2007"), fill = c(viridis(218)[1], viridis(218)[37], viridis(218)[73], "black","black", "black"), cex = 2)
#dev.off()
}
### Loading packages
# install.packages("drat") # -- if you don't have drat installed
# drat:::add("ncov-ic")
# install.packages("odin.dust")
library(odin.dust)
#install.packages("mcstate")
library(mcstate)
#install.packages("mcstate")
library(mcstate)
library(coda)
# read in model from file
WF <- odin.dust::odin_dust("NFDS_Model_PPxSero.R")
# likelihood for fitting:
ll_pois <<- function(obs, model) {
exp_noise <- 1e6
if (is.na(obs)) {
# Creates vector of zeros in ll with same length, if no data
ll_obs <- numeric(length(model))
} else {
lambda <- model + rexp(n = length(model), rate = exp_noise)
ll_obs <- dpois(x = obs, lambda = lambda, log = TRUE)
}
ll_obs
}
combined_compare <- function(state, observed, pars = NULL) {
result <- 0
#data_size <- sum(unlist(observed))
data_size <- sum(unlist(observed[as.character(1:(length(unlist(observed))-4))]))
model_size = sum(unlist(state[-1, , drop = TRUE]))
exp_noise <- 1e6
data_vals <- unlist(observed[as.character(1:(length(unlist(observed))-4))])
#model_vals <- state[-1, , drop = TRUE]
model_vals <- rep(0, length(unlist(observed))-4)
data_missing <- FALSE
for (i in 1:(length(unlist(observed))-4)){
state_name <- paste("sum_clust", i, sep = "")
model_vals[i] <- state[state_name, , drop = TRUE]
if (is.na(observed[[as.character(i)]])) {
#Creates vector of zeros in ll with same length, if no data
#ll_obs <- numeric(length( state[state_name, , drop = TRUE]))
data_missing <- TRUE
}
}
models_vals_err <- model_vals + rexp(n = length(model_vals), rate = exp_noise)
if(data_missing){
ll_obs <- 0
}
else{
ll_obs <- dmultinom(x = (data_vals), prob = models_vals_err/model_size, log = TRUE)
}
result <- ll_obs
#for (i in 1:(length(unlist(observed))-4)){
#  state_name <- paste("sum_clust", i, sep = "")
#  if (is.na(observed[[as.character(i)]])) {
#    #Creates vector of zeros in ll with same length, if no data
#    ll_obs <- numeric(length( state[state_name, , drop = TRUE]))
#  } else {
#lambda <-  state[state_name, , drop = TRUE]/model_size * data_size + rexp(n = length( state[state_name, , drop = TRUE]/model_size * data_size), rate = exp_noise)
#ll_obs <- dpois(x = observed[[as.character(i)]], lambda = lambda, log = TRUE)
#    ll_obs <- dmultinom(x = (data_vals), prob = model_vals/model_size, log = TRUE)
#  }
#  result <- result + ll_obs
#}
result
}
seq_clusters <- readRDS("PopPUNK_clusters.rds")
sero_no = length(unique(seq_clusters$Serotype))
intermed_gene_presence_absence_consensus <- readRDS(file = "ggCPP_intermed_gene_presence_absence_consensus.rds")
intermed_gene_presence_absence_consensus_matrix <- sapply(intermed_gene_presence_absence_consensus[-1,-1],as.double)
#model_start_pop <- readRDS("PP_mass_cluster_freq_1_sero.rds")
#model_start_pop <- model_start_pop / 133 * 15708
model_start_pop <- readRDS("PPsero_startpop6.rds")
#model_start_pop <- readRDS("PP_mass_cluster_freq_1_sero.rds") # try using data directly
#model_start_pop <- readRDS(file = "PPsero_startpop4.rds")
#model_start_pop <- readRDS(file = "PPsero_startpop.rds")
delta_ranking <- readRDS(file = "ggC_delta_ranking.rds")
mass_cluster_freq_1 <- readRDS(file = "PP_mass_cluster_freq_1.rds")
mass_cluster_freq_2 <- readRDS(file = "PP_mass_cluster_freq_2.rds")
mass_cluster_freq_3 <- readRDS(file = "PP_mass_cluster_freq_3.rds")
#mass_VT <- readRDS(file = "SeroVT.rds")
mass_VT <- readRDS(file = "SeroVT.rds")
mass_clusters <- length(unique(seq_clusters$Cluster))
avg_cluster_freq <- readRDS(file = "PPsero_mig.rds")
dt <- 1/36
peripost_mass_cluster_freq <- data.frame("year" = c(1, 2), rbind(mass_cluster_freq_2, mass_cluster_freq_3))
names(peripost_mass_cluster_freq) <- c("year", as.character(1:mass_clusters))
vacc_time <- 0
output_filename <- "PPxSero_ggCaller_PopPUNK"
fitting_mass_data <- mcstate::particle_filter_data(data = peripost_mass_cluster_freq,
time = "year",
rate = 1 / dt,
initial_time = 0)
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
# Using MCMC to infer parameters
pmcmc_sigma_f <- mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0, max = 1)
#pmcmc_sigma_w <- 0
pmcmc_sigma_w <- -1000
pmcmc_prop_f <- mcstate::pmcmc_parameter("prop_f", 0.2, min = 0, max = 1)
pmcmc_m <- mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1)
pmcmc_v <- mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)
species_no <- mass_clusters
no_clusters <- mass_clusters
gene_no <- nrow(intermed_gene_presence_absence_consensus_matrix)
Pop_ini <- data.frame(model_start_pop)
Pop_eq <- rowSums(model_start_pop)
Genotypes <- intermed_gene_presence_absence_consensus_matrix
capacity <- sum(model_start_pop)
delta <- delta_ranking
vaccTypes <- mass_VT
migVec <- data.frame(avg_cluster_freq)
WF <- odin.dust::odin_dust("NFDS_Model_PPxSero.R")
WF <- odin.dust::odin_dust("NFDS_Model_PPxSero_5param.R")
WF <- odin.dust::odin_dust("NFDS_Model_PPxSero_5param.R")
WF <- odin.dust::odin_dust("NFDS_Model_PPxSero_5param.R")
complex_params = list(species_no = species_no, Pop_ini = Pop_ini, Pop_eq = Pop_eq, Genotypes = intermed_gene_presence_absence_consensus[-1,-1], capacity = capacity, delta = delta, vaccTypes = vaccTypes, gene_no = gene_no, vacc_time = vacc_time, dt = dt, migVec = (migVec), sero_no = sero_no)
make_transform <- function(m) {
function(theta) {
as_double_mtx <- function(x){
sapply(x,as.double)
}
c(lapply(m, as_double_mtx), as.list(theta))
}
}
proposal_matrix <- diag(0.1,5) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
index <- function(info) {
list(run = c(sum_clust = info$index$Pop_tot),
state = c(Pop = info$index$Pop))
}
#proposal_matrix <- diag(0.1,4) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
# here, all parameters are proposed independently.
# think about this, this might not actually be true
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(pmcmc_sigma_f, pmcmc_sigma_w, pmcmc_prop_f, pmcmc_m, pmcmc_v), proposal_matrix, transform)
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 01), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = -2), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("sigma_w", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("m", -4, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
proposal_matrix <- diag(c(exp(1), 0.1, exp(0.1), exp(1), 0.1))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", runif(n=1, min=-10, max=0), min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", runif(n=1, min=0, max=1), min = 0, max = 1), mcstate::pmcmc_parameter("m", runif(n=1, min=-10, max=0), min = -1000, max = 0), mcstate::pmcmc_parameter("v", runif(n=1, min=0, max=1), min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
proposal_matrix <- diag(c(exp(1), 0.1, exp(1), exp(1), 0.1))
proposal_matrix
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", runif(n=1, min=-10, max=0), min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", runif(n=1, min=0, max=1), min = 0, max = 1), mcstate::pmcmc_parameter("sigma_w", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("m", runif(n=1, min=-10, max=0), min = -1000, max = 0), mcstate::pmcmc_parameter("v", runif(n=1, min=0, max=1), min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars$initial()
#WF$public_methods$has_openmp()
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
index = index,
compare = combined_compare)
n_steps <- 5
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 1)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
n_steps <- 1000
n_steps <- 10
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains =4, n_workers = 4,
n_threads_total = 4)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run, burnin = 2, thin = 1)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
print(parameter_mean_hpd)
exp(-1.8125341)
exp(-7.9310292)
exp(-1.8125341) + exp(-7.9310292)
det_mcmc1 <- coda::as.mcmc(cbind(det_pmcmc_run$probabilities, det_pmcmc_run$pars))
print("det_mcmc_1 final log likelihood")
processed_chains$probabilities[nrow(processed_chains$probabilities),2]
print("det_mcmc_1 mean log likelihood")
mean(processed_chains$probabilities[,2])
det_proposal_matrix <- cov(processed_chains$pars)
det_mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", parameter_mean_hpd[1], min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", parameter_mean_hpd[2], min = 0, max = 1), mcstate::pmcmc_parameter("sigma_w", parameter_mean_hpd[3], min = -1000, max = 0),mcstate::pmcmc_parameter("m", parameter_mean_hpd[4], min = -1000, max = 0), mcstate::pmcmc_parameter("v", parameter_mean_hpd[5], min = 0, max = 1)), det_proposal_matrix, make_transform(complex_params))
det_mcmc_pars
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
index = index,
compare = combined_compare)
n_steps <- 5
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 1)
det_pmcmc_run <- mcstate::pmcmc(det_mcmc_pars, det_filter, control = control)
n_steps <- 2
n_burnin <- 0
n_steps <- 20
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 4, n_workers = 4, n_threads_total = 4)
det_pmcmc_run2 <- mcstate::pmcmc(det_mcmc_pars, det_filter, control = control)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run2, burnin = 2, thin = 1)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
print(parameter_mean_hpd)
det_mcmc2 <- coda::as.mcmc(cbind(det_pmcmc_run2$probabilities, det_pmcmc_run2$pars))
print("det_mcmc_2 final log likelihood")
processed_chains$probabilities[nrow(processed_chains$probabilities),2]
print("det_mcmc_2 mean log likelihood")
mean(processed_chains$probabilities[,2])
WF <- odin.dust::odin_dust("NFDS_Model_PPxSero_5param.R")
complex_params = list(species_no = species_no, Pop_ini = Pop_ini, Pop_eq = Pop_eq, Genotypes = intermed_gene_presence_absence_consensus[-1,-1], capacity = capacity, delta = delta, vaccTypes = vaccTypes, gene_no = gene_no, vacc_time = vacc_time, dt = dt, migVec = (migVec), sero_no = sero_no)
make_transform <- function(m) {
function(theta) {
as_double_mtx <- function(x){
sapply(x,as.double)
}
c(lapply(m, as_double_mtx), as.list(theta))
}
}
proposal_matrix <- diag(0.1,5) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
index <- function(info) {
list(run = c(sum_clust = info$index$Pop_tot),
state = c(Pop = info$index$Pop))
}
#proposal_matrix <- diag(0.1,4) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
# here, all parameters are proposed independently.
# think about this, this might not actually be true
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(pmcmc_sigma_f, pmcmc_sigma_w, pmcmc_prop_f, pmcmc_m, pmcmc_v), proposal_matrix, transform)
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 01), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = -2), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("sigma_w", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("m", -4, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
proposal_matrix <- diag(c(exp(1), 0.1, exp(1), exp(1), 0.1))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", runif(n=1, min=-10, max=0), min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", runif(n=1, min=0, max=1), min = 0, max = 1), mcstate::pmcmc_parameter("sigma_w", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("m", runif(n=1, min=-10, max=0), min = -1000, max = 0), mcstate::pmcmc_parameter("v", runif(n=1, min=0, max=1), min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars$initial()
#WF$public_methods$has_openmp()
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
index = index,
compare = combined_compare)
n_steps <- 5
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 1)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
n_steps <- 100
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains =4, n_workers = 4,
n_threads_total = 4)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run, burnin = 25, thin = 1)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
print(parameter_mean_hpd)
exp(-4.7920197 )
exp(-4.3048285)
