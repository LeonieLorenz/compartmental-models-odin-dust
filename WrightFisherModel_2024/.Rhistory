index = index,
compare = combined_compare,
n_threads = 8)
n_steps <- 2000
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
n_chains = 4, n_workers = worker_nodes,
n_threads_total = threads_total)
#control <- mcstate::pmcmc_control(
#  n_steps,
#  save_state = TRUE,
#  save_trajectories = TRUE,
#  progress = TRUE,
#  n_chains = 2)
stoch_pmcmc_run2 <- mcstate::pmcmc(det_mcmc_pars, filter, control = control)
par(mfrow = c(1,1))
stoch_mcmc2 <- coda::as.mcmc(cbind(stoch_pmcmc_run2$probabilities, stoch_pmcmc_run2$pars))
pdf(file = paste(output_filename,"stoch_mcmc2.pdf",sep = "_"),   # The directory you want to save the file in
width = 6, # The width of the plot in inches
height = 12)
plot(stoch_mcmc2)
dev.off()
processed_chains <- mcstate::pmcmc_thin(stoch_pmcmc_run2, burnin = 200, thin = 1)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
print(parameter_mean_hpd)
print("stoch_mcmc_2 final log likelihood")
print(processed_chains$probabilities[nrow(processed_chains$probabilities),2])
print("stoch_mcmc_2 mean log likelihood")
print(mean(processed_chains$probabilities[,2]))
saveRDS(stoch_pmcmc_run2, paste(output_filename, "_stoch_pmcmc_run2.rds", sep = ""))
}
WF <- odin.dust::odin_dust("NFDS_Model_PPxSero_2vacc_5param.R")
complex_params = list(species_no = species_no, Pop_ini = Pop_ini, Pop_eq = Pop_eq, Genotypes = intermed_gene_presence_absence_consensus[-1,-1], capacity = capacity, delta = delta, vaccTypes1 = vaccTypes1, vaccTypes2 = vaccTypes2, gene_no = gene_no, vacc_time1 = vacc_time1, vacc_time2 = vacc_time2
, dt = dt, migVec = (migVec), sero_no = sero_no)
make_transform <- function(m) {
function(theta) {
as_double_mtx <- function(x){
sapply(x,as.double)
}
c(lapply(m, as_double_mtx), as.list(theta))
}
}
proposal_matrix <- diag(0.1,5) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
index <- function(info) {
list(run = c(sum_clust = info$index$Pop_tot),
state = c(Pop = info$index$Pop))
}
#proposal_matrix <- diag(0.1,4) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
# here, all parameters are proposed independently.
# think about this, this might not actually be true
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(pmcmc_sigma_f, pmcmc_sigma_w, pmcmc_prop_f, pmcmc_m, pmcmc_v), proposal_matrix, transform)
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 01), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = -2), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("sigma_w", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("m", -4, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
proposal_matrix <- diag(c(exp(1), 0.1, exp(1), exp(1), 0.1))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", runif(n=1, min=-3.4, max=0), min = -3.5, max = 0), mcstate::pmcmc_parameter("prop_f", runif(n=1, min=0, max=1), min = 0, max = 1), mcstate::pmcmc_parameter("sigma_w", runif(n=1, min=-1000, max=-3.6), min = -1000, max = -3.5), mcstate::pmcmc_parameter("m", runif(n=1, min=-10, max=0), min = -1000, max = 0), mcstate::pmcmc_parameter("v", runif(n=1, min=0, max=1), min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars$initial()
#WF$public_methods$has_openmp()
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
index = index,
compare = combined_compare)
n_steps <- 5
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 1)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
n_steps <- 10
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains =4, n_workers = 4,
n_threads_total = 4)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run, burnin = 2, thin = 1)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
print(parameter_mean_hpd)
det_mcmc1 <- coda::as.mcmc(cbind(det_pmcmc_run$probabilities, det_pmcmc_run$pars))
print("det_mcmc_1 final log likelihood")
print(processed_chains$probabilities[nrow(processed_chains$probabilities),2])
print("det_mcmc_1 mean log likelihood")
mean(processed_chains$probabilities[,2])
mmseq_results_MassNavajo <- read.delim("~/Documents/PhD_Project/Data/Mapping_ggCaller/MMseqs2_results/mmseq_results_MassNavajo.m8", header=FALSE)
View(mmseq_results_MassNavajo)
# 05.12.2024
mmseq_results_FindNavajoInMass <- read.delim("~/Documents/PhD_Project/Data/Mapping_ggCaller/MMseqs2_results/run3/bestResultNavajoInMass.m8", header=FALSE)
View(mmseq_results_FindNavajoInMass)
mmseq_results_FindMassInNavajo <- read.delim("~/Documents/PhD_Project/Data/Mapping_ggCaller/MMseqs2_results/run3_FindMassInNavajo/bestResultMassInNavajo.m8", header=FALSE)
mmseq_results_FindMassInNavajo <- read.delim("~/Documents/PhD_Project/Data/Mapping_ggCaller/MMseqs2_results/run3_FindMassInNavajo/bestResultsMassInNavajo.m8", header=FALSE)
NavajoInMass_dict <- mmseq_results_FindNavajoInMass$V2
names(NavajoInMass_dict) <- mmseq_results_FindNavajoInMass$V1
MassInNavajo_dict <- mmseq_results_FindMassInNavajo$V2
MassInNavajo_dict <- mmseq_results_FindMassInNavajo$V2
names(MassInNavajo_dict) <- mmseq_results_FindMassInNavajo$V1
for (i in names(NavajoInMass_dict)){
print(i)
}
for (i in names(NavajoInMass_dict)){
val <- NavajoInMass_dict[i]
return_val <- MassInNavajo_dict[val]
if(i != return_val){
print("No!")
}
}
for (i in names(NavajoInMass_dict)){
val <- NavajoInMass_dict[i]
return_val <- MassInNavajo_dict[val]
if(i != return_val){
print(paste(i, " and ", return_val))
}
}
match_count <- 0
no_match_count <- 0
for (i in names(NavajoInMass_dict)){
val <- NavajoInMass_dict[i]
return_val <- MassInNavajo_dict[val]
if(i != return_val){
no_match_count <- no_match_count + 1
}
else{
match_count <- match_count + 1
}
}
no_match_count
match_count
match_count <- 0
no_match_count <- 0
for (i in 1:length(names(NavajoInMass_dict))){
name <- names(NavajoInMass_dict)[i]
val <- NavajoInMass_dict[name]
return_val <- MassInNavajo_dict[val]
if(name != return_val){
if(mmseq_results_FindNavajoInMass$V3[i]>0.9){
no_match_count <- no_match_count + 1
}
}
else{
match_count <- match_count + 1
}
}
no_match_count
match_count
match_count <- 0
no_match_count <- 0
for (i in 1:length(names(NavajoInMass_dict))){
name <- names(NavajoInMass_dict)[i]
val <- NavajoInMass_dict[name]
return_val <- MassInNavajo_dict[val]
if(name != return_val){
if(mmseq_results_FindNavajoInMass$V3[i]>0.95){
no_match_count <- no_match_count + 1
}
}
else{
match_count <- match_count + 1
}
}
no_match_count
match_count <- 0
no_match_count <- 0
for (i in 1:length(names(NavajoInMass_dict))){
name <- names(NavajoInMass_dict)[i]
val <- NavajoInMass_dict[name]
return_val <- MassInNavajo_dict[val]
if(name != return_val){
if(mmseq_results_FindNavajoInMass$V3[i]>0.99){
no_match_count <- no_match_count + 1
}
}
else{
match_count <- match_count + 1
}
}
no_match_count
match_count <- 0
no_match_count <- 0
for (i in 1:length(names(NavajoInMass_dict))){
name <- names(NavajoInMass_dict)[i]
val <- NavajoInMass_dict[name]
return_val <- MassInNavajo_dict[val]
if(name != return_val){
if(mmseq_results_FindNavajoInMass$V3[i]>0.99){
no_match_count <- no_match_count + 1
}
}
else{
if(mmseq_results_FindNavajoInMass$V3[i]>0.99){
match_count <- match_count + 1
}
}
}
match_count
match_count <- 0
no_match_count <- 0
for (i in 1:length(names(NavajoInMass_dict))){
name <- names(NavajoInMass_dict)[i]
val <- NavajoInMass_dict[name]
return_val <- MassInNavajo_dict[val]
if(name != return_val){
if(mmseq_results_FindNavajoInMass$V3[i]>0.9){
no_match_count <- no_match_count + 1
}
}
else{
if(mmseq_results_FindNavajoInMass$V3[i]>0.9){
match_count <- match_count + 1
}
}
}
match_count
no_match_count
match_count <- 0
no_match_count <- 0
for (i in 1:length(names(NavajoInMass_dict))){
name <- names(NavajoInMass_dict)[i]
val <- NavajoInMass_dict[name]
return_val <- MassInNavajo_dict[val]
if(name != return_val){
if(mmseq_results_FindNavajoInMass$V3[i]>0.95){
no_match_count <- no_match_count + 1
}
}
else{
if(mmseq_results_FindNavajoInMass$V3[i]>0.95){
match_count <- match_count + 1
}
}
}
no_match_count
match_count
match_count <- 0
no_match_count <- 0
for (i in 1:length(names(NavajoInMass_dict))){
name <- names(NavajoInMass_dict)[i]
val <- NavajoInMass_dict[name]
return_val <- MassInNavajo_dict[val]
if(name != return_val){
if(mmseq_results_FindNavajoInMass$V3[i]>0.99){
no_match_count <- no_match_count + 1
}
}
else{
if(mmseq_results_FindNavajoInMass$V3[i]>0.99){
match_count <- match_count + 1
}
}
}
match_count
match_count <- 0
no_match_count <- 0
for (i in 1:length(names(NavajoInMass_dict))){
name <- names(NavajoInMass_dict)[i]
val <- NavajoInMass_dict[name]
return_val <- MassInNavajo_dict[val]
if(name != return_val){
if(mmseq_results_FindNavajoInMass$V3[i]>0){
no_match_count <- no_match_count + 1
}
}
else{
if(mmseq_results_FindNavajoInMass$V3[i]>0){
match_count <- match_count + 1
}
}
}
no_match_count
match_count
3872 + 1343
# 5-parameter model
Mass_5param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_12_05/ModelComparison_Mass/PPxSero_ggCaller_PopPUNK_5param_det_pmcmc_run2.rds")
Mass_5param_mcmc2_probs <- coda::as.mcmc(cbind(Mass_5param_mcmc2$probabilities, Mass_5param_mcmc2$pars))
#coda::effectiveSize(Mass_5param_mcmc2_probs)
#summary(coda::as.mcmc(Mass_5param_mcmc2_probs))
Mass_likelihood_5param <- median(Mass_5param_mcmc2_probs[,"log_likelihood"])
#mean(Mass_5param_mcmc2_probs[,"log_likelihood"])
rm(Mass_5param_mcmc2)
Mass_likelihood_5param
lambda <- -2 * (Mass_likelihood_2param - Mass_likelihood_5param)
pchisq(lambda, 3,lower.tail = FALSE)
lambda <- -2 * (Mass_likelihood_3param - Mass_likelihood_5param)
pchisq(lambda, 2,lower.tail = FALSE)
lambda <- -2 * (Mass_likelihood_4param - Mass_likelihood_5param)
pchisq(lambda, 1,lower.tail = FALSE)
#this one does not exist yet:
# 5-parameter model
UK_5param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_12_05/ModelComparison_UK/UK_PPxSero_ggCaller_PopPUNK_5param_det_pmcmc_run2.rds")
UK_5param_mcmc2_probs <- coda::as.mcmc(cbind(UK_5param_mcmc2$probabilities, UK_5param_mcmc2$pars))
#coda::effectiveSize(UK_5param_mcmc2_probs)
#summary(coda::as.mcmc(UK_5param_mcmc2_probs))
UK_likelihood_5param <- median(UK_5param_mcmc2_probs[,"log_likelihood"])
#mean(UK_5param_mcmc2_probs[,"log_likelihood"])
rm(UK_5param_mcmc2)
UK_likelihood_5param
UK_likelihood_4param
UK_likelihood_3param
View(mmseq_results_FindNavajoInMass)
# Find intermediate frequency genes in 2001 data set
# compute gene frequencies
sum_as_int <- function(x){
sum(as.integer(x))
}
gene_freq_2001 <- rep(0, nrow(gene_presence_absence_2001)-1)
Mass_gene_cluster_reps <- read.delim("~/Documents/PhD_Project/Data/Mapping_ggCaller/Massachusetts/pangenome_reference.fa", header=FALSE)
View(Mass_gene_cluster_reps)
install.packages("Biostrings")
install.packages("baseq")
library(baseq)
fasta_df = read.fasta_to_df("~/Documents/PhD_Project/Data/Mapping_ggCaller/Massachusetts/pangenome_reference.fa")
View(fasta_df)
View(pangenome_reference.fa)
read.delim("~/Documents/PhD_Project/Data/Mapping_ggCaller/Massachusetts/pangenome_reference.fa", header=FALSE)
Mass_gene_cluster_rep <- read.delim("~/Documents/PhD_Project/Data/Mapping_ggCaller/Massachusetts/pangenome_reference.fa", header=FALSE)
View(Mass_gene_cluster_rep)
Mass_gene_cluster_rep_str <- paste(Mass_gene_cluster_rep, collapse = "")
head(Mass_gene_cluster_rep_str)
Mass_gene_cluster_rep[1,1]
Mass_gene_cluster_rep[2,1]
file_str <- paste(readLines("~/Documents/PhD_Project/Data/Mapping_ggCaller/Massachusetts/pangenome_reference.fa"), collapse="\n")
file_str[1:10]
file_str <- paste(readLines("~/Documents/PhD_Project/Data/Mapping_ggCaller/Massachusetts/pangenome_reference.fa"), collapse="")
file_str
Mass_gene_cluster_rep_str <- paste(readLines("~/Documents/PhD_Project/Data/Mapping_ggCaller/Massachusetts/pangenome_reference.fa"), collapse="")
Mass_gene_cluster_rep_str_split <- strsplit(Mass_gene_cluster_rep_str, ">")
head(Mass_gene_cluster_rep_str_split)
Mass_gene_cluster_rep_str <- paste(readLines("~/Documents/PhD_Project/Data/Mapping_ggCaller/Massachusetts/pangenome_reference.fa"), collapse="\n")
Mass_gene_cluster_rep_str_split <- strsplit(Mass_gene_cluster_rep_str, ">")
strsplit(Mass_gene_cluster_rep_str_split[1],"\n")
strsplit(Mass_gene_cluster_rep_str_split[1],"\n",fixed = TRUE)
strsplit(Mass_gene_cluster_rep_str_split[1],"\\n",fixed = TRUE)
strsplit(Mass_gene_cluster_rep_str_split[1],"\\\n",fixed = TRUE)
strsplit(Mass_gene_cluster_rep_str_split[1],"n",fixed = TRUE)
Mass_gene_cluster_rep_str_split[1]
length(Mass_gene_cluster_rep_str_split)
Mass_gene_cluster_rep_str_split[[1]][1]
Mass_gene_cluster_rep_str_split[1][[1]]
Mass_gene_cluster_rep_str_split[[1]][1]
Mass_gene_cluster_rep_str_split[[1]][2]
strsplit(Mass_gene_cluster_rep_str_split[[1]][2],"\n")
Mass_gene_cluster_rep_dict <- c()
for (i in 2:length(Mass_gene_cluster_rep_str_split[[1]])) {
local_split <- strsplit(Mass_gene_cluster_rep_str_split[[1]][i],"\n")
cluster_name <- paste(">",local_split[[1]][1], sep = "")
cluster_seq <- paste(local_split[[1]][-1], collapse = "")
Mass_gene_cluster_rep_dict[cluster_name] <- cluster_seq
}
Mass_gene_cluster_rep_dict[1]
fileConn<-file("~/Documents/PhD_Project/Data/Mapping_ggCaller/Massachusetts/pangenome_reference_filtered.fa")
writeLines(Mass_gene_cluster_rep_dict[1], fileConn)
close(fileConn)
# 06.12.2024
# after a short conversation with Sam: filter representatives first (by 5-95% intermed freq genes), then do mapping with mmseqs and then compare forward/backward search
# things that do no match at all (prob not under NFDS)
# try 98% amino acids sequence identity
# rep is longest member btw
library(stringr)
str_split_fixed(Mass_gene_cluster_rep_str_split[[1]][2],"\n",2)
Mass_gene_cluster_rep_dict <- c()
for (i in 2:length(Mass_gene_cluster_rep_str_split[[1]])) {
local_split <- str_split_fixed(Mass_gene_cluster_rep_str_split[[1]][i],"\n",2)
cluster_name <- paste(">",local_split[1,1], sep = "")
cluster_seq <- local_split[1,2]
Mass_gene_cluster_rep_dict[cluster_name] <- cluster_seq
}
Mass_gene_cluster_rep_dict[1]
fileConn<-file("~/Documents/PhD_Project/Data/Mapping_ggCaller/Massachusetts/pangenome_reference_filtered.fa")
writeLines(Mass_gene_cluster_rep_dict[1], fileConn)
close(fileConn)
head(gene_presence_absence_2001)
# read in gene presence absence matrix
gene_presence_absence <- readRDS(file = "gene_presence_absence.rds")
# create time-point specific gene presence absence matrices
Mass_year_dict <- c(rep(2001,length(Mass_Samples_accCodes[Mass_Samples_accCodes$`Year of Isolation`==2001,]$`Isolate Name`)),
rep(2004,length(Mass_Samples_accCodes[Mass_Samples_accCodes$`Year of Isolation`==2004,]$`Isolate Name`)),
rep(2007,length(Mass_Samples_accCodes[Mass_Samples_accCodes$`Year of Isolation`==2007,]$`Isolate Name`)))
names(Mass_year_dict) <- c(Mass_Samples_accCodes[Mass_Samples_accCodes$`Year of Isolation`==2001,]$`Isolate Name`, Mass_Samples_accCodes[Mass_Samples_accCodes$`Year of Isolation`==2004,]$`Isolate Name`, Mass_Samples_accCodes[Mass_Samples_accCodes$`Year of Isolation`==2007,]$`Isolate Name`)
Mass_Samples_accCodes <- readRDS("Mass_Samples_accCodes.rds")
# create time-point specific gene presence absence matrices
Mass_year_dict <- c(rep(2001,length(Mass_Samples_accCodes[Mass_Samples_accCodes$`Year of Isolation`==2001,]$`Isolate Name`)),
rep(2004,length(Mass_Samples_accCodes[Mass_Samples_accCodes$`Year of Isolation`==2004,]$`Isolate Name`)),
rep(2007,length(Mass_Samples_accCodes[Mass_Samples_accCodes$`Year of Isolation`==2007,]$`Isolate Name`)))
names(Mass_year_dict) <- c(Mass_Samples_accCodes[Mass_Samples_accCodes$`Year of Isolation`==2001,]$`Isolate Name`, Mass_Samples_accCodes[Mass_Samples_accCodes$`Year of Isolation`==2004,]$`Isolate Name`, Mass_Samples_accCodes[Mass_Samples_accCodes$`Year of Isolation`==2007,]$`Isolate Name`)
# empty gene presence absence matrix
gene_presence_absence_2001 <- data.frame(matrix(0, nrow = length(cls_files)+1, ncol = length(Mass_Samples_accCodes[Mass_Samples_accCodes$`Year of Isolation`==2001,]$`Isolate Name`)+1))
# list of input files
cls_files <- list.files(paste(path_to_data, "v2_Massachusetts_data_NickCroucher/gCOG_sequences", sep = ""), full.names = TRUE, recursive = FALSE)
# empty gene presence absence matrix
gene_presence_absence_2001 <- data.frame(matrix(0, nrow = length(cls_files)+1, ncol = length(Mass_Samples_accCodes[Mass_Samples_accCodes$`Year of Isolation`==2001,]$`Isolate Name`)+1))
gene_presence_absence_2001[1,-1] <- (Mass_Samples_accCodes[Mass_Samples_accCodes$`Year of Isolation`==2001,]$`Isolate Name`)
gene_presence_absence_2001[-1,1] <- gene_presence_absence[-1,1]
gene_presence_absence_2001[-1,-1] <- gene_presence_absence[-1,c(FALSE,Mass_year_dict[unlist(gene_presence_absence[1,-1])]==2001)]
gene_presence_absence_2004 <- data.frame(matrix(0, nrow = length(cls_files)+1, ncol = length(Mass_Samples_accCodes[Mass_Samples_accCodes$`Year of Isolation`==2004,]$`Isolate Name`)+1))
gene_presence_absence_2004[1,-1] <- (Mass_Samples_accCodes[Mass_Samples_accCodes$`Year of Isolation`==2004,]$`Isolate Name`)
gene_presence_absence_2004[-1,1] <- gene_presence_absence[-1,1]
gene_presence_absence_2004[-1,-1] <- gene_presence_absence[-1,c(FALSE,Mass_year_dict[unlist(gene_presence_absence[1,-1])]==2004)]
gene_presence_absence_2007 <- data.frame(matrix(0, nrow = length(cls_files)+1, ncol = length(Mass_Samples_accCodes[Mass_Samples_accCodes$`Year of Isolation`==2007,]$`Isolate Name`)+1))
gene_presence_absence_2007[1,-1] <- (Mass_Samples_accCodes[Mass_Samples_accCodes$`Year of Isolation`==2007,]$`Isolate Name`)
gene_presence_absence_2007[-1,1] <- gene_presence_absence[-1,1]
gene_presence_absence_2007[-1,-1] <- gene_presence_absence[-1,c(FALSE,Mass_year_dict[unlist(gene_presence_absence[1,-1])]==2007)]
# Find intermediate frequency genes in 2001 data set
# compute gene frequencies
sum_as_int <- function(x){
sum(as.integer(x))
}
gene_freq_2001 <- rep(0, nrow(gene_presence_absence_2001)-1)
gene_freq_2001 <- apply(gene_presence_absence_2001[-1,-1],1, sum_as_int)
gene_freq_2001 <- gene_freq_2001 / (length(gene_presence_absence_2001[1,-1]))
cog_filter <- as.integer(gene_freq_2001<=0.95 & gene_freq_2001>=0.05)
cog_filter
# Find intermediate frequency genes in 2001 data set
# compute gene frequencies
sum_as_int <- function(x){
sum(as.integer(x))
}
ggC_gene_freq_2001 <- rep(0, nrow(ggCaller_gene_presence_absence_2001)-1)
ggCaller_gene_presence_absence_2001 <- readRDS("ggCaller_gene_presence_absence_2001.rds")
ggC_gene_freq_2001 <- rep(0, nrow(ggCaller_gene_presence_absence_2001)-1)
ggC_gene_freq_2001 <- apply(ggCaller_gene_presence_absence_2001[-1,-1],1, sum_as_int)
ggC_gene_freq_2001 <- ggC_gene_freq_2001 / (length(ggCaller_gene_presence_absence_2001[1,-1]))
ggC_filter <- as.integer(ggC_gene_freq_2001<=0.95 & ggC_gene_freq_2001>=0.05)
View(ggCaller_gene_presence_absence_2001)
ggCaller_gene_presence_absence_2001[which(ggC_filter==1),1]
ggC_filter[1:10]
ggC_filter[1:20]
ggC_filter[1:30]
which(ggC_filter==1)
ggCaller_gene_presence_absence_2001[1684,1]
ggC_intermed_gene_names[1]
ggC_intermed_gene_names <- ggCaller_gene_presence_absence_2001[which(ggC_filter==1),1]
ggC_intermed_gene_names[1]
saveRDS(ggC_intermed_gene_names, file = "Mass_ggC_intermed_gene_names.rds")
Mass_ggC_intermed_gene_names <- readRDS(file = "Mass_ggC_intermed_gene_names.rds")
Mass_gene_cluster_rep_dict <- c()
for (i in 2:length(Mass_gene_cluster_rep_str_split[[1]])) {
local_split <- str_split_fixed(Mass_gene_cluster_rep_str_split[[1]][i],"\n",2)
#cluster_name <- paste(">",local_split[1,1], sep = "")
cluster_name <- local_split[1,1]
cluster_seq <- local_split[1,2]
Mass_gene_cluster_rep_dict[cluster_name] <- cluster_seq
}
fileConn<-file("~/Documents/PhD_Project/Data/Mapping_ggCaller/Massachusetts/pangenome_reference_filtered.fa")
Mass_ggC_intermed_gene_names <- readRDS(file = "Mass_ggC_intermed_gene_names.rds")
for (gene_name in Mass_ggC_intermed_gene_names) {
writeLines(paste(">", gene_name, "\n",Mass_gene_cluster_rep_dict[gene_name]), fileConn)
}
close(fileConn)
print_str <- ""
for (gene_name in Mass_ggC_intermed_gene_names) {
print_str <- paste(print_str, ">", gene_name, "\n",Mass_gene_cluster_rep_dict[gene_name])
}
fileConn<-file("~/Documents/PhD_Project/Data/Mapping_ggCaller/Massachusetts/pangenome_reference_filtered.fa")
writeLines(print_str, fileConn)
close(fileConn)
print_str <- ""
for (gene_name in Mass_ggC_intermed_gene_names) {
print_str <- paste(print_str, ">", gene_name, "\n",Mass_gene_cluster_rep_dict[gene_name], sep = "")
}
fileConn<-file("~/Documents/PhD_Project/Data/Mapping_ggCaller/Massachusetts/pangenome_reference_filtered.fa")
writeLines(print_str, fileConn)
close(fileConn)
length(Mass_ggC_intermed_gene_names)
# Null model
Navajo_2param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_12_05/ModelComparison_Navajo/Navajo_PPxSero_ggCaller_PopPUNK_Null_det_pmcmc_run2.rds")
# Null model
Navajo_2param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_12_05/ModelComparison_Navajo/Navajo_PPxSero2vacc_ggCaller_PopPUNK_Null_det_pmcmc_run2.rds")
Navajo_2param_mcmc2_probs <- coda::as.mcmc(cbind(Navajo_2param_mcmc2$probabilities, Navajo_2param_mcmc2$pars))
#coda::effectiveSize(Navajo_2param_mcmc2_probs)
#summary(coda::as.mcmc(Navajo_2param_mcmc2_probs))
Navajo_likelihood_2param <- median(Navajo_2param_mcmc2_probs[,"log_likelihood"])
#mean(Navajo_2param_mcmc2_probs[,"log_likelihood"])
rm(Navajo_2param_mcmc2)
Navajo_likelihood_2param
# 3-parameter model
Navajo_3param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_12_05/ModelComparison_Navajo/Navajo_PPxSero_ggCaller_PopPUNK_3param_det_pmcmc_run2.rds")
# 3-parameter model
Navajo_3param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_12_05/ModelComparison_Navajo/Navajo_PPxSero2vacc_ggCaller_PopPUNK_3param_det_pmcmc_run2.rds")
Navajo_3param_mcmc2_probs <- coda::as.mcmc(cbind(Navajo_3param_mcmc2$probabilities, Navajo_3param_mcmc2$pars))
#coda::effectiveSize(Navajo_3param_mcmc2_probs)
#summary(coda::as.mcmc(Navajo_3param_mcmc2_probs))
Navajo_likelihood_3param <- median(Navajo_3param_mcmc2_probs[,"log_likelihood"])
#mean(Navajo_3param_mcmc2_probs[,"log_likelihood"])
rm(Navajo_3param_mcmc2)
Navajo_likelihood_3param
# 4-parameter model
Navajo_4param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_12_05/ModelComparison_Navajo/Navajo_PPxSero2vacc_ggCaller_PopPUNK_4param_det_pmcmc_run2.rds")
Navajo_4param_mcmc2_probs <- coda::as.mcmc(cbind(Navajo_4param_mcmc2$probabilities, Navajo_4param_mcmc2$pars))
#coda::effectiveSize(Navajo_4param_mcmc2_probs)
#summary(coda::as.mcmc(Navajo_4param_mcmc2_probs))
Navajo_likelihood_4param <- median(Navajo_4param_mcmc2_probs[,"log_likelihood"])
#mean(Navajo_4param_mcmc2_probs[,"log_likelihood"])
rm(Navajo_4param_mcmc2)
Navajo_likelihood_4param
lambda <- -2 * (Navajo_likelihood_2param - Navajo_likelihood_3param)
pchisq(lambda, 1,lower.tail = FALSE)
lambda <- -2 * (Navajo_likelihood_2param - Navajo_likelihood_4param)
pchisq(lambda, 2,lower.tail = FALSE)
lambda <- -2 * (Navajo_likelihood_3param - Navajo_likelihood_4param)
pchisq(lambda, 1,lower.tail = FALSE)
lambda <- -2 * (Navajo_likelihood_3param - -611.0528)
pchisq(lambda, 1,lower.tail = FALSE)
