n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(WFmodel$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
combined_compare(x[,1,37],data1) + combined_compare(x[,1,73],data2)
}
}
ggCPP_params <- list(dt = 1/36, species_no = PP_mass_clusters,  gene_no = nrow(ggCPP_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(PP_model_start_pop), Pop_eq = as.double(PP_model_start_pop), capacity = sum(PP_model_start_pop), Genotypes = ggCPP_intermed_gene_presence_absence_consensus_matrix, delta = ggC_delta_ranking, migVec = PP_avg_cluster_freq, vaccTypes = PP_mass_VT, vacc_time = 0)
ggCPP_fitting <- NFDS_fitting_closure(ggCPP_params, PP_mass_cluster_freq_2, PP_mass_cluster_freq_3)
start_params <- c(0.15, 0.05, 0.25, 0.03, 0.05)
null_man_sa <- optim_sa(fun = ggCPP_fitting, start = start_params, maximization = TRUE, trace = TRUE,lower=c(0.05,0,0,0,0), upper=c(1,0.05,1,1,1), control = c(rf = 2, r = 0.8))
# install.packages("optimization")
library(optimization)
null_man_sa <- optim_sa(fun = ggCPP_fitting, start = start_params, maximization = TRUE, trace = TRUE,lower=c(0.05,0,0,0,0), upper=c(1,0.05,1,1,1), control = c(rf = 2, r = 0.8))
null_man_sa
null_man_sa <- optim_sa(fun = ggCPP_fitting, start = start_params, maximization = TRUE, trace = TRUE,lower=c(0.05,0,0,0,0), upper=c(1,0.05,1,1,1), control = c(rf = c(2,1,2,2,2), r = 0.6))
PP_mass_cluster_freq_1
View(PopPUNK_clusters)
mass_seq_freq_1 <- readRDS("mass_seq_freq_1.rds")
mass_seq_freq_2 <- readRDS("mass_seq_freq_2.rds")
mass_seq_freq_3 <- readRDS("mass_seq_freq_3.rds")
seq_model_start_pop <- readRDS("seq_model_start_pop.rds")
seq_model_start_pop_2 <- readRDS("seq_model_start_pop_2.rds")
mass_seq_VT <- readRDS("mass_seq_VT.rds")
mass_seq_freq_1
length(mass_seq_freq_1)
which(PopPUNK_clusters$Cluster==1)
PP_mass_clusters
mass_seq_freq_1[which(PopPUNK_clusters$Cluster==1)]
sum(mass_seq_freq_1[which(PopPUNK_clusters$Cluster==1)])
# summarize single-sequence clusters into PP clusters
sum_seq_clusters <- function(sequence_clust){
clustered_seqs <- rep(0, PP_mass_clusters)
for (i in 1:PP_mass_clusters) {
clustered_seqs[i] <- sum(sequence_clust[which(PopPUNK_clusters$Cluster==i)])
}
clustered_seqs
}
#PopPUNK_clusters
PP_combined_compare_616 <- function(state, observed, pars = NULL) {
result <- 0
data_size <- sum(observed)
model_size = sum(state)
# need to summarize the data and the observations into clusters
clustered_state <- sum_seq_clusters(state)
clustered_obs <- sum_seq_clusters(observed)
for (i in 1:length(clustered_obs)){
result <- result + ll_pois(clustered_obs[i], clustered_state[i]/model_size * data_size)
}
result
}
NFDS_fitting_closure_616 <- function(all_other_params, data1, data2){
fit_dfoptim <- function(fit_params){
params <- c(all_other_params, sigma_f = fit_params[1], sigma_w = fit_params[2], prop_f = fit_params[3], m = fit_params[4], v = fit_params[5])
WFmodel <- WF_nG_h_vP$new(pars = params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(WFmodel$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
PP_combined_compare_616(x[,1,37],data1) + PP_combined_compare_616(x[,1,73],data2)
}
}
ggCPP_params_616 <- list(dt = 1/36, species_no = mass_seqs,  gene_no = nrow(intermed_gene_presence_absence)-1, Pop_ini = as.double(seq_model_start_pop_2), Pop_eq = as.double(seq_model_start_pop_2), capacity = sum(seq_model_start_pop_2), Genotypes = intermed_gene_presence_absence_matrix, delta = delta_ranking, migVec = avg_mass_seqs, vaccTypes = as.double(mass_seq_VT), vacc_time = 0)
ggCPP_fitting_616 <- NFDS_fitting_closure_616(ggCPP_params_616, as.double(mass_seq_freq_2), as.double(mass_seq_freq_3))
start_params <- c(0.15, 0.05, 0.25, 0.03, 0.05)
null_man_optim_fit <- nmkb(start_params, ggCPP_fitting_616, lower=c(0.05,0,0,0,0), upper=c(1,0.05,1,1,1), control = c(maximize = TRUE))
mass_seq_freq_1 <- readRDS("mass_seq_freq_1.rds")
mass_seq_freq_2 <- readRDS("mass_seq_freq_2.rds")
mass_seq_freq_3 <- readRDS("mass_seq_freq_3.rds")
seq_model_start_pop <- readRDS("seq_model_start_pop.rds")
seq_model_start_pop_2 <- readRDS("seq_model_start_pop_2.rds")
mass_seq_VT <- readRDS("mass_seq_VT.rds")
intermed_gene_presence_absence <- readRDS("intermed_gene_presence_absence.rds")
intermed_gene_presence_absence_matrix <- sapply(intermed_gene_presence_absence[-1,-1],as.double)
mass_seqs <- nrow(Mass_Samples_accCodes)
avg_mass_seqs <- rep(1/mass_seqs, mass_seqs)
seq_params_n_vP <- list(dt = 1/36, species_no = mass_seqs,  gene_no = nrow(intermed_gene_presence_absence)-1, Pop_ini = as.double(seq_model_start_pop), Pop_eq = as.double(seq_model_start_pop), capacity = sum(seq_model_start_pop), Genotypes = intermed_gene_presence_absence_matrix, sigma_f = 0.2193191513, sigma_w = 0.0007111157, prop_f = 0.3735531590, delta = delta_ranking, m = 0.0052207254, migVec = avg_mass_seqs, vaccTypes = mass_seq_VT, v = 0.1321567425, vacc_time = 0)
seq_WFmodel <- WF_nG_h_vP$new(pars = seq_params_n_vP,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
mass_seq_freq_1 <- readRDS("mass_seq_freq_1.rds")
mass_seq_freq_2 <- readRDS("mass_seq_freq_2.rds")
mass_seq_freq_3 <- readRDS("mass_seq_freq_3.rds")
seq_model_start_pop <- readRDS("seq_model_start_pop.rds")
seq_model_start_pop_2 <- readRDS("seq_model_start_pop_2.rds")
mass_seq_VT <- readRDS("mass_seq_VT.rds")
intermed_gene_presence_absence <- readRDS("intermed_gene_presence_absence.rds")
intermed_gene_presence_absence_matrix <- sapply(intermed_gene_presence_absence[-1,-1],as.double)
mass_seqs <- nrow(Mass_Samples_accCodes)
avg_mass_seqs <- rep(1/mass_seqs, mass_seqs)
seq_params_n_vP <- list(dt = 1/36, species_no = mass_seqs,  gene_no = nrow(intermed_gene_presence_absence)-1, Pop_ini = as.double(seq_model_start_pop), Pop_eq = as.double(seq_model_start_pop), capacity = sum(seq_model_start_pop), Genotypes = intermed_gene_presence_absence_matrix, sigma_f = 0.2193191513, sigma_w = 0.0007111157, prop_f = 0.3735531590, delta = delta_ranking, m = 0.0052207254, migVec = avg_mass_seqs, vaccTypes = mass_seq_VT, v = 0.1321567425, vacc_time = 0)
seq_WFmodel <- WF_nG_h_vP$new(pars = seq_params_n_vP,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
seq_params_n_vP
as.double(seq_model_start_pop)
seq_model_start_pop
sapply(seq_model_start_pop,as.double)
mass_seq_VT
seq_params_n_vP <- list(dt = 1/36, species_no = mass_seqs,  gene_no = nrow(intermed_gene_presence_absence)-1, Pop_ini = as.double(seq_model_start_pop), Pop_eq = as.double(seq_model_start_pop), capacity = sum(seq_model_start_pop), Genotypes = intermed_gene_presence_absence_matrix, sigma_f = 0.2193191513, sigma_w = 0.0007111157, prop_f = 0.3735531590, delta = delta_ranking, m = 0.0052207254, migVec = avg_mass_seqs, vaccTypes = as.double(mass_seq_VT), v = 0.1321567425, vacc_time = 0)
seq_WFmodel <- WF_nG_h_vP$new(pars = seq_params_n_vP,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
# summarize single-sequence clusters into PP clusters
sum_seq_clusters <- function(sequence_clust){
clustered_seqs <- rep(0, PP_mass_clusters)
for (i in 1:PP_mass_clusters) {
clustered_seqs[i] <- sum(sequence_clust[which(PopPUNK_clusters$Cluster==i)])
}
clustered_seqs
}
#PopPUNK_clusters
PP_combined_compare_616 <- function(state, observed, pars = NULL) {
result <- 0
data_size <- sum(observed)
model_size = sum(state)
# need to summarize the data and the observations into clusters
clustered_state <- sum_seq_clusters(state)
clustered_obs <- sum_seq_clusters(observed)
for (i in 1:length(clustered_obs)){
result <- result + ll_pois(clustered_obs[i], clustered_state[i]/model_size * data_size)
}
result
}
NFDS_fitting_closure_616 <- function(all_other_params, data1, data2){
fit_dfoptim <- function(fit_params){
params <- c(all_other_params, sigma_f = fit_params[1], sigma_w = fit_params[2], prop_f = fit_params[3], m = fit_params[4], v = fit_params[5])
WFmodel <- WF_nG_h_vP$new(pars = params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(WFmodel$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
PP_combined_compare_616(x[,1,37],data1) + PP_combined_compare_616(x[,1,73],data2)
}
}
ggCPP_params_616 <- list(dt = 1/36, species_no = mass_seqs,  gene_no = nrow(intermed_gene_presence_absence)-1, Pop_ini = as.double(seq_model_start_pop_2), Pop_eq = as.double(seq_model_start_pop_2), capacity = sum(seq_model_start_pop_2), Genotypes = intermed_gene_presence_absence_matrix, delta = delta_ranking, migVec = avg_mass_seqs, vaccTypes = as.double(mass_seq_VT), vacc_time = 0)
ggCPP_fitting_616 <- NFDS_fitting_closure_616(ggCPP_params_616, as.double(mass_seq_freq_2), as.double(mass_seq_freq_3))
start_params <- c(0.15, 0.05, 0.25, 0.03, 0.05)
null_man_optim_fit <- nmkb(start_params, ggCPP_fitting_616, lower=c(0.05,0,0,0,0), upper=c(1,0.05,1,1,1), control = c(maximize = TRUE))
sum_seq_clusters(as.double(mass_seq_freq_2))
null_man_optim_fit <- nmkb(start_params, ggCPP_fitting_616, lower=c(0.05,0,0,0,0), upper=c(1,0.05,1,1,1), control = c(maximize = TRUE, trace = TRUE))
null_man_optim_fit
ggCPP_params_616 <- list(dt = 1/36, species_no = mass_seqs,  gene_no = nrow(intermed_gene_presence_absence)-1, Pop_ini = as.double(seq_model_start_pop_2), Pop_eq = as.double(seq_model_start_pop_2), capacity = sum(seq_model_start_pop_2), Genotypes = intermed_gene_presence_absence_matrix, delta = delta_ranking, migVec = avg_mass_seqs, vaccTypes = as.double(mass_seq_VT), vacc_time = 0)
ggCPP_fitting_616 <- NFDS_fitting_closure_616(ggCPP_params_616, as.double(mass_seq_freq_2), as.double(mass_seq_freq_3))
start_params <- c(0.15, 0.05, 0.25, 0.03, 0.05)
nmkb(start_params, ggCPP_fitting_616, lower=c(0.05,0,0,0,0), upper=c(1,0.05,1,1,1), control = c(maximize = TRUE, trace = TRUE))
x
x[,1,37]
NFDS_fitting_closure_616
ggCPP_fitting_616(start_params)
fit_616 <- nmkb(start_params, ggCPP_fitting_616, lower=c(0,0,0,0,0), upper=c(1,1,1,1,1), control = c(maximize = TRUE, trace = TRUE))
fit_616
seq_model_start_pop
seq_model_start_pop_2
ggCPP_params_616 <- list(dt = 1/36, species_no = mass_seqs,  gene_no = nrow(intermed_gene_presence_absence)-1, Pop_ini = as.double(seq_model_start_pop), Pop_eq = as.double(seq_model_start_pop), capacity = sum(seq_model_start_pop), Genotypes = intermed_gene_presence_absence_matrix, delta = delta_ranking, migVec = avg_mass_seqs, vaccTypes = as.double(mass_seq_VT), vacc_time = 0)
ggCPP_fitting_616 <- NFDS_fitting_closure_616(ggCPP_params_616, as.double(mass_seq_freq_2), as.double(mass_seq_freq_3))
start_params <- c(0.15, 0.05, 0.25, 0.03, 0.05)
fit_616 <- nmkb(start_params, ggCPP_fitting_616, lower=c(0,0,0,0,0), upper=c(1,1,1,1,1), control = c(maximize = TRUE, trace = TRUE))
fit_616
start_p <- rep(0,10)
start_w <- rep(0,10)
start_prop <- rep(0,10)
end_p <- rep(0,10)
end_w <- rep(0,10)
end_prop <- rep(0,10)
start_m <- rep(0,10)
start_v <- rep(0,10)
end_m <- rep(0,10)
end_v <- rep(0,10)
end_error <- rep(0,10)
for (i in 1:10) {
start_params <- runif(5)
fit_616 <- nmkb(start_params, ggCPP_fitting_616, lower=c(0,0,0,0,0), upper=c(1,1,1,1,1), control = c(maximize = TRUE, trace = TRUE))
end_error[i] <- fit_616$value
end_p[i] <- fit_616$par[1]
end_w[i] <- fit_616$par[2]
end_prop[i] <- fit_616$par[3]
end_m[i] <- fit_616$par[4]
end_v[i] <- fit_616$par[5]
start_p[i] <- start_params[1]
start_w[i] <- start_params[2]
start_prop[i] <- start_params[3]
start_m[i] <- start_params[4]
start_v[i] <- start_params[5]
}
end_error
end_p
end_w
end_prop
end_m
end_v
start_p
start_w
start_prop
start_m
start_v
plot(1:7, plot_end_p)
plot_end_p <- c(0.695418564, 0.880586639, 0.995642865, 0.172117022, 0.350358448, 0.341518580, 0.001895943)
plot_end_w <- c(0.09528001, 0.16557455, 0.97558824, 0.26675343, 0.37023268, 0.90908575, 0.08035755)
plot(1:7, plot_end_p)
points(plot_end_w, col = "red")
plot_end_p <- c(0.695418564, 0.880586639, 0.995642865, 0.172117022, 0.350358448, 0.341518580, 0.001895943)
plot_end_w <- c(0.09528001, 0.16557455, 0.97558824, 0.26675343, 0.37023268, 0.90908575, 0.08035755)
plot_end_prop <- c(0.919970171, 0.001408166, 0.424236528, 0.340439155, 0.388935327, 0.998642027, 0.822636697)
plot_end_m <- c(0.9092072, 0.7310387, 0.9928808, 0.8810217, 0.9177145, 0.9542316, 0.7865585)
plot_end_v <- c(0.9944368, 0.8493109, 0.9018145, 0.6526372, 0.9294109, 0.6186854, 0.9969169)
plot(1:7, plot_end_p)
points(plot_end_w, col = "#E69F00")
points(plot_end_prop, col = "#56B4E9")
points(plot_end_m, col = "#009E73")
points(plot_end_v, col = "#F0E442")
plot(1:7, plot_end_p,  pch = 19)
points(plot_end_w, col = "#E69F00" pch = 19)
plot(1:7, plot_end_p,  pch = 19)
points(plot_end_w, col = "#E69F00", pch = 19)
points(plot_end_prop, col = "#56B4E9", pch = 19)
points(plot_end_m, col = "#009E73", pch = 19)
points(plot_end_v, col = "#F0E442", pch = 19)
plot_start_p <- c(0.1043812, 0.5933345, 0.9334867, 0.3675858, 0.4993742, 0.2117662, 0.2748254)
plot_start_w <- c(0.52289973, 0.32520405, 0.70701398, 0.34342386, 0.08975637, 0.82618422, 0.31166237)
plot_start_prop <- c(0.49302235, 0.03924397, 0.34615051, 0.24132111, 0.68209792, 0.96136825, 0.87793033)
plot_start_m <- c(0.6302457, 0.6323589, 0.8953097, 0.8982296, 0.6935370, 0.9034749, 0.6929284)
plot_start_v <- c(0.8896970, 0.7250780, 0.3615256, 0.2809701, 0.3773499, 0.4795797, 0.9857552)
points(plot_start_p, pch = 17)
points(plot_start_w, col = "#E69F00", pch = 17)
points(plot_start_prop, col = "#56B4E9", pch = 17)
points(plot_start_m, col = "#009E73", pch = 17)
points(plot_start_v, col = "#F0E442", pch = 17)
lines(plot_end_w, col = "#E69F00",)
lines(plot_end_p)
lines(plot_end_prop, col = "#56B4E9")
lines(plot_end_m, col = "#009E73")
lines(plot_end_v, col = "#F0E442")
### Loading packages
# install.packages("drat") # -- if you don't have drat installed
# drat:::add("ncov-ic")
# install.packages("odin.dust")
library(odin.dust)
#install.packages("mcstate")
library(mcstate)
# Package for derivative-free fitting in R:
library(dfoptim)
#install.packages("mcstate")
library(mcstate)
library(coda)
## command line arguments
args <- commandArgs(trailingOnly = TRUE)
#stop script if no arguments
if(length(args)==0){
print("Please let me know which version of the model you want to run!")
print("As the first argument, specify ggCaller or COGtriangles.")
print("As the second argument, specify PopPUNK or manualSeqClusters.")
stop("Requires command line argument.")
}
# read in model from file
WF <- odin.dust::odin_dust("NFDS_Model.R")
# likelihood for fitting:
ll_pois <- function(obs, model) {
exp_noise <- 1e6
if (is.na(obs)) {
# Creates vector of zeros in ll with same length, if no data
ll_obs <- numeric(length(model))
} else {
lambda <- model + rexp(n = length(model), rate = exp_noise)
ll_obs <- dpois(x = obs, lambda = lambda, log = TRUE)
}
ll_obs
}
combined_compare <- function(state, observed, pars = NULL) {
result <- 0
#data_size <- sum(mass_cluster_freq_1)
#model_size = 15000
data_size <- sum(unlist(observed))
model_size = sum(unlist(state))
for (i in 1:mass_clusters){
result <- result + ll_pois(observed[[as.character(i)]], state[1+i, , drop = TRUE]/model_size * data_size)
}
result
}
if(args[1] == "ggCaller" & args[2] == "PopPUNK"){
seq_clusters <- readRDS("PopPUNK_clusters.rds")
intermed_gene_presence_absence_consensus <- readRDS(file = "ggCPP_intermed_gene_presence_absence_consensus.rds")
intermed_gene_presence_absence_consensus_matrix <- sapply(intermed_gene_presence_absence_consensus[-1,-1],as.double)
model_start_pop <- readRDS(file = "PP_model_start_pop.rds")
delta_ranking <- readRDS(file = "ggC_delta_ranking.rds")
mass_cluster_freq_1 <- readRDS(file = "PP_mass_cluster_freq_1.rds")
mass_cluster_freq_2 <- readRDS(file = "PP_mass_cluster_freq_2.rds")
mass_cluster_freq_3 <- readRDS(file = "PP_mass_cluster_freq_3.rds")
mass_VT <- readRDS(file = "PP_mass_VT.rds")
mass_clusters <- length(unique(seq_clusters$Cluster))
avg_cluster_freq <- rep(1/mass_clusters, mass_clusters)
}
names(peripost_mass_cluster_freq) <- c("year", as.character(1:mass_clusters))
peripost_mass_cluster_freq <- data.frame("year" = c(1, 2), rbind(mass_cluster_freq_2, mass_cluster_freq_3))
names(peripost_mass_cluster_freq) <- c("year", as.character(1:mass_clusters))
fitting_mass_data <- mcstate::particle_filter_data(data = peripost_mass_cluster_freq,
time = "year",
rate = 1 / dt,
initial_time = 0)
# process data with particle filter:
dt <- 1/36 # we assume that the generation time of Strep. pneumo is 1 month
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
fitting_mass_data <- mcstate::particle_filter_data(data = peripost_mass_cluster_freq,
time = "year",
rate = 1 / dt,
initial_time = 0)
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
# Using MCMC to infer parameters
pmcmc_sigma_f <- mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0, max = 1)
pmcmc_sigma_w <- mcstate::pmcmc_parameter("sigma_w", 0.05, min = 0, max = 1)
pmcmc_prop_f <- mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1)
pmcmc_m <- mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1)
pmcmc_v <- mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)
species_no <- mass_clusters
no_clusters <- mass_clusters
gene_no <- nrow(intermed_gene_presence_absence_consensus_matrix)
Pop_ini <- model_start_pop
Pop_eq <- model_start_pop
Genotypes <- intermed_gene_presence_absence_consensus_matrix
capacity <- sum(model_start_pop)
delta <- delta_ranking
vaccTypes <- mass_VT
vacc_time <- 0
dt <- 1/36
migVec <- avg_cluster_freq
complex_params <- c(Pop_ini, Pop_eq, Genotypes, capacity, delta, vaccTypes, species_no, gene_no, vacc_time, dt, migVec)
make_transform <- function(p) {
function(theta){
c(list(Pop_ini = p[1:mass_clusters],
Pop_eq = p[(mass_clusters +1) : (mass_clusters + mass_clusters)],
Genotypes = matrix(p[(mass_clusters + mass_clusters + 1): ((mass_clusters + mass_clusters + 1) + (gene_no * species_no) - 1)], nrow = gene_no, ncol = species_no),
capacity = p[((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 1],
delta = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2) : (((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no -1)],
vaccTypes = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) : ((((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters -1)],
species_no = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters],
gene_no = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 1],
vacc_time = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 2],
dt = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 3],
migVec = p[((((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 4):((((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 4 + species_no - 1)]), as.list(theta))
}
}
transform <- function(x) {
make_transform(complex_params)}
proposal_matrix <- diag(0.1, 5) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
# here, all parameters are proposed independently.
# think about this, this might not actually be true
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(pmcmc_sigma_f, pmcmc_sigma_w, pmcmc_prop_f, pmcmc_m, pmcmc_v), proposal_matrix, transform)
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0.075, max = 1), mcstate::pmcmc_parameter("sigma_w", 0.05, min = 0, max = 0.0749), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
#= make_transform(c(Pop_ini, Pop_eq, Genotypes, capacity, delta, vaccTypes, species_no, gene_no, vacc_time)))
#mcmc_pars$names()
#mcmc_pars$model(mcmc_pars$initial())
mcmc_pars$initial()
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0.075, max = 0.22), mcstate::pmcmc_parameter("sigma_w", 0.0011, min = 0, max = 0.0749), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 0.2), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 0.5)), proposal_matrix, make_transform(complex_params))
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
n_steps <- 1000
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 2)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run, burnin = 250, thin = 1)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
print(parameter_mean_hpd)
det_mcmc1 <- coda::as.mcmc(cbind(det_pmcmc_run$probabilities, det_pmcmc_run$pars))
#plot(det_mcmc1)
det_proposal_matrix <- cov(processed_chains$pars)
#det_mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0.075, max = 0.22), mcstate::pmcmc_parameter("sigma_w", 0.05, min = 0.000001, max = 0.0749), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 0.2), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 0.5)), det_proposal_matrix, make_transform(complex_params))
det_mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", parameter_mean_hpd[1], min = 0.075, max = 0.22), mcstate::pmcmc_parameter("sigma_w", parameter_mean_hpd[2], min = 0.000001, max = 0.0749), mcstate::pmcmc_parameter("prop_f", parameter_mean_hpd[3], min = 0, max = 1), mcstate::pmcmc_parameter("m", parameter_mean_hpd[4], min = 0, max = 0.2), mcstate::pmcmc_parameter("v", parameter_mean_hpd[5], min = 0, max = 0.5)), det_proposal_matrix, make_transform(complex_params))
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
n_steps <- 2000
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 2)
det_pmcmc_run2 <- mcstate::pmcmc(det_mcmc_pars, det_filter, control = control)
plot(det_mcmc2)
det_mcmc2 <- coda::as.mcmc(cbind(det_pmcmc_run2$probabilities, det_pmcmc_run2$pars))
plot(det_mcmc2)
plot(det_mcmc2)
plot(det_mcmc2)[1]
plot(det_mcmc2)[1]
det_mcmc2
xpose_save(file = 'dv_vs_ipred_multiple.pdf')
pdf(file = "det_mcmc2.pdf",   # The directory you want to save the file in
width = 4, # The width of the plot in inches
height = 4)
plot(det_mcmc2)
pdf(file = "det_mcmc2.pdf",   # The directory you want to save the file in
width = 4, # The width of the plot in inches
height = 12)
plot(det_mcmc2)
dev.off()
pdf(file = "det_mcmc2.png",   # The directory you want to save the file in
width = 4, # The width of the plot in inches
height = 8)
plot(det_mcmc2)
dev.off()
png(file = "det_mcmc2.png",   # The directory you want to save the file in
width = 4, # The width of the plot in inches
height = 8)
plot(det_mcmc2)
dev.off()
png(file = "det_mcmc2.png",   # The directory you want to save the file in
width = 6, # The width of the plot in inches
height = 10)
plot(det_mcmc2)
png(file = "det_mcmc2.png",   # The directory you want to save the file in
width = 6, # The width of the plot in inches
height = 12)
plot(det_mcmc2)
png(file = "det_mcmc2.png",   # The directory you want to save the file in
width = 4, # The width of the plot in inches
height = 12)
plot(det_mcmc2)
pdf(file = "det_mcmc2.pdf",   # The directory you want to save the file in
width = 4, # The width of the plot in inches
height = 12)
plot(det_mcmc2)
dev.off()
png(file = "det_mcmc2.png",   # The directory you want to save the file in
width = 4, # The width of the plot in inches
height = 12)
plot(det_mcmc2)
png(file = "det_mcmc2.png",   # The directory you want to save the file in
width = 4, # The width of the plot in inches
height = 16)
plot(det_mcmc2)
png(file = "det_mcmc2.png",   # The directory you want to save the file in
width = 8, # The width of the plot in inches
height = 16)
plot(det_mcmc2)
pdf(file = "det_mcmc2.pdf",   # The directory you want to save the file in
width = 6, # The width of the plot in inches
height = 12)
plot(det_mcmc2)
dev.off()
paste(output_filename,"det_mcmc2.pdf",sep = "")
output_filename <- "ggCaller_PopPUNK"
paste(output_filename,"det_mcmc2.pdf",sep = "")
PP_mass_cluster_freq_1
# plot cluster freq coloured by vacc type, non VT and mixed
#create colour-vector based on VT mean info
plot_VT_colours <- rep("black",PP_mass_clusters)
for (i in 1:PP_mass_clusters){
if(PP_mass_VT[i] ==1){
plot_VT_colours[i] <- "#E69F00"
}
else if(PP_mass_VT[i] ==0){
plot_VT_colours[i] <- "#56B4E9"
}
}
par(mfrow=c(1,1))
op <- par(mar = c(5,7,4,2) + 0.1,mgp=c(3,1,0))
plot(PP_mass_cluster_freq_1 / sum(PP_mass_cluster_freq_1), PP_mass_cluster_freq_3 / sum(PP_mass_cluster_freq_3), axes = FALSE, ann = FALSE, pch = 19, col = plot_VT_colours, cex = 2.5, ylim = c(0,0.18), xlim = c(0,0.18))
#abline(a=0, b=1)
legend("topleft", title = "Clusters", c("VT", "Non-VT"),fill = c("#E69F00", "#56B4E9"), cex = 2.5)
axis(1,cex.axis = 2.5)
axis(2, cex.axis = 2.5)
title(xlab = "Pre-vaccine cluster frequency", cex.lab=2.5)
title(ylab = "Post-vaccine cluster frequency", cex.lab = 2.5,
line = 4.5)
box()
par(op)
plot(PP_mass_cluster_freq_1 / sum(PP_mass_cluster_freq_1), PP_mass_cluster_freq_3 / sum(PP_mass_cluster_freq_3), axes = FALSE, ann = FALSE, pch = 2, col = plot_VT_colours, cex = 2.5, ylim = c(0,0.18), xlim = c(0,0.18))
length(PP_mass_cluster_freq_1)
length(PP_mass_cluster_freq_3)
PP_mass_cluster_freq_1
PP_mass_cluster_freq_3
