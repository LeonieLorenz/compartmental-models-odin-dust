local_colours <- c("#E69F00","black")
plot(sort(ggC_delta_data3), main = "Different delta stats sort by peri_post - pre", col = local_colours[(as.integer(ggC_mass_genesInVT)+1)])
ggC_filter <- as.integer(ggC_gene_freq_2001<=0.95 & ggC_gene_freq_2001>=0.05)
ggC_filter
which(ggC_filter==1)
FuncAnn_ggCaller_gene_presence_absence[1,]
FuncAnn_ggCaller_gene_presence_absence[2,]
identical(FuncAnn_ggCaller_gene_presence_absence[2,],ggCaller_gene_presence_absence[2,])
head(ggCaller_gene_presence_absence[2,])
identical(FuncAnn_ggCaller_gene_presence_absence[2,-c(1,2,3)],ggCaller_gene_presence_absence[2,-c(1,2,3)])
identical(FuncAnn_ggCaller_gene_presence_absence[2:4,-c(1,2,3)],ggCaller_gene_presence_absence[2:4,-c(1,2,3)])
identical(FuncAnn_ggCaller_gene_presence_absence[2,c(4,5)],ggCaller_gene_presence_absence[2,c(4,5)])
FuncAnn_ggCaller_gene_presence_absence[2,c(4,5)]
ggCaller_gene_presence_absence[2,c(4,5)]
View(FuncAnn_ggCaller_gene_presence_absence)
View(ggCaller_gene_presence_absence)
# install.packages("drat") # -- if you don't have drat installed
# drat:::add("ncov-ic")
# install.packages("odin.dust")
library(odin.dust)
#install.packages("mcstate")
library(mcstate)
# Package for derivative-free fitting in R:
library(dfoptim)
WF_nG_h_vP <- odin.dust::odin_dust("NFDS_Model.R")
# copy of WrightFisherModel/WrightFisher_newData_nGenotypes_haploid_PopsizeVariablePois.R
PopPUNK_clusters <- readRDS("PopPUNK_clusters.rds")
PP_intermed_gene_presence_absence_consensus <- readRDS(file = "PP_intermed_gene_presence_absence_consensus.rds")
PP_intermed_gene_presence_absence_consensus_matrix <- sapply(PP_intermed_gene_presence_absence_consensus[-1,-1],as.double)
PP_model_start_pop <- readRDS(file = "PP_model_start_pop.rds")
#delta_ranking <- readRDS(file = "delta_ranking.rds")
PP_mass_cluster_freq_1 <- readRDS(file = "PP_mass_cluster_freq_1.rds")
PP_mass_cluster_freq_2 <- readRDS(file = "PP_mass_cluster_freq_2.rds")
PP_mass_cluster_freq_3 <- readRDS(file = "PP_mass_cluster_freq_3.rds")
PP_mass_VT <- readRDS(file = "PP_mass_VT.rds")
PopPUNK_clusters <- readRDS("PopPUNK_clusters.rds")
ggCPP_intermed_gene_presence_absence_consensus <- readRDS(file = "ggCPP_intermed_gene_presence_absence_consensus.rds")
ggCPP_intermed_gene_presence_absence_consensus_matrix <- sapply(ggCPP_intermed_gene_presence_absence_consensus[-1,-1],as.double)
PP_model_start_pop <- readRDS(file = "PP_model_start_pop.rds")
ggC_delta_ranking <- readRDS(file = "ggC_delta_ranking.rds")
PP_mass_cluster_freq_1 <- readRDS(file = "PP_mass_cluster_freq_1.rds")
PP_mass_cluster_freq_2 <- readRDS(file = "PP_mass_cluster_freq_2.rds")
PP_mass_cluster_freq_3 <- readRDS(file = "PP_mass_cluster_freq_3.rds")
PP_mass_VT <- readRDS(file = "PP_mass_VT.rds")
PP_mass_clusters <- length(unique(PopPUNK_clusters$Cluster))
PP_avg_cluster_freq <- rep(1/PP_mass_clusters, PP_mass_clusters)
# install.packages("drat") # -- if you don't have drat installed
# drat:::add("ncov-ic")
# install.packages("odin.dust")
library(odin.dust)
#install.packages("mcstate")
library(mcstate)
# Package for derivative-free fitting in R:
library(dfoptim)
WF_nG_h_vP <- odin.dust::odin_dust("NFDS_Model.R")
# copy of WrightFisherModel/WrightFisher_newData_nGenotypes_haploid_PopsizeVariablePois.R
PP_model_start_pop
rbinom(1,100,0.5)
rbinom(5,100,0.5)
rbinom(5,100,0.4)
rbinom(5,1000,0.5)
sim_start_pop <- c(500,350,200,150,100,80,70,20,10,5)
sum(sim_start_pop)
sim_start_pop <- c(500,350,210,150,100,80,75,20,10,5)
sum(sim_start_pop)
sim_start_pop <- c(500,350,210,150,100,80,75,20,10,5) * 10
sum(sim_start_pop)
runif(1)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(10,1,0.5)
rbinom(10,1,0.5)
rbinom(10,1,0.5)
rbinom(10,1,0.5)
sim_gene_matrix <- matrix(cbind(rbinom(500,1,0.5),rbinom(500,1,0.5),rbinom(500,1,0.5),rbinom(500,1,0.5),rbinom(500,1,0.5),rbinom(500,1,0.5),rbinom(500,1,0.5),rbinom(500,1,0.5),rbinom(500,1,0.5),rbinom(500,1,0.5)))
rowSums(sim_gene_matrix)
sim_gene_matrix
sim_gene_matrix <- matrix(cbind(rbinom(500,1,0.5),rbinom(500,1,0.5),rbinom(500,1,0.5),rbinom(500,1,0.5),rbinom(500,1,0.5),rbinom(500,1,0.5),rbinom(500,1,0.5),rbinom(500,1,0.5),rbinom(500,1,0.5),rbinom(500,1,0.5)),nrow = 500,ncol = 10)
rowSums(sim_gene_matrix)
sim_VTs <- c(1,0,1,1,0,0,0,0,0,0)
length(sim_VTs)
sim_params <- list(dt = 1/36, species_no = 10,  gene_no = 500, Pop_ini = as.double(sim_start_pop), Pop_eq = as.double(sim_start_pop), capacity = sum(sim_start_pop), Genotypes = sim_gene_matrix, sigma_f = 0.6, sigma_w = 0, prop_f = 0.1, delta = 1:500, m = 0.01, migVec = rep(0.1,10), vaccTypes = sim_VTs, v = 0.15, vacc_time = 0)
simWFmodel <- WF_ggC$new(pars = sim_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
simWFmodel <- WF_nG_h_vP$new(pars = sim_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
sim_start_pop <- as.double(c(500,350,210,150,100,80,75,20,10,5) * 10)
sim_gene_matrix <- matrix(cbind(as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double((rbinom(500,1,0.5))),nrow = 500,ncol = 10)
sim_gene_matrix <- matrix(cbind(as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double((rbinom(500,1,0.5)))),nrow = 500,ncol = 10)
sim_gene_matrix <- matrix(cbind(as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double((rbinom(500,1,0.5)))),nrow = 500,ncol = 10)
sim_VTs <- c(1,0,1,1,0,0,0,0,0,0)
sim_params <- list(dt = 1/36, species_no = 10,  gene_no = 500, Pop_ini = as.double(sim_start_pop), Pop_eq = as.double(sim_start_pop), capacity = sum(sim_start_pop), Genotypes = sim_gene_matrix, sigma_f = 0.6, sigma_w = 0, prop_f = 0.1, delta = 1:500, m = 0.01, migVec = rep(0.1,10), vaccTypes = sim_VTs, v = 0.15, vacc_time = 0)
simWFmodel <- WF_nG_h_vP$new(pars = sim_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
sim_VTs <- as.double(c(1,0,1,1,0,0,0,0,0,0))
sim_params <- list(dt = 1/36, species_no = 10,  gene_no = 500, Pop_ini = as.double(sim_start_pop), Pop_eq = as.double(sim_start_pop), capacity = sum(sim_start_pop), Genotypes = sim_gene_matrix, sigma_f = 0.6, sigma_w = 0, prop_f = 0.1, delta = 1:500, m = 0.01, migVec = rep(0.1,10), vaccTypes = sim_VTs, v = 0.15, vacc_time = 0)
simWFmodel <- WF_nG_h_vP$new(pars = sim_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
sim_gene_matrix <- sapply(matrix(cbind(as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double((rbinom(500,1,0.5)))),nrow = 500,ncol = 10),as.double)
sim_VTs <- as.double(c(1,0,1,1,0,0,0,0,0,0))
sim_params <- list(dt = 1/36, species_no = 10,  gene_no = 500, Pop_ini = as.double(sim_start_pop), Pop_eq = as.double(sim_start_pop), capacity = sum(sim_start_pop), Genotypes = sim_gene_matrix, sigma_f = 0.6, sigma_w = 0, prop_f = 0.1, delta = 1:500, m = 0.01, migVec = rep(0.1,10), vaccTypes = sim_VTs, v = 0.15, vacc_time = 0)
simWFmodel <- WF_nG_h_vP$new(pars = sim_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
sim_start_pop
sim_params <- list(dt = 1/36, species_no = 10,  gene_no = 500, Pop_ini = as.double(sim_start_pop), Pop_eq = as.double(sim_start_pop), capacity = sum(sim_start_pop), Genotypes = sim_gene_matrix, sigma_f = 0.6, sigma_w = 0.0, prop_f = 0.1, delta = 1:500, m = 0.01, migVec = rep(0.1,10), vaccTypes = sim_VTs, v = 0.15, vacc_time = 0)
sim_params <- list(dt = 1/36, species_no = 10,  gene_no = 500, Pop_ini = as.double(sim_start_pop), Pop_eq = as.double(sim_start_pop), capacity = sum(sim_start_pop), Genotypes = sim_gene_matrix, sigma_f = 0.6, sigma_w = 0.0, prop_f = 0.1, delta = 1:500, m = 0.01, migVec = rep(0.1,10), vaccTypes = sim_VTs, v = 0.15, vacc_time = 0)
sim_params <- list(dt = 1/36, species_no = 10,  gene_no = 500, Pop_ini = as.double(sim_start_pop), Pop_eq = as.double(sim_start_pop), capacity = sum(sim_start_pop), Genotypes = sim_gene_matrix, sigma_f = 0.6, sigma_w = 0.0, prop_f = 0.1, delta = 1:500, m = 0.01, migVec = rep(0.1,10), vaccTypes = sim_VTs, v = 0.15, vacc_time = 0)
sim_params <- list(dt = 1/36, species_no = 10,  gene_no = 500, Pop_ini = as.double(sim_start_pop), Pop_eq = as.double(sim_start_pop), capacity = sum(sim_start_pop), Genotypes = sim_gene_matrix, sigma_f = 0.6, sigma_w = 0.0, prop_f = 0.1, delta = 1:500, m = 0.01, migVec = rep(0.1,10), vaccTypes = sim_VTs, v = 0.15, vacc_time = 0)
simWFmodel <- WF_nG_h_vP$new(pars = sim_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
sim_start_pop <- as.double(c(500,350,210,150,100,80,75,20,10,5) * 10)
sim_gene_matrix <- sapply(matrix(cbind(as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double(rbinom(500,1,0.5)),as.double((rbinom(500,1,0.5)))),nrow = 500,ncol = 10),as.double)
sim_VTs <- as.double(c(1,0,1,1,0,0,0,0,0,0))
sim_params <- list(dt = 1/36, species_no = 10,  gene_no = 500, Pop_ini = as.double(sim_start_pop), Pop_eq = as.double(sim_start_pop), capacity = sum(sim_start_pop), Genotypes = sim_gene_matrix, sigma_f = 0.6, sigma_w = 0.0, prop_f = 0.1, delta = 1:500, m = 0.01, migVec = rep(0.1,10), vaccTypes = sim_VTs, v = 0.15, vacc_time = 0)
simWFmodel <- WF_nG_h_vP$new(pars = sim_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
sim_gene_matrix
intermed_gene_presence_absence_consensus_matrix
rep(0.1,10)
sim_start_pop <- as.double(c(500,350,210,150,100,80,75,20,10,5) * 10)
sim_gene_matrix <- matrix(cbind(rbinom(500,1,0.5),rbinom(500,1,0.5),rbinom(500,1,0.5),rbinom(500,1,0.5),rbinom(500,1,0.5),rbinom(500,1,0.5),rbinom(500,1,0.5),rbinom(500,1,0.5),rbinom(500,1,0.5),(rbinom(500,1,0.5))),nrow = 500,ncol = 10)
sim_gene_matrix <- sapply(sim_gene_matrix,as.double)
sim_VTs <- as.double(c(1,0,1,1,0,0,0,0,0,0))
sim_params <- list(dt = 1/36, species_no = 10,  gene_no = 500, Pop_ini = as.double(sim_start_pop), Pop_eq = as.double(sim_start_pop), capacity = sum(sim_start_pop), Genotypes = sim_gene_matrix, sigma_f = 0.6, sigma_w = 0.0, prop_f = 0.1, delta = 1:500, m = 0.01, migVec = rep(0.1,10), vaccTypes =  as.double(sim_VTs), v = 0.15, vacc_time = 0)
simWFmodel <- WF_nG_h_vP$new(pars = sim_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
mass_clusters
nrow(intermed_gene_presence_absence_consensus)-1
sum(model_start_pop)
sim_params <- list(dt = 1/36, species_no = 10,  gene_no = 500, Pop_ini = as.double(sim_start_pop), Pop_eq = as.double(sim_start_pop), capacity = sum(sim_start_pop), Genotypes = sim_gene_matrix, sigma_f = 0.6, sigma_w = 0.0, prop_f = 0.1, delta = as.double(1:500), m = 0.01, migVec = rep(0.1,10), vaccTypes =  as.double(sim_VTs), v = 0.15, vacc_time = 0)
simWFmodel <- WF_nG_h_vP$new(pars = sim_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
sim_gene_matrix
sim_gene_matrix <- matrix(cbind(rbinom(500,1,0.5),rbinom(500,1,0.5),rbinom(500,1,0.5),rbinom(500,1,0.5),rbinom(500,1,0.5),rbinom(500,1,0.5),rbinom(500,1,0.5),rbinom(500,1,0.5),rbinom(500,1,0.5),(rbinom(500,1,0.5))),nrow = 500,ncol = 10)
sim_gene_matrix
sim_gene_matrix <- sapply(sim_gene_matrix,as.double)
sim_gene_matrix
sim_gene_matrix <- matrix(sapply(sim_gene_matrix,as.double), nrow = 500, ncol = 10)
sim_VTs <- as.double(c(1,0,1,1,0,0,0,0,0,0))
sim_params <- list(dt = 1/36, species_no = 10,  gene_no = 500, Pop_ini = as.double(sim_start_pop), Pop_eq = as.double(sim_start_pop), capacity = sum(sim_start_pop), Genotypes = sim_gene_matrix, sigma_f = 0.6, sigma_w = 0.0, prop_f = 0.1, delta = as.double(1:500), m = 0.01, migVec = rep(0.1,10), vaccTypes =  as.double(sim_VTs), v = 0.15, vacc_time = 0)
simWFmodel <- WF_nG_h_vP$new(pars = sim_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(simWFmodel$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- simWFmodel$run(t)
}
exp(0.6)
sim_params <- list(dt = 1/36, species_no = 10,  gene_no = 500, Pop_ini = as.double(sim_start_pop), Pop_eq = as.double(sim_start_pop), capacity = sum(sim_start_pop), Genotypes = sim_gene_matrix, sigma_f = exp(0.6), sigma_w = exp(0), prop_f = 0.1, delta = as.double(1:500), m = exp(0.01), migVec = rep(0.1,10), vaccTypes =  as.double(sim_VTs), v = 0.15, vacc_time = 0)
simWFmodel <- WF_nG_h_vP$new(pars = sim_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(simWFmodel$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- simWFmodel$run(t)
}
PopPUNK_clusters <- readRDS("PopPUNK_clusters.rds")
PP_intermed_gene_presence_absence_consensus <- readRDS(file = "PP_intermed_gene_presence_absence_consensus.rds")
PP_intermed_gene_presence_absence_consensus_matrix <- sapply(PP_intermed_gene_presence_absence_consensus[-1,-1],as.double)
PP_model_start_pop <- readRDS(file = "PP_model_start_pop.rds")
#delta_ranking <- readRDS(file = "delta_ranking.rds")
PP_mass_cluster_freq_1 <- readRDS(file = "PP_mass_cluster_freq_1.rds")
PP_mass_cluster_freq_2 <- readRDS(file = "PP_mass_cluster_freq_2.rds")
PP_mass_cluster_freq_3 <- readRDS(file = "PP_mass_cluster_freq_3.rds")
PP_mass_VT <- readRDS(file = "PP_mass_VT.rds")
PP_mass_clusters <- length(unique(PopPUNK_clusters$Cluster))
PP_avg_cluster_freq <- rep(1/PP_mass_clusters, PP_mass_clusters)
testggCPP_params <- list(dt = 1/36, species_no = PP_mass_clusters,  gene_no = nrow(PP_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(PP_model_start_pop), Pop_eq = as.double(PP_model_start_pop), capacity = sum(PP_model_start_pop), Genotypes = PP_intermed_gene_presence_absence_consensus_matrix, sigma_f = exp(0.6), sigma_w = exp(0), prop_f = 0.1, delta = delta_ranking, m = exp(0.01), migVec = PP_avg_cluster_freq, vaccTypes = PP_mass_VT, v = 0.15, vacc_time = 0)
testggCPP_WFmodel <- WF_nG_h_vP$new(pars = testggCPP_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
PopPUNK_clusters <- readRDS("PopPUNK_clusters.rds")
ggCPP_intermed_gene_presence_absence_consensus <- readRDS(file = "ggCPP_intermed_gene_presence_absence_consensus.rds")
ggCPP_intermed_gene_presence_absence_consensus_matrix <- sapply(ggCPP_intermed_gene_presence_absence_consensus[-1,-1],as.double)
PP_model_start_pop <- readRDS(file = "PP_model_start_pop.rds")
ggC_delta_ranking <- readRDS(file = "ggC_delta_ranking.rds")
PP_mass_cluster_freq_1 <- readRDS(file = "PP_mass_cluster_freq_1.rds")
PP_mass_cluster_freq_2 <- readRDS(file = "PP_mass_cluster_freq_2.rds")
PP_mass_cluster_freq_3 <- readRDS(file = "PP_mass_cluster_freq_3.rds")
PP_mass_VT <- readRDS(file = "PP_mass_VT.rds")
PP_mass_clusters <- length(unique(PopPUNK_clusters$Cluster))
PP_avg_cluster_freq <- rep(1/PP_mass_clusters, PP_mass_clusters)
testggCPP_params <- list(dt = 1/36, species_no = PP_mass_clusters,  gene_no = nrow(ggCPP_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(PP_model_start_pop), Pop_eq = as.double(PP_model_start_pop), capacity = sum(PP_model_start_pop), Genotypes = ggCPP_intermed_gene_presence_absence_consensus_matrix, sigma_f = exp(0.6), sigma_w = exp(0), prop_f = 0.1, delta = ggC_delta_ranking, m = exp(0.01), migVec = PP_avg_cluster_freq, vaccTypes = PP_mass_VT, v =0.15, vacc_time = 0)
testggCPP_WFmodel <- WF_nG_h_vP$new(pars = testggCPP_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(testggCPP_WFmodel$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- testggCPP_WFmodel$run(t)
}
testggCPP_params <- list(dt = 1/36, species_no = PP_mass_clusters,  gene_no = nrow(ggCPP_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(PP_model_start_pop), Pop_eq = as.double(PP_model_start_pop), capacity = sum(PP_model_start_pop), Genotypes = ggCPP_intermed_gene_presence_absence_consensus_matrix, sigma_f = exp(0.4), sigma_w = exp(0), prop_f = 0.1, delta = ggC_delta_ranking, m = exp(0.01), migVec = PP_avg_cluster_freq, vaccTypes = PP_mass_VT, v =0.15, vacc_time = 0)
testggCPP_WFmodel <- WF_nG_h_vP$new(pars = testggCPP_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(testggCPP_WFmodel$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- testggCPP_WFmodel$run(t)
}
testggCPP_params <- list(dt = 1/36, species_no = PP_mass_clusters,  gene_no = nrow(ggCPP_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(PP_model_start_pop), Pop_eq = as.double(PP_model_start_pop), capacity = sum(PP_model_start_pop), Genotypes = ggCPP_intermed_gene_presence_absence_consensus_matrix, sigma_f = exp(0.4), sigma_w = exp(0), prop_f = 0.2, delta = ggC_delta_ranking, m = exp(0.01), migVec = PP_avg_cluster_freq, vaccTypes = PP_mass_VT, v =0.15, vacc_time = 0)
testggCPP_WFmodel <- WF_nG_h_vP$new(pars = testggCPP_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(testggCPP_WFmodel$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- testggCPP_WFmodel$run(t)
}
exp(0)
log(1)
exp(0.4)
log(0.4)
log(0.6)
log(0.01)
testggCPP_params <- list(dt = 1/36, species_no = PP_mass_clusters,  gene_no = nrow(ggCPP_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(PP_model_start_pop), Pop_eq = as.double(PP_model_start_pop), capacity = sum(PP_model_start_pop), Genotypes = ggCPP_intermed_gene_presence_absence_consensus_matrix, sigma_f = log(0.6), sigma_w = -1000, prop_f = 0.2, delta = ggC_delta_ranking, m = log(0.01), migVec = PP_avg_cluster_freq, vaccTypes = PP_mass_VT, v =0.15, vacc_time = 0)
testggCPP_WFmodel <- WF_nG_h_vP$new(pars = testggCPP_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(testggCPP_WFmodel$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- testggCPP_WFmodel$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
sim_params <- list(dt = 1/36, species_no = 10,  gene_no = 500, Pop_ini = as.double(sim_start_pop), Pop_eq = as.double(sim_start_pop), capacity = sum(sim_start_pop), Genotypes = sim_gene_matrix, sigma_f = log(0.6), sigma_w = -1000, prop_f = 0.1, delta = as.double(1:500), m = log(0.01), migVec = rep(0.1,10), vaccTypes =  as.double(sim_VTs), v = 0.15, vacc_time = 0)
simWFmodel <- WF_nG_h_vP$new(pars = sim_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(simWFmodel$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- simWFmodel$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
x
x[,1,1]
x[,1,37]
x[,1,73]
# likelihood for fitting:
ll_pois <- function(obs, model) {
exp_noise <- 1e6
if (is.na(obs)) {
# Creates vector of zeros in ll with same length, if no data
ll_obs <- numeric(length(model))
} else {
lambda <- model + rexp(n = length(model), rate = exp_noise)
ll_obs <- dpois(x = obs, lambda = lambda, log = TRUE)
}
ll_obs
}
combined_compare <- function(state, observed, pars = NULL) {
result <- 0
#data_size <- sum(mass_cluster_freq_1)
#model_size = 15000
data_size <- sum(unlist(observed))
model_size = sum(unlist(state))
for (i in 1:mass_clusters){
result <- result + ll_pois(observed[[as.character(i)]], state[1+i, , drop = TRUE]/model_size * data_size)
}
result
}
# process data with particle filter:
dt <- 1/36 # we assume that the generation time of Strep. pneumo is 1 month
peripost_mass_cluster_freq <- data.frame("year" = c(1, 2), rbind(mass_cluster_freq_2, mass_cluster_freq_3))
sim_data_1 <- x[,1,1]
sim_data_2 <-  x[,1,37]
sim_data_3 <-  x[,1,73]
peripost_mass_cluster_freq <- data.frame("year" = c(1, 2), rbind(sim_data_2, sim_data_3))
names(peripost_mass_cluster_freq) <- c("year", as.character(1:mass_clusters))
length(sim_start_pop)
names(peripost_mass_cluster_freq) <- c("year", as.character(1:length(sim_start_pop)))
fitting_mass_data <- mcstate::particle_filter_data(data = peripost_mass_cluster_freq,
time = "year",
rate = 1 / dt,
initial_time = 0)
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
# Using MCMC to infer parameters
pmcmc_sigma_f <- mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0, max = 1)
pmcmc_sigma_w <- mcstate::pmcmc_parameter("sigma_w", 0.05, min = 0, max = 1)
# Using MCMC to infer parameters
#pmcmc_sigma_f <- mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0, max = 1)
#pmcmc_sigma_w <- 0
#pmcmc_sigma_w <- -1000
#pmcmc_prop_f <- mcstate::pmcmc_parameter("prop_f", 0.2, min = 0, max = 1)
#pmcmc_m <- mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1)
#pmcmc_v <- mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)
species_no <- length(sim_start_pop)
no_clusters <- length(sim_start_pop)
gene_no <- nrow(sim_gene_matrix)
Pop_ini <- sim_start_pop
Pop_eq <- sim_start_pop
Genotypes <- sim_gene_matrix
capacity <- sum(sim_start_pop)
delta <-  as.double(1:500)
vaccTypes <- as.double(sim_VTs)
vacc_time <- 0
dt <- 1/36
migVec <- rep(0.1,10)
complex_params <- c(Pop_ini, Pop_eq, Genotypes, capacity, delta, vaccTypes, species_no, gene_no, vacc_time, dt, migVec, pmcmc_sigma_w)
make_transform <- function(p) {
function(theta){
c(list(Pop_ini = p[1:mass_clusters],
Pop_eq = p[(mass_clusters +1) : (mass_clusters + mass_clusters)],
Genotypes = matrix(p[(mass_clusters + mass_clusters + 1): ((mass_clusters + mass_clusters + 1) + (gene_no * species_no) - 1)], nrow = gene_no, ncol = species_no),
capacity = p[((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 1],
delta = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2) : (((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no -1)],
vaccTypes = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) : ((((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters -1)],
species_no = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters],
gene_no = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 1],
vacc_time = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 2],
dt = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 3],
migVec = p[((((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 4):((((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 4 + species_no - 1)],
sigma_w = p[((((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 4 + species_no - 1 + 1)]), as.list(theta))
}
}
transform <- function(x) {
make_transform(complex_params)}
proposal_matrix <- diag(0.1,4) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 01), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars$initial()
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
n_steps <- 1000
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 4)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
WF <- odin.dust::odin_dust("NFDS_Model.R")
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 4)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
WF <- odin.dust::odin_dust("NFDS_Model.R")
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
n_steps <- 1000
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 4)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
mass_clusters <- length(sim_start_pop)
complex_params <- c(Pop_ini, Pop_eq, Genotypes, capacity, delta, vaccTypes, species_no, gene_no, vacc_time, dt, migVec, pmcmc_sigma_w)
make_transform <- function(p) {
function(theta){
c(list(Pop_ini = p[1:mass_clusters],
Pop_eq = p[(mass_clusters +1) : (mass_clusters + mass_clusters)],
Genotypes = matrix(p[(mass_clusters + mass_clusters + 1): ((mass_clusters + mass_clusters + 1) + (gene_no * species_no) - 1)], nrow = gene_no, ncol = species_no),
capacity = p[((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 1],
delta = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2) : (((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no -1)],
vaccTypes = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) : ((((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters -1)],
species_no = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters],
gene_no = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 1],
vacc_time = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 2],
dt = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 3],
migVec = p[((((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 4):((((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 4 + species_no - 1)],
sigma_w = p[((((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 4 + species_no - 1 + 1)]), as.list(theta))
}
}
transform <- function(x) {
make_transform(complex_params)}
proposal_matrix <- diag(0.1,4) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 01), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars$initial()
WF <- odin.dust::odin_dust("NFDS_Model.R")
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
n_steps <- 1000
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 4)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
# Using MCMC to infer parameters
#pmcmc_sigma_f <- mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0, max = 1)
#pmcmc_sigma_w <- 0
pmcmc_sigma_w <- -1000
complex_params <- c(Pop_ini, Pop_eq, Genotypes, capacity, delta, vaccTypes, species_no, gene_no, vacc_time, dt, migVec, pmcmc_sigma_w)
make_transform <- function(p) {
function(theta){
c(list(Pop_ini = p[1:mass_clusters],
Pop_eq = p[(mass_clusters +1) : (mass_clusters + mass_clusters)],
Genotypes = matrix(p[(mass_clusters + mass_clusters + 1): ((mass_clusters + mass_clusters + 1) + (gene_no * species_no) - 1)], nrow = gene_no, ncol = species_no),
capacity = p[((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 1],
delta = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2) : (((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no -1)],
vaccTypes = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) : ((((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters -1)],
species_no = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters],
gene_no = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 1],
vacc_time = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 2],
dt = p[(((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 3],
migVec = p[((((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 4):((((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 4 + species_no - 1)],
sigma_w = p[((((2 * mass_clusters + 1) + (gene_no * species_no) - 1) + 2 + gene_no) + no_clusters + 4 + species_no - 1 + 1)]), as.list(theta))
}
}
transform <- function(x) {
make_transform(complex_params)}
proposal_matrix <- diag(0.1,4) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 01), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 01), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars$initial()
WF <- odin.dust::odin_dust("NFDS_Model.R")
n_steps <- 1000
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 4)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run, burnin = 250, thin = 1)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
print(parameter_mean_hpd)
exp(-0.5183987)
exp(-4.0438992)
log(0.6)
log(0.01)
