Nepal_ggCaller_byYear[[i]] <- Nepal_ggCaller_year
}
sum_as_int <- function(x){
sum(as.integer(x))
}
Nepal_gene_freq_preVac <- rep(0, nrow(Nepal_ggCaller_byYear[[1]])-1)
preVac_datapoints <- 0
for (i in 1:length(Nepal_time_points_preVac)) {
Nepal_gene_freq_preVac <- Nepal_gene_freq_preVac + apply(Nepal_ggCaller_byYear[[i]][-1,-1],1, sum_as_int)
preVac_datapoints <- preVac_datapoints + length(Nepal_ggCaller_byYear[[i]][1,-1])
}
Nepal_gene_freq_preVac <- Nepal_gene_freq_preVac / preVac_datapoints
Nepal_gene_filter <- as.integer(Nepal_gene_freq_preVac<=0.95 & Nepal_gene_freq_preVac>=0.05)
Nepal_gene_filter
sum(Nepal_gene_filter)
Nepal_ggCaller_byYear_intermed <- vector(mode = "list", length = length(Nepal_time_points_selected))
for (i in 1:length(Nepal_time_points_selected)) {
Nepal_ggCaller_year <- data.frame(matrix(0, nrow = sum(Nepal_gene_filter)+1,ncol = length(which(Nepal_meta_dataPP$Year==Nepal_time_points_selected[i]))+1))
if(ncol(Nepal_ggCaller_byYear[[i]])>1){
Nepal_ggCaller_year <-  Nepal_ggCaller_byYear[[i]][c(1,which(Nepal_gene_filter==1)+1),]
}
else{
Nepal_ggCaller_year <-  data.frame(matrix(Nepal_ggCaller_byYear[[6]][c(1,which(Nepal_gene_filter==1)+1),1], nrow = sum(Nepal_gene_filter)+1,ncol = 1))
}
Nepal_ggCaller_byYear_intermed[[i]] <- Nepal_ggCaller_year
}
Nepal_ggCaller_intermed <- data.frame(matrix(0, nrow = sum(Nepal_gene_filter)+1,ncol = ncol(Nepal_ggCallerPP_bool)))
Nepal_ggCaller_intermed <-  Nepal_ggCallerPP_bool[c(1,which(Nepal_gene_filter==1)+1),]
# create pre_Vac intermed frequency data frame
Nepal_ggCaller_intermed_preVac <- data.frame(matrix(0, nrow = sum(Nepal_gene_filter)+1,ncol = (sum(unlist(lapply(Nepal_ggCaller_byYear_intermed,ncol))[1:length(Nepal_time_points_preVac)]) - length(Nepal_time_points_preVac) + 1)))
col_count <- 2
Navajo_ggCaller_byYear <- vector(mode = "list", length = length(Navajo_time_points_selected))
for (i in 1:length(Navajo_time_points_selected)) {
Navajo_ggCaller_year <- data.frame(matrix(0, nrow = nrow(Navajo_ggCallerPP_bool), ncol = length(which(Navajo_meta_dataPP$Year==Navajo_time_points_selected[i]))+1)) # initialize data frame
Navajo_ggCaller_year[1,-1] <- Navajo_ggCallerPP_bool[1,c(FALSE,Navajo_SeqYear_dict[unlist(Navajo_ggCallerPP_bool[1,-1])]==Navajo_time_points_selected[i])] # fill in first row (seq names)
Navajo_ggCaller_year[-1,1] <- Navajo_ggCallerPP_bool[-1,1] # fill in first column (gene cluster names)
Navajo_ggCaller_year[-1,-1] <- Navajo_ggCallerPP_bool[-1,c(FALSE,Navajo_SeqYear_dict[unlist(Navajo_ggCallerPP_bool[1,-1])]==Navajo_time_points_selected[i])] # fill in presence absence information
Navajo_ggCaller_byYear[[i]] <- Navajo_ggCaller_year
}
for (i in 1:length(Navajo_time_points_selected)) {
Navajo_ggCaller_year <- data.frame(matrix(0, nrow = nrow(Navajo_ggCallerPP_bool), ncol = length(which(Navajo_meta_dataPP$Year==Navajo_time_points_selected[i]))+1)) # initialize data frame
Navajo_ggCaller_year[1,-1] <- Navajo_ggCallerPP_bool[1,c(FALSE,Navajo_SeqYear_dict[unlist(Navajo_ggCallerPP_bool[1,-1])]==Navajo_time_points_selected[i])] # fill in first row (seq names)
Navajo_ggCaller_year[-1,1] <- Navajo_ggCallerPP_bool[-1,1] # fill in first column (gene cluster names)
Navajo_ggCaller_year[-1,-1] <- Navajo_ggCallerPP_bool[-1,c(FALSE,Navajo_SeqYear_dict[unlist(Navajo_ggCallerPP_bool[1,-1])]==Navajo_time_points_selected[i])] # fill in presence absence information
Navajo_ggCaller_byYear[[i]] <- Navajo_ggCaller_year
}
sum_as_int <- function(x){
sum(as.integer(x))
}
Navajo_gene_freq_preVac <- rep(0, nrow(Navajo_ggCaller_byYear[[1]])-1)
preVac_datapoints <- 0
for (i in 1:length(Navajo_time_points_preVac)) {
Navajo_gene_freq_preVac <- Navajo_gene_freq_preVac + apply(Navajo_ggCaller_byYear[[i]][-1,-1],1, sum_as_int)
preVac_datapoints <- preVac_datapoints + length(Navajo_ggCaller_byYear[[i]][1,-1])
}
barplot(seq_no_per_year, xlab = "Sequencing Years", ylab = "Sequence Counts", col = rainbow(15))
Navajo_time_points_selected
Navajo_time_points_preVac1 <- Navajo_time_seq[1:3]
Navajo_time_points_preVac1
Navajo_time_points_preVac1 <- Navajo_time_seq[1:4]
seq_no_per_year[1] + seq_no_per_year[2] + seq_no_per_year[3] + seq_no_per_year[4]
Navajo_time_points_preVac1 <- Navajo_time_seq[1:4]
sum_as_int <- function(x){
sum(as.integer(x))
}
Navajo_gene_freq_preVac <- rep(0, nrow(Navajo_ggCaller_byYear[[1]])-1)
preVac_datapoints <- 0
for (i in 1:length(Navajo_time_points_preVac1)) {
Navajo_gene_freq_preVac <- Navajo_gene_freq_preVac + apply(Navajo_ggCaller_byYear[[i]][-1,-1],1, sum_as_int)
preVac_datapoints <- preVac_datapoints + length(Navajo_ggCaller_byYear[[i]][1,-1])
}
Navajo_gene_freq_preVac <- Navajo_gene_freq_preVac / preVac_datapoints
Navajo_gene_filter <- as.integer(Navajo_gene_freq_preVac<=0.95 & Navajo_gene_freq_preVac>=0.05)
Navajo_gene_filter
Navajo_gene_freq_preVac <- rep(0, nrow(Navajo_ggCaller_byYear[[1]])-1)
preVac_datapoints <- 0
for (i in 1:length(Navajo_time_points_preVac1)) {
Navajo_gene_freq_preVac <- Navajo_gene_freq_preVac + apply(Navajo_ggCaller_byYear[[i]][-1,-1],1, sum_as_int)
preVac_datapoints <- preVac_datapoints + length(Navajo_ggCaller_byYear[[i]][1,-1])
}
Navajo_gene_freq_preVac
preVac_datapoints
dim(Navajo_ggCaller_byYear[[1]])
dim(Navajo_ggCaller_byYear[[2]])
dim(Navajo_ggCaller_byYear[[3]])
Navajo_ggCaller_byYear <- vector(mode = "list", length = length(Navajo_time_points_selected))
for (i in 1:length(Navajo_time_points_selected)) {
Navajo_ggCaller_year <- data.frame(matrix(0, nrow = nrow(Navajo_ggCallerPP_bool), ncol = length(which(Navajo_meta_dataPP$Year==Navajo_time_points_selected[i]))+1)) # initialize data frame
Navajo_ggCaller_year[1,-1] <- Navajo_ggCallerPP_bool[1,c(FALSE,Navajo_SeqYear_dict[unlist(Navajo_ggCallerPP_bool[1,-1])]==Navajo_time_points_selected[i])] # fill in first row (seq names)
Navajo_ggCaller_year[-1,1] <- Navajo_ggCallerPP_bool[-1,1] # fill in first column (gene cluster names)
Navajo_ggCaller_year[-1,-1] <- Navajo_ggCallerPP_bool[-1,c(FALSE,Navajo_SeqYear_dict[unlist(Navajo_ggCallerPP_bool[1,-1])]==Navajo_time_points_selected[i])] # fill in presence absence information
Navajo_ggCaller_byYear[[i]] <- Navajo_ggCaller_year
}
Navajo_ggCaller_byYear
dim(Navajo_ggCaller_byYear[[1]])
dim(Navajo_ggCaller_byYear[[2]])
dim(Navajo_ggCaller_byYear[[10]])
length(which(Navajo_meta_dataPP$Year==Navajo_time_points_selected[1]))
Navajo_ggCaller_byYear <- vector(mode = "list", length = length(Navajo_time_points_selected))
for (i in 1:length(Navajo_time_points_selected)) {
Navajo_ggCaller_year <- data.frame(matrix(0, nrow = nrow(Navajo_ggCallerPP_bool), ncol = length(which(Navajo_meta_data$Year==Navajo_time_points_selected[i]))+1)) # initialize data frame
Navajo_ggCaller_year[1,-1] <- Navajo_ggCallerPP_bool[1,c(FALSE,Navajo_SeqYear_dict[unlist(Navajo_ggCallerPP_bool[1,-1])]==Navajo_time_points_selected[i])] # fill in first row (seq names)
Navajo_ggCaller_year[-1,1] <- Navajo_ggCallerPP_bool[-1,1] # fill in first column (gene cluster names)
Navajo_ggCaller_year[-1,-1] <- Navajo_ggCallerPP_bool[-1,c(FALSE,Navajo_SeqYear_dict[unlist(Navajo_ggCallerPP_bool[1,-1])]==Navajo_time_points_selected[i])] # fill in presence absence information
Navajo_ggCaller_byYear[[i]] <- Navajo_ggCaller_year
}
dim(Navajo_ggCaller_byYear[[1]])
sum_as_int <- function(x){
sum(as.integer(x))
}
Navajo_gene_freq_preVac <- rep(0, nrow(Navajo_ggCaller_byYear[[1]])-1)
preVac_datapoints <- 0
for (i in 1:length(Navajo_time_points_preVac1)) {
Navajo_gene_freq_preVac <- Navajo_gene_freq_preVac + apply(Navajo_ggCaller_byYear[[i]][-1,-1],1, sum_as_int)
preVac_datapoints <- preVac_datapoints + length(Navajo_ggCaller_byYear[[i]][1,-1])
}
Navajo_gene_freq_preVac <- Navajo_gene_freq_preVac / preVac_datapoints
Navajo_gene_filter <- as.integer(Navajo_gene_freq_preVac<=0.95 & Navajo_gene_freq_preVac>=0.05)
Navajo_gene_filter
sum(Navajo_gene_filter)
Navajo_ggCaller_byYear_intermed <- vector(mode = "list", length = length(Navajo_time_points_selected))
for (i in 1:length(Navajo_time_points_selected)) {
Navajo_ggCaller_year <- data.frame(matrix(0, nrow = sum(Navajo_gene_filter)+1,ncol = length(which(Navajo_meta_dataPP$Year==Navajo_time_points_selected[i]))+1))
if(ncol(Navajo_ggCaller_byYear[[i]])>1){
Navajo_ggCaller_year <-  Navajo_ggCaller_byYear[[i]][c(1,which(Navajo_gene_filter==1)+1),]
}
else{
Navajo_ggCaller_year <-  data.frame(matrix(Navajo_ggCaller_byYear[[6]][c(1,which(Navajo_gene_filter==1)+1),1], nrow = sum(Navajo_gene_filter)+1,ncol = 1))
}
Navajo_ggCaller_byYear_intermed[[i]] <- Navajo_ggCaller_year
}
Navajo_ggCaller_intermed <- data.frame(matrix(0, nrow = sum(Navajo_gene_filter)+1,ncol = ncol(Navajo_ggCallerPP_bool)))
Navajo_ggCaller_intermed <-  Navajo_ggCallerPP_bool[c(1,which(Navajo_gene_filter==1)+1),]
# create pre_Vac intermed frequency data frame
Navajo_ggCaller_intermed_preVac <- data.frame(matrix(0, nrow = sum(Navajo_gene_filter)+1,ncol = (sum(unlist(lapply(Navajo_ggCaller_byYear_intermed,ncol))[1:length(Navajo_time_points_preVac1)]) - length(Navajo_time_points_preVac1) + 1)))
col_count <- 2
for (i in 1:length(Navajo_time_points_preVac1)) {
if(ncol(Navajo_ggCaller_byYear_intermed[[i]])>1){
Navajo_ggCaller_intermed_preVac[,(col_count:(col_count + ncol(Navajo_ggCaller_byYear_intermed[[i]])-1))] <- Navajo_ggCaller_byYear_intermed[[i]][,-1]
col_count <- col_count + ncol(Navajo_ggCaller_byYear_intermed[[i]])
}
}
Navajo_ggCaller_intermed_preVac[,1] <-  Navajo_ggCaller_byYear_intermed[[1]][,1]
Navajo_ggCaller_intermed_preVac
cons_genomes <- function(x){
as.double(ceiling(median(as.integer(x))))
}
# overall
Navajo_ggCaller_intermed_consensus <- data.frame(matrix(0, nrow = sum(Navajo_gene_filter)+1, ncol = no_Navajo_PP+1))
Navajo_ggCaller_intermed_consensus[1,-1] <- paste("SeqCl_",unique(Navajo_PP$Cluster),sep = "")
for (i in unique(Navajo_PP$Cluster)) {
Navajo_ggCaller_intermed_consensus[-1,(which(unique(Navajo_PP$Cluster) == i))+1] <- apply(as.matrix(Navajo_ggCaller_intermed[-1,c(FALSE,Navajo_seq_clusters_dict[unlist(Nepal_ggCaller_intermed[1,-1])]==i)]), 1, cons_genomes)
}
cons_genomes <- function(x){
as.double(ceiling(median(as.integer(x))))
}
# overall
Navajo_ggCaller_intermed_consensus <- data.frame(matrix(0, nrow = sum(Navajo_gene_filter)+1, ncol = no_Navajo_PP+1))
Navajo_ggCaller_intermed_consensus[1,-1] <- paste("SeqCl_",unique(Navajo_PP$Cluster),sep = "")
for (i in unique(Navajo_PP$Cluster)) {
Navajo_ggCaller_intermed_consensus[-1,(which(unique(Navajo_PP$Cluster) == i))+1] <- apply(as.matrix(Navajo_ggCaller_intermed[-1,c(FALSE,Navajo_seq_clusters_dict[unlist(Navajo_ggCaller_intermed[1,-1])]==i)]), 1, cons_genomes)
}
Navajo_ggCaller_intermed_consensus[,1] <- Navajo_ggCaller_intermed[,1]
#by year
Navajo_ggCaller_byYear_intermed_consensus <- vector(mode = "list", length = length(Navajo_time_points_selected))
for (i in 1:length(Navajo_time_points_selected)) {
Navajo_ggCaller_year <- data.frame(matrix(0, nrow = sum(Navajo_gene_filter)+1,ncol = no_Navajo_PP+1))
Navajo_ggCaller_year[1,-1] <- paste("SeqCl_",unique(Navajo_PP$Cluster),sep = "")
for (j in unique(Navajo_PP$Cluster)) {
Navajo_ggCaller_year[-1,(which(unique(Navajo_PP$Cluster) == j))+1] <- apply(as.matrix(Navajo_ggCaller_byYear_intermed[[i]][-1,c(FALSE,Navajo_seq_clusters_dict[unlist(Navajo_ggCaller_byYear_intermed[[i]][1,-1])]==j)]), 1, cons_genomes)
}
Navajo_ggCaller_year[,1] <- Navajo_ggCaller_byYear_intermed[[i]][,1]
Navajo_ggCaller_byYear_intermed_consensus[[i]] <- Navajo_ggCaller_year
}
saveRDS(Navajo_ggCaller_intermed_consensus,"Navajo_ggCaller_intermed_consensus.rds")
Navajo_ggCaller_intermed_consensus
PCV7_VTs <- rep(0,length(unique(Navajo_meta_dataPP$Phenotypic_serotype)))
names(PCV7_VTs) <- unique(Navajo_meta_dataPP$Phenotypic_serotype)
# create dictionary for VTs of the PCV10
# 1, 4, 5, 6b, 7f, 9V, 14, 18c, 19f and 23f serotypes (source: NCBI)
#PCV7: 4, 6B, 9V, 14, 18C, 19F and 23F. (source: https://journals.plos.org/plospathogens/article?id=10.1371/journal.ppat.1006966#sec018)
PCV10_VTs <- rep(0,length(unique(Navajo_meta_data$Sero)))
names(PCV10_VTs) <- unique(Navajo_meta_data$Sero)
PCV10_VTs[c("1","4","5","6B", "7F", "9V", "14", "18C", "19F", "23F")] <- 1
PCV7_VTs <- rep(0,length(unique(Navajo_meta_data$Sero)))
names(PCV7_VTs) <- unique(Navajo_meta_data$Sero)
PCV7_VTs[c("4","6B", "9V", "14", "18C", "19F", "23F")] <- 1
PCV7_VTs
Navajo_SeqToSero_dict <- Navajo_meta_data$Sero
names(Navajo_SeqToSero_dict) <- Navajo_meta_data$Accession
# calculate Vaccine Type consensus for clusters
Navajo_VT <- rep(0, no_Navajo_PP)
for (i in unique(Navajo_PP$Cluster)){
Navajo_VT[(which(unique(Navajo_PP$Cluster) == i))] <- ceiling(median(as.integer(PCV10_VTs[Navajo_SeqToSero_dict[Navajo_PP[Navajo_PP$Cluster == i,"Taxon"]]])))
}
Navajo_VT
#save VTs
saveRDS(Navajo_VT, file = "Navajo_VT.rds")
Navajo_cluster_freqs <- vector(mode = "list", length = length(Navajo_time_points_selected))
for(j in 1:length(Navajo_time_points_selected)){
Navajo_cluster_freqs[[j]] <- rep(0, no_Navajo_PP)
for (i in unique(Navajo_PP$Cluster)){
Navajo_cluster_freqs[[j]][which(unique(Navajo_PP$Cluster) == i)] <- length(which(Navajo_meta_data[Navajo_meta_IDtoIndPP[Navajo_PP[Navajo_PP$Cluster == i,"Taxon"]],]$Year==Navajo_time_points_selected[j]))
}
}
Navajo_cluster_freqs <- vector(mode = "list", length = length(Navajo_time_points_selected))
for(j in 1:length(Navajo_time_points_selected)){
Navajo_cluster_freqs[[j]] <- rep(0, no_Navajo_PP)
for (i in unique(Navajo_PP$Cluster)){
Navajo_cluster_freqs[[j]][which(unique(Navajo_PP$Cluster) == i)] <- length(which(Navajo_meta_data[Navajo_meta_IDtoInd[Navajo_PP[Navajo_PP$Cluster == i,"Taxon"]],]$Year==Navajo_time_points_selected[j]))
}
}
Navajo_cluster_freqs[[6]] <- rep(NA, no_Navajo_PP)
# 901 data points in total
Navajo_cluster_freqs_preVac <- rep(0, no_Navajo_PP)
for (i in 1:length(Navajo_time_points_preVac)) {
Navajo_cluster_freqs_preVac <- Navajo_cluster_freqs_preVac + replace(Navajo_cluster_freqs[[i]],which(is.na(Navajo_cluster_freqs[[i]])),0)
}
# 901 data points in total
Navajo_cluster_freqs_preVac <- rep(0, no_Navajo_PP)
for (i in 1:length(Navajo_time_points_preVac1)) {
Navajo_cluster_freqs_preVac <- Navajo_cluster_freqs_preVac + replace(Navajo_cluster_freqs[[i]],which(is.na(Navajo_cluster_freqs[[i]])),0)
}
for (i in 1:length(Navajo_time_points_selected)) {
file_name <- paste("Navajo_cluster_freqs_", as.character(i),".rds", sep = "")
saveRDS(Navajo_cluster_freqs[[i]], file_name)
}
Navajo_cluster_freqs
### create initial population that is based on the first time point data set
# sample from it with an Poisson process
expand_factor <- 15000 / sum(Navajo_cluster_freqs_preVac)
exp_noise <- 10
Navajo_model_start_pop <- (sapply((Navajo_cluster_freqs_preVac + rexp(n = length(Navajo_cluster_freqs_preVac), rate = exp_noise)) * expand_factor, rpois, n=1))
# visual check for the "sampling"
plot(Navajo_cluster_freqs_preVac/sum(Navajo_cluster_freqs_preVac))
points(Navajo_model_start_pop/sum(Navajo_model_start_pop), col = "red")
Navajo_model_start_pop <- (sapply((Navajo_cluster_freqs[[5]] + rexp(n = length(Navajo_cluster_freqs[[5]]), rate = exp_noise)) * expand_factor, rpois, n=1))
# visual check for the "sampling"
plot(Navajo_cluster_freqs[[5]]/sum(Navajo_cluster_freqs[[5]]))
Navajo_model_start_pop
sum(Navajo_cluster_freqs_preVac)
expand_factor <- 15000 / sum(Navajo_cluster_freqs[[1]])
exp_noise <- 10
Navajo_model_start_pop <- (sapply((Navajo_cluster_freqs[[1]] + rexp(n = length(Navajo_cluster_freqs[[1]]), rate = exp_noise)) * expand_factor, rpois, n=1))
Navajo_model_start_pop
# visual check for the "sampling"
plot(Navajo_cluster_freqs[[1]]/sum(Navajo_cluster_freqs[[1]]))
points(Navajo_model_start_pop/sum(Navajo_model_start_pop), col = "red")
sum(Navajo_cluster_freqs[[1]]
)
saveRDS(Navajo_model_start_pop, "Navajo_model_start_pop.rds")
# calculate gene frequencies first, separate for three time points
Navajo_gene_freq_preVac <- apply(Navajo_ggCaller_intermed_preVac[-1,-1], 1, sum_as_int)
Navajo_gene_freq_postVac <- apply(Navajo_ggCaller_byYear_intermed[[length(Navajo_ggCaller_byYear_intermed)]][-1,-1], 1, sum_as_int)
# first, calculate pre/peri and post vacc frequencies of genes:
Navajo_gene_freq_preVac_rel <- Navajo_gene_freq_preVac/sum(Navajo_gene_freq_preVac)
Navajo_gene_freq_postVac_rel <- Navajo_gene_freq_postVac/sum(Navajo_gene_freq_postVac)
dim(Navajo_ggCaller_intermed_preVac)
dim(Navajo_gene_freq_postVac)
length(Navajo_ggCaller_byYear_intermed)
dim(Navajo_ggCaller_byYear_intermed)
length(Navajo_ggCaller_byYear_intermed)
length(Navajo_ggCaller_byYear_intermed)
Navajo_ggCaller_byYear_intermed[[length(Navajo_ggCaller_byYear_intermed)]]
Navajo_gene_freq_postVac <- apply(Navajo_ggCaller_byYear_intermed[[length(Navajo_ggCaller_byYear_intermed)]][-1,-1], 1, sum_as_int) + apply(Navajo_ggCaller_byYear_intermed[[length(Navajo_ggCaller_byYear_intermed)-1]][-1,-1], 1, sum_as_int) + apply(Navajo_ggCaller_byYear_intermed[[length(Navajo_ggCaller_byYear_intermed)-2]][-1,-1], 1, sum_as_int)
# first, calculate pre/peri and post vacc frequencies of genes:
Navajo_gene_freq_preVac_rel <- Navajo_gene_freq_preVac/sum(Navajo_gene_freq_preVac)
Navajo_gene_freq_postVac_rel <- Navajo_gene_freq_postVac/sum(Navajo_gene_freq_postVac)
Navajo_gene_freq_preVac_rel
Navajo_gene_freq_postVac_rel
# calculate delta statistic (refer to Corander et al. for more info)
Navajo_delta_data <- (Navajo_gene_freq_postVac_rel - Navajo_gene_freq_preVac_rel) ^ 2 / (1 - Navajo_gene_freq_preVac_rel * (1 - Navajo_gene_freq_preVac_rel))
Navajo_delta_ranking <- rank(Navajo_delta_data)
Navajo_delta_data
Navajo_delta_ranking
dim(Navajo_ggCaller_byYear_intermed[[length(Navajo_ggCaller_byYear_intermed)]])
length(Navajo_delta_data)
# calculate delta statistic (refer to Corander et al. for more info)
Navajo_delta_data <- (Navajo_gene_freq_postVac_rel - Navajo_gene_freq_preVac_rel) ^ 2 / (1 - Navajo_gene_freq_preVac_rel * (1 - Navajo_gene_freq_preVac_rel))
Navajo_delta_ranking <- rank(Navajo_delta_data)
saveRDS(Navajo_delta_ranking,"Navajo_delta_ranking.rds")
dim(Navajo_ggCaller_byYear_intermed_consensus[[5]])
dim(Navajo_ggCaller_byYear_intermed_consensus[[6]])
View(Navajo_ggCaller_byYear_intermed_consensus[[6]])
### Loading packages
#install.packages("drat") # -- if you don't have drat installed
#drat:::add("ncov-ic")
# install.packages("/nfs/research/jlees/leonie/WF_fitting_2024/Nepal/dust-master", repos = NULL, type="source")
library(dust)
#install.packages("/nfs/research/jlees/leonie/WF_fitting_2024/Nepal/odin-1.5.10", repos = NULL, type="source")
library(odin)
#install.packages("odin.dust",repos = c("https://mrc-ide.r-universe.dev", "https://cloud.r-project.org"))
#install.packages("odin.dust")
library(odin.dust)
#install.packages("mcstate")
library(mcstate)
library(coda)
# read in model from file
WF <- odin.dust::odin_dust("NFDS_Model.R", options=odin_options(verbose = TRUE))
# likelihood for fitting:
ll_pois <<- function(obs, model) {
exp_noise <- 1e6
if (is.na(obs)) {
# Creates vector of zeros in ll with same length, if no data
ll_obs <- numeric(length(model))
} else {
lambda <- model + rexp(n = length(model), rate = exp_noise)
ll_obs <- dpois(x = obs, lambda = lambda, log = TRUE)
}
ll_obs
}
combined_compare <- function(state, observed, pars = NULL) {
result <- 0
#data_size <- sum(mass_cluster_freq_1)
#model_size = 15000
data_size <- sum(unlist(observed))
model_size = sum(unlist(state))
exp_noise <- 1e6
for (i in 1:(nrow(state)-1)){
if (is.na(observed[[as.character(i)]])) {
# Creates vector of zeros in ll with same length, if no data
ll_obs <- numeric(length( state[1+i, , drop = TRUE]/model_size * data_size))
} else {
lambda <-  state[1+i, , drop = TRUE]/model_size * data_size + rexp(n = length( state[1+i, , drop = TRUE]/model_size * data_size), rate = exp_noise)
ll_obs <- dpois(x = observed[[as.character(i)]], lambda = lambda, log = TRUE)
}
result <- result + ll_obs
}
result
}
seq_clusters <- readRDS("Navajo_PP.rds")
intermed_gene_presence_absence_consensus <- readRDS(file = "Navajo_ggCaller_intermed_consensus.rds")
intermed_gene_presence_absence_consensus_matrix <- sapply(intermed_gene_presence_absence_consensus[-1,-1],as.double)
model_start_pop <- readRDS(file = "Navajo_model_start_pop.rds")
delta_ranking <- readRDS(file = "Navajo_delta_ranking.rds")
mass_cluster_freq_1 <- readRDS(file = "Navajo_cluster_freqs_1.rds")
mass_cluster_freq_2 <- readRDS(file = "Navajo_cluster_freqs_2.rds")
mass_cluster_freq_3 <- readRDS(file = "Navajo_cluster_freqs_3.rds")
mass_cluster_freq_4 <- readRDS(file = "Navajo_cluster_freqs_4.rds")
mass_cluster_freq_5 <- readRDS(file = "Navajo_cluster_freqs_5.rds")
mass_cluster_freq_6 <- readRDS(file = "Navajo_cluster_freqs_6.rds")
mass_cluster_freq_7 <- readRDS(file = "Navajo_cluster_freqs_7.rds")
mass_cluster_freq_8 <- readRDS(file = "Navajo_cluster_freqs_8.rds")
mass_cluster_freq_9 <- readRDS(file = "Navajo_cluster_freqs_9.rds")
mass_cluster_freq_10 <- readRDS(file = "Navajo_cluster_freqs_10.rds")
mass_cluster_freq_11 <- readRDS(file = "Navajo_cluster_freqs_11.rds")
mass_cluster_freq_12 <- readRDS(file = "Navajo_cluster_freqs_12.rds")
mass_cluster_freq_13 <- readRDS(file = "Navajo_cluster_freqs_13.rds")
mass_cluster_freq_14 <- readRDS(file = "Navajo_cluster_freqs_14.rds")
mass_cluster_freq_15 <- readRDS(file = "Navajo_cluster_freqs_15.rds")
mass_VT <- readRDS(file = "Navajo_VT.rds")
mass_clusters <- length(unique(seq_clusters$Cluster))
avg_cluster_freq <- rep(1/mass_clusters, mass_clusters)
output_filename <- "Navajo_ggCaller_PopPUNK"
dt <- 1/12
peripost_mass_cluster_freq <- data.frame("year" = 1:14, rbind(mass_cluster_freq_2,mass_cluster_freq_3,mass_cluster_freq_4,mass_cluster_freq_5,mass_cluster_freq_6, mass_cluster_freq_7, mass_cluster_freq_8, mass_cluster_freq_9,mass_cluster_freq_10, mass_cluster_freq_11, mass_cluster_freq_12, mass_cluster_freq_13,mass_cluster_freq_14))
peripost_mass_cluster_freq <- data.frame("year" = 1:14, rbind(mass_cluster_freq_2,mass_cluster_freq_3,mass_cluster_freq_4,mass_cluster_freq_5,mass_cluster_freq_6, mass_cluster_freq_7, mass_cluster_freq_8, mass_cluster_freq_9,mass_cluster_freq_10, mass_cluster_freq_11, mass_cluster_freq_12, mass_cluster_freq_13,mass_cluster_freq_14,mass_cluster_freq_15))
names(peripost_mass_cluster_freq) <- c("year", as.character(1:mass_clusters))
vacc_time <- 5
threads_total <- 1
worker_nodes <- 1
stoch_run <- FALSE
fitting_mass_data <- mcstate::particle_filter_data(data = peripost_mass_cluster_freq,
time = "year",
rate = 1 / dt,
initial_time = 0)
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
# Using MCMC to infer parameters
pmcmc_sigma_f <- mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0, max = 1)
#pmcmc_sigma_w <- 0
pmcmc_sigma_w <- -1000
pmcmc_prop_f <- mcstate::pmcmc_parameter("prop_f", 0.2, min = 0, max = 1)
pmcmc_m <- mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1)
pmcmc_v <- mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)
species_no <- mass_clusters
no_clusters <- mass_clusters
gene_no <- nrow(intermed_gene_presence_absence_consensus_matrix)
Pop_ini <- model_start_pop
Pop_eq <- model_start_pop
Genotypes <- intermed_gene_presence_absence_consensus_matrix
capacity <- sum(model_start_pop)
delta <- delta_ranking
vaccTypes <- mass_VT
#vacc_time <- 0
#dt <- 1/36
migVec <- avg_cluster_freq
complex_params = list(species_no = species_no, Pop_ini = Pop_ini, Pop_eq = Pop_eq, Genotypes = intermed_gene_presence_absence_consensus[-1,-1], capacity = capacity, delta = delta, vaccTypes = vaccTypes, gene_no = gene_no, vacc_time = vacc_time, dt = dt, migVec = migVec, sigma_w = pmcmc_sigma_w)
make_transform <- function(m) {
function(theta) {
as_double_mtx <- function(x){
sapply(x,as.double)
}
c(lapply(m, as_double_mtx), as.list(theta))
}
}
take_list <- function(x){
print(x$Genotype)
}
transform <- function() {
make_transform(complex_params)}
transformed_params <<- make_transform(complex_params)
proposal_matrix <- diag(0.1,4) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 01), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars$initial()
#WF$public_methods$has_openmp()
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
n_steps <- 5
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 1)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
n_steps <- 1000
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains =4, n_workers = 4,
n_threads_total = 4)
worker_nodes <- 4
threads_total <- 4
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains =4, n_workers = worker_nodes,
n_threads_total = threads_total)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run, burnin = 250, thin = 1)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
print(parameter_mean_hpd)
exp(-1.7702000)
exp(-2.5844077)
det_mcmc1 <- coda::as.mcmc(cbind(det_pmcmc_run$probabilities, det_pmcmc_run$pars))
plot(det_mcmc1)
processed_chains$probabilities[nrow(processed_chains$probabilities),2]
print("det_mcmc_1 mean log likelihood")
mean(processed_chains$probabilities[,2])
det_proposal_matrix <- cov(processed_chains$pars)
#det_mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0.075, max = 0.22), mcstate::pmcmc_parameter("sigma_w", 0.05, min = 0.000001, max = 0.0749), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 0.2), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 0.5)), det_proposal_matrix, make_transform(complex_params))
det_mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", parameter_mean_hpd[1], min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", parameter_mean_hpd[2], min = 0, max = 1),mcstate::pmcmc_parameter("m", parameter_mean_hpd[3], min = -1000, max = 0), mcstate::pmcmc_parameter("v", parameter_mean_hpd[4], min = 0, max = 1)), det_proposal_matrix, make_transform(complex_params))
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
n_steps <- 5
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 1)
det_pmcmc_run <- mcstate::pmcmc(det_mcmc_pars, det_filter, control = control)
n_steps <- 10000
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 4, n_workers = n_workers, n_threads_total = n_threads)
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 4, n_workers = worker_nodes, n_threads_total = n_threads)
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 4, n_workers = worker_nodes, n_threads_total = threads_total)
det_pmcmc_run2 <- mcstate::pmcmc(det_mcmc_pars, det_filter, control = control)
n_steps <- 5000
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 4, n_workers = worker_nodes, n_threads_total = threads_total)
det_pmcmc_run2 <- mcstate::pmcmc(det_mcmc_pars, det_filter, control = control)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run2, burnin = 1000, thin = 1)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
print(parameter_mean_hpd)
det_mcmc2 <- coda::as.mcmc(cbind(det_pmcmc_run2$probabilities, det_pmcmc_run2$pars))
plot(det_mcmc2)
print("det_mcmc_2 final log likelihood")
processed_chains$probabilities[nrow(processed_chains$probabilities),2]
print("det_mcmc_2 mean log likelihood")
mean(processed_chains$probabilities[,2])
saveRDS(det_pmcmc_run2, paste(output_filename, "_det_pmcmc_run2.rds", sep = ""))
