# this lead to a start population that is way too evenly distributed across the different clusters
# instead, I could maybe use the existing PP_model_start_pop and distribute it to the different serotypes?
PPsero_startpop2 <-  matrix(0, nrow = length(unique(PopPUNK_clusters$Cluster)), ncol = length(unique(PopPUNK_clusters$Serotype)))
for (i in 1:length(unique(PopPUNK_clusters$Cluster))) {
PPsero_startpop2[i,] <- round((PPxSero_matrix[i,] * Navajo_model_start_pop[i])/sum(PPxSero_matrix[i,]))
}
saveRDS(PPsero_startpop2, "Navajo_PPsero_startpop.rds")
# this is very close to the original PP_model_start_pop
# maybe I am giving out too much information because the serotype distribution is exactly the real one?
plot(rowSums(Navajo_cluster_freqs_sero[[1]])/sum(rowSums(Navajo_cluster_freqs_sero[[1]])))
points(rowSums(PPsero_startpop2)/sum(rowSums(PPsero_startpop2)), col = "red")
plot(colSums(Navajo_cluster_freqs_sero[[1]])/sum(colSums(Navajo_cluster_freqs_sero[[1]])))
points(colSums(PPsero_startpop2)/sum(colSums(PPsero_startpop2)), col = "red")
# the serotype distribution is quite far off
# same as PPsero_startpop6 for Mass
PPsero_startpop3 <- matrix(0, nrow = length(unique(PopPUNK_clusters$Cluster)), ncol = length(unique(PopPUNK_clusters$Serotype)))
PP_expand_factor <- 15000 / sum(Navajo_cluster_freqs_sero[[1]])
exp_noise <- 1000
for (i in 1:nrow(PPsero_startpop3)) {
PPsero_startpop3[i,] <- (sapply((Navajo_cluster_freqs_sero[[1]][i,] + rexp(n = length(Navajo_cluster_freqs_sero[[1]][i,]), rate = exp_noise)) * PP_expand_factor, rpois, n=1)) + ceiling(PPxSero_matrix_prob2[i,])
#PPsero_startpop5[i,] <- PP_mass_cluster_freq_1_sero[i,] + ceiling(PPxSero_matrix_prob[i,])
}
saveRDS(PPsero_startpop3, "Navajo_PPsero_startpop.rds")
plot(rowSums(Navajo_cluster_freqs_sero[[1]])/sum(rowSums(Navajo_cluster_freqs_sero[[1]])))
points(rowSums(PPsero_startpop3)/sum(rowSums(PPsero_startpop3)), col = "red")
plot(colSums(Navajo_cluster_freqs_sero[[1]])/sum(colSums(Navajo_cluster_freqs_sero[[1]])))
points(colSums(PPsero_startpop3)/sum(colSums(PPsero_startpop3)), col = "red")
# serotype VT vector
#SeroVT <- rep(0, length(unique(PopPUNK_clusters$Serotype)))
#for (i in 1:nrow(PopPUNK_clusters)) {
#  SeroVT[SerotypeToIndex_dict[PopPUNK_clusters$Serotype[i]]] <- as.integer(PopPUNK_clusters$VT[i]=="VT")
#}
#saveRDS(SeroVT, "Navajo_SeroVT.rds")
# serotype VT vector
SeroVT <- rep(0, length(unique(PopPUNK_clusters$Serotype)))
for (i in 1:nrow(PopPUNK_clusters)) {
SeroVT[SerotypeToIndex_dict[PopPUNK_clusters$Serotype[i]]] <- as.integer(PopPUNK_clusters$VT[i]=="VT")
}
saveRDS(SeroVT, "Navajo_SeroVT.rds")
# serotype VT vector PCV13
SeroVT_PCV13 <- rep(0, length(unique(PopPUNK_clusters$Serotype)))
for (i in 1:nrow(PopPUNK_clusters)) {
SeroVT_PCV13[SerotypeToIndex_dict[PopPUNK_clusters$Serotype[i]]] <- as.integer(PopPUNK_clusters$VT_PCV13[i]=="VT")
}
saveRDS(SeroVT_PCV13, "Navajo_SeroVT_PCV13.rds")
# Create PP clusters, split by serotype
#calculate the frequency of the gene clusters and year and serotype
Navajo_mass_cluster_freq_1_sero <- matrix(0,nrow = mass_clusters, ncol = length(unique(PopPUNK_clusters$Serotype)))
for (i in 1:mass_clusters){
for (k in unique(PopPUNK_clusters$Serotype)){
Navajo_mass_cluster_freq_1_sero[i,which(unique(PopPUNK_clusters$Serotype)==k)] <- length(which(PopPUNK_clusters[which(PopPUNK_clusters$Cluster==unique(PopPUNK_clusters$Cluster)[i]),][PopPUNK_clusters[which(PopPUNK_clusters$Cluster==unique(PopPUNK_clusters$Cluster)[i]),]$Serotype ==k, ]$"SeqYear"==sort(unique(PopPUNK_clusters$SeqYear))[1]))
}
}
#save sequence cluster frequencies
saveRDS(Navajo_mass_cluster_freq_1_sero, file = "Navajo_mass_cluster_freq_1_sero.rds")
PPxSero_matrix_prob2 <- readRDS("Navajo_PPsero_mig.rds")
Navajo_PPsero_startpop3 <- matrix(0,nrow = mass_clusters, ncol = length(unique(PopPUNK_clusters$Serotype)))
PP_expand_factor <- 15000 / sum(Navajo_mass_cluster_freq_1_sero)
exp_noise <- 1000
for (i in 1:nrow(Navajo_PPsero_startpop3)) {
Navajo_PPsero_startpop3[i,] <- (sapply((Navajo_mass_cluster_freq_1_sero[i,] + rexp(n = length(Navajo_mass_cluster_freq_1_sero[i,]), rate = exp_noise)) * PP_expand_factor, rpois, n=1)) + ceiling(PPxSero_matrix_prob2[i,])
}
plot(colSums(Navajo_mass_cluster_freq_1_sero)/sum(colSums(Navajo_mass_cluster_freq_1_sero)))
points(colSums(Navajo_PPsero_startpop3)/sum(colSums(Navajo_PPsero_startpop3)), col = "red")
plot(rowSums(Navajo_mass_cluster_freq_1_sero)/sum((Navajo_mass_cluster_freq_1_sero)))
points(rowSums(Navajo_PPsero_startpop3)/sum(rowSums(Navajo_PPsero_startpop3)), col = "red")
saveRDS(Navajo_PPsero_startpop3, file = "Navajo_PPsero_startpop3.rds")
seq_clusters <- readRDS("Navajo_PP.rds")
intermed_gene_presence_absence_consensus <- readRDS(file = "Navajo_ggCaller_intermed_consensus.rds")
intermed_gene_presence_absence_consensus_matrix <- sapply(intermed_gene_presence_absence_consensus[-1,-1],as.double)
delta_ranking <- readRDS(file = "Navajo_delta_ranking.rds")
mass_cluster_freq_1 <- readRDS(file = "Navajo_cluster_freqs_1.rds")
mass_cluster_freq_2 <- readRDS(file = "Navajo_cluster_freqs_2.rds")
mass_cluster_freq_3 <- readRDS(file = "Navajo_cluster_freqs_3.rds")
mass_cluster_freq_4 <- readRDS(file = "Navajo_cluster_freqs_4.rds")
mass_cluster_freq_5 <- readRDS(file = "Navajo_cluster_freqs_5.rds")
mass_cluster_freq_6 <- readRDS(file = "Navajo_cluster_freqs_6.rds")
mass_cluster_freq_7 <- readRDS(file = "Navajo_cluster_freqs_7.rds")
mass_cluster_freq_8 <- readRDS(file = "Navajo_cluster_freqs_8.rds")
mass_cluster_freq_9 <- readRDS(file = "Navajo_cluster_freqs_9.rds")
mass_cluster_freq_10 <- readRDS(file = "Navajo_cluster_freqs_10.rds")
mass_cluster_freq_11 <- readRDS(file = "Navajo_cluster_freqs_11.rds")
mass_cluster_freq_12 <- readRDS(file = "Navajo_cluster_freqs_12.rds")
mass_cluster_freq_13 <- readRDS(file = "Navajo_cluster_freqs_13.rds")
mass_cluster_freq_14 <- readRDS(file = "Navajo_cluster_freqs_14.rds")
mass_cluster_freq_15 <- readRDS(file = "Navajo_cluster_freqs_15.rds")
mass_clusters <- length(unique(seq_clusters$Cluster))
sero_no = length(unique(seq_clusters$Serotype))
mass_clusters
#model_start_pop <- readRDS(file = "Navajo_PPsero_startpop.rds")
model_start_pop <- readRDS(file = "Navajo_PPsero_startpop.rds")
# add 6A to PCV7 because there is strong cross-immunity btw PVC7 and 6A (4.Croucher, N. J. et al. Population genomics of post-vaccine changes in pneumococcal epidemiology. Nat. Genet. 45, 656â€“663 (2013).)
#PCV7_VTs <- rep(0,sero_no)
#names(PCV7_VTs) <- unique(seq_clusters$Serotype)
#PCV7_VTs[intersect(PCV7_VTs,c("4", "6A","6B", "9V", "14", "18C", "19F", "23F"))] <- 1
#vaccTypes1 <- unname(PCV7_VTs)
vaccTypes1 <- readRDS("Navajo_SeroVT.rds")
vaccTypes2 <- readRDS("Navajo_SeroVT_PCV13.rds")
mass_clusters <- length(unique(seq_clusters$Cluster))
avg_cluster_freq <- readRDS(file = "Navajo_PPsero_mig.rds")
dt <- 1/12
peripost_mass_cluster_freq <- data.frame("year" = 1:14, rbind(mass_cluster_freq_2,mass_cluster_freq_3,mass_cluster_freq_4,mass_cluster_freq_5,mass_cluster_freq_6, mass_cluster_freq_7,mass_cluster_freq_8,mass_cluster_freq_9, mass_cluster_freq_10, mass_cluster_freq_11,mass_cluster_freq_12, mass_cluster_freq_13, mass_cluster_freq_14,mass_cluster_freq_15))
names(peripost_mass_cluster_freq) <- c("year", as.character(1:mass_clusters))
vacc_time1 <- 2
vacc_time2 <- 12
output_filename <- "Navajo_PPxSero2vacc_ggCaller_PopPUNK"
fitting_mass_data <- mcstate::particle_filter_data(data = peripost_mass_cluster_freq,
time = "year",
rate = 1 / dt,
initial_time = 0)
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
# Using MCMC to infer parameters
pmcmc_sigma_f <- mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0, max = 1)
#pmcmc_sigma_w <- 0
pmcmc_sigma_w <- -1000
pmcmc_prop_f <- mcstate::pmcmc_parameter("prop_f", 0.2, min = 0, max = 1)
pmcmc_m <- mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1)
pmcmc_v <- mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)
species_no <- mass_clusters
no_clusters <- mass_clusters
gene_no <- nrow(intermed_gene_presence_absence_consensus_matrix)
Pop_ini <- data.frame(model_start_pop)
Pop_eq <- rowSums(model_start_pop)
Genotypes <- intermed_gene_presence_absence_consensus_matrix
capacity <- sum(model_start_pop)
delta <- delta_ranking
vaccTypes1 <- vaccTypes1
vaccTypes2 <- vaccTypes2
migVec <- data.frame(avg_cluster_freq)
complex_params = list(species_no = species_no, Pop_ini = Pop_ini, Pop_eq = Pop_eq, Genotypes = intermed_gene_presence_absence_consensus[-1,-1], capacity = capacity, delta = delta, vaccTypes1 = vaccTypes1, vaccTypes2 = vaccTypes2, gene_no = gene_no, vacc_time1 = vacc_time1, vacc_time2 = vacc_time2, dt = dt, sigma_w = pmcmc_sigma_w, migVec = (migVec), sero_no = sero_no)
make_transform <- function(m) {
function(theta) {
as_double_mtx <- function(x){
sapply(x,as.double)
}
c(lapply(m, as_double_mtx), as.list(theta))
}
}
proposal_matrix <- diag(0.1,4) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
index <- function(info) {
list(run = c(sum_clust = info$index$Pop_tot),
state = c(Pop = info$index$Pop))
}
#proposal_matrix <- diag(0.1,4) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
# here, all parameters are proposed independently.
# think about this, this might not actually be true
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(pmcmc_sigma_f, pmcmc_sigma_w, pmcmc_prop_f, pmcmc_m, pmcmc_v), proposal_matrix, transform)
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 01), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = -2), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
proposal_matrix <- diag(c(exp(1), 0.1, exp(1), 0.1))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", runif(n=1, min=-10, max=0), min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", runif(n=1, min=0, max=1), min = 0, max = 1), mcstate::pmcmc_parameter("m", runif(n=1, min=-10, max=0), min = -1000, max = 0), mcstate::pmcmc_parameter("v", runif(n=1, min=0, max=1), min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars$initial()
#WF$public_methods$has_openmp()
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
index = index,
compare = combined_compare)
n_steps <- 5
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 1)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
exp(-0.7555261)
2000/5
20000/400
5500/60
5500/92
5500/91
10500/90
117/4
117/24
20500/90
228/24
# 4-parameter model with GPSCs
Mass_4param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2025_01_13/Mass_GPSCs/PPxSero_ggCaller_PopPUNK_4param_det_pmcmc_run2.rds")
Mass_4param_mcmc2_probs <- coda::as.mcmc(cbind(Mass_4param_mcmc2$probabilities, Mass_4param_mcmc2$pars))
#coda::effectiveSize(Mass_4param_mcmc2_probs)
#summary(coda::as.mcmc(Mass_4param_mcmc2_probs))
Mass_likelihood_4param <- median(Mass_4param_mcmc2_probs[,"log_likelihood"])
#mean(Mass_4param_mcmc2_probs[,"log_likelihood"])
param_estimates <- map_estimate(Mass_4param_mcmc2$pars)
library(bayestestR)
#mean(Mass_4param_mcmc2_probs[,"log_likelihood"])
param_estimates <- map_estimate(Mass_4param_mcmc2$pars)
param_estimates
# -3.27, 0.24, -4.36, 0.08
# GPSCs:
# -3.24, 0.24, -4.31, 0.08
param_mean <- apply(Mass_4param_mcmc2_probs, 2, mean)
param_mean
c(param_mean)
as.vector(param_mean)
percentile95_low <- apply(Mass_4param_mcmc2_probs,2,quantile,.025)
percentile95_up <- apply(Mass_4param_mcmc2_probs,2,quantile,.975)
percentile95_low
percentile95_up
# (old values)
#     log_prior log_likelihood  log_posterior        sigma_f         prop_f              m              v
#    0.00000000  -236.18187830  -236.18187830    -3.29342091     0.27971311    -4.31740603     0.08169713
#    0.00000000  -240.56908318  -240.56908318    -4.18698747     0.11780847    -4.80025991     0.06278332
#     0.0000000   -233.6428808   -233.6428808     -2.1707973      0.4555952     -3.8273690      0.1059178
rm(Mass_4param_mcmc2)
rm(Mass_4param_mcmc2_probs)
# 4-parameter model GPSC version
UK_4param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2025_01_13/UK_GPSCs/UK_PPxSero_ggCaller_PopPUNK_4param_det_pmcmc_run2.rds")
UK_4param_mcmc2_probs <- coda::as.mcmc(cbind(UK_4param_mcmc2$probabilities, UK_4param_mcmc2$pars))
#coda::effectiveSize(UK_4param_mcmc2_probs)
#summary(coda::as.mcmc(UK_4param_mcmc2_probs))
UK_likelihood_4param <- median(UK_4param_mcmc2_probs[,"log_likelihood"])
#mean(UK_4param_mcmc2_probs[,"log_likelihood"])
param_mean <- apply(UK_4param_mcmc2_probs, 2, mean)
param_mean
percentile95_low <- apply(UK_4param_mcmc2_probs,2,quantile,.025)
percentile95_up <- apply(UK_4param_mcmc2_probs,2,quantile,.975)
percentile95_low
percentile95_up
# old
#     log_prior log_likelihood  log_posterior        sigma_f         prop_f              m              v
#     0.0000000   -562.2620742   -562.2620742     -3.1745767      0.1432364     -3.9757905      0.0910330
#    0.00000000  -566.34600127  -566.34600127    -3.62415671     0.10767921    -4.26552560     0.07626173
#     0.0000000   -560.4980507   -560.4980507     -2.5274892      0.1524845     -3.6791013      0.1069834
rm(UK_4param_mcmc2)
# 4-parameter model GPSC
Navajo_4param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2025_01_13/Navajo_GPSCs/Navajo_PPxSero2vacc_ggCaller_PopPUNK_4param_det_pmcmc_run2.rds")
Navajo_4param_mcmc2_probs <- coda::as.mcmc(cbind(Navajo_4param_mcmc2$probabilities, Navajo_4param_mcmc2$pars))
#coda::effectiveSize(Navajo_4param_mcmc2_probs)
#summary(coda::as.mcmc(Navajo_4param_mcmc2_probs))
Navajo_likelihood_4param <- median(Navajo_4param_mcmc2_probs[,"log_likelihood"])
#mean(Navajo_4param_mcmc2_probs[,"log_likelihood"])
param_mean <- apply(Navajo_4param_mcmc2_probs, 2, mean)
param_mean
percentile95_low <- apply(Navajo_4param_mcmc2_probs,2,quantile,.025)
percentile95_up <- apply(Navajo_4param_mcmc2_probs,2,quantile,.975)
param_mean
percentile95_low
percentile95_up
-8.222433e+02
1.135171e-03
#     log_prior log_likelihood  log_posterior        sigma_f         prop_f              m              v
#     0.0000000   -775.4195261   -775.4195261     -4.3750991      0.9006583     -2.8662851      0.2635598
#     0.0000000   -779.1645089   -779.1645089     -5.0194125      0.7804437     -3.3327171      0.1113736
#     0.0000000   -773.3687772   -773.3687772     -3.6963467      0.9960815     -2.3210855      0.5919767
rm(Navajo_4param_mcmc2)
# 4-parameter model GPSC
Nepal_4param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2025_01_13/Nepal_GPSCs/Nepal_PPxSero2vacc_ggCaller_PopPUNK_4param_det_pmcmc_run2.rds")
# 4-parameter model GPSC
Nepal_4param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2025_01_13/Nepal_GPSCs/Nepal_PPxSero_ggCaller_PopPUNK_4param_det_pmcmc_run2.rds")
Nepal_4param_mcmc2_probs <- coda::as.mcmc(cbind(Nepal_4param_mcmc2$probabilities, Nepal_4param_mcmc2$pars))
#coda::effectiveSize(Nepal_4param_mcmc2_probs)
#summary(coda::as.mcmc(Nepal_4param_mcmc2_probs))
Nepal_likelihood_4param <- median(Nepal_4param_mcmc2_probs[,"log_likelihood"])
#mean(Nepal_4param_mcmc2_probs[,"log_likelihood"])
param_mean <- apply(Nepal_4param_mcmc2_probs, 2, mean)
percentile95_low <- apply(Nepal_4param_mcmc2_probs,2,quantile,.025)
percentile95_up <- apply(Nepal_4param_mcmc2_probs,2,quantile,.975)
param_mean
percentile95_low
percentile95_up
# create color vector
col_clb <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") #8 colorblind friendly colors
colours_UKMassUnfiltered_90 <- rep("grey", length(match_UKMassUnfiltered_90))
names(colours_UKMassUnfiltered_90) <- names(match_UKMassUnfiltered_90)
colours_UKMassUnfiltered_90[names(which(UK_underNFDS[names(match_UKMassUnfiltered_90)]==1))] <- col_clb[2]
colours_UKMassUnfiltered_90[names(which(UK_underNFDS[names(match_UKMassUnfiltered_90)]==1))] <- col_clb[2]
colours_UKMassUnfiltered_90[match_MassUKUnfiltered_90[names(which(Mass_underNFDS[match_UKMassUnfiltered_90]==1))]] <- col_clb[3]
colours_UKMassUnfiltered_90[intersect(names(which(UK_underNFDS[names(match_UKMassUnfiltered_90)]==1)),match_MassUKUnfiltered_90[names(which(Mass_underNFDS[match_UKMassUnfiltered_90]==1))])] <- col_clb[4]
par(pty="s")
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_90)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_90[names(match_UKMassUnfiltered_90)]], xlab = "UK gene frequencies", ylab = "Mass gene frequencies",main="All Gene Frequencies, 90% sequence identity", col = colours_UKMassUnfiltered_90, pch = 19)
colours_UKMassUnfiltered_90[intersect(names(which(UK_underNFDS[names(match_UKMassUnfiltered_90)]==1)),match_MassUKUnfiltered_90[names(which(Mass_underNFDS[match_UKMassUnfiltered_90]==1))])] <- col_clb[8]
par(pty="s")
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_90)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_90[names(match_UKMassUnfiltered_90)]], xlab = "UK gene frequencies", ylab = "Mass gene frequencies",main="All Gene Frequencies, 90% sequence identity", col = colours_UKMassUnfiltered_90, pch = 19)
colours_UKMassUnfiltered_90 <- rep("grey", length(match_UKMassUnfiltered_90))
names(colours_UKMassUnfiltered_90) <- names(match_UKMassUnfiltered_90)
colours_UKMassUnfiltered_90[names(which(UK_underNFDS[names(match_UKMassUnfiltered_90)]==1))] <- col_clb[2]
colours_UKMassUnfiltered_90[match_MassUKUnfiltered_90[names(which(Mass_underNFDS[match_UKMassUnfiltered_90]==1))]] <- col_clb[3]
colours_UKMassUnfiltered_90[intersect(names(which(UK_underNFDS[names(match_UKMassUnfiltered_90)]==1)),match_MassUKUnfiltered_90[names(which(Mass_underNFDS[match_UKMassUnfiltered_90]==1))])] <- col_clb[8]
colours_UKMassUnfiltered_95 <- rep("grey", length(match_UKMassUnfiltered_95))
names(colours_UKMassUnfiltered_95) <- names(match_UKMassUnfiltered_95)
colours_UKMassUnfiltered_95[names(which(UK_underNFDS[names(match_UKMassUnfiltered_95)]==1))] <- col_clb[2]
colours_UKMassUnfiltered_95[match_MassUKUnfiltered_95[names(which(Mass_underNFDS[match_UKMassUnfiltered_95]==1))]] <- col_clb[3]
colours_UKMassUnfiltered_95[intersect(names(which(UK_underNFDS[names(match_UKMassUnfiltered_95)]==1)),match_MassUKUnfiltered_95[names(which(Mass_underNFDS[match_UKMassUnfiltered_95]==1))])] <- col_clb[8]
colours_UKMassUnfiltered_99 <- rep("grey", length(match_UKMassUnfiltered_99))
names(colours_UKMassUnfiltered_99) <- names(match_UKMassUnfiltered_99)
colours_UKMassUnfiltered_99[names(which(UK_underNFDS[names(match_UKMassUnfiltered_99)]==1))] <- col_clb[2]
colours_UKMassUnfiltered_99[match_MassUKUnfiltered_99[names(which(Mass_underNFDS[match_UKMassUnfiltered_99]==1))]] <- col_clb[3]
colours_UKMassUnfiltered_99[intersect(names(which(UK_underNFDS[names(match_UKMassUnfiltered_99)]==1)),match_MassUKUnfiltered_99[names(which(Mass_underNFDS[match_UKMassUnfiltered_99]==1))])] <- col_clb[8]
par(pty="s")
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_90)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_90[names(match_UKMassUnfiltered_90)]], xlab = "UK gene frequencies", ylab = "Mass gene frequencies",main="All Gene Frequencies, 90% sequence identity", col = colours_UKMassUnfiltered_90, pch = 19)
abline(0,1)
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_95)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_95[names(match_UKMassUnfiltered_95)]], xlab = "UK gene frequencies", ylab = "Mass gene frequencies",main="All Gene Frequencies, 95% sequence identity", col = colours_UKMassUnfiltered_95, pch = 19)
abline(0,1)
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_99)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_99[names(match_UKMassUnfiltered_99)]], xlab = "UK gene frequencies", ylab = "Mass gene frequencies",main="All Gene Frequencies, 99% sequence identity", col = colours_UKMassUnfiltered_99, pch = 19)
abline(0,1)
# UK genes under NFDS 4-param model (Dec 2024): 0.1432
# Mass genes under NFDS 4-param model (Dec 2024): 0.2797
# gene under NFDS if delta[i] <= prop_f * gene_no
Mass_delta_ranking_names <- Mass_delta_ranking
names(Mass_delta_ranking_names) <- Mass_ggC_intermed_gene_names
Mass_intermed_gene_underNFDS <- rep(0, length(Mass_delta_ranking_names))
names(Mass_intermed_gene_underNFDS) <- names(Mass_delta_ranking_names)
# new GPSC fit suggests Mass 0.2784
Mass_intermed_gene_underNFDS[which((Mass_delta_ranking_names <= 0.2784 * length(Mass_delta_ranking_names)))] <- 1
#if(Mass_delta_ranking <= 0.2797 * length(Mass_delta_ranking)) 1 else 0
UK_delta_ranking_names <- UK_delta_ranking
names(UK_delta_ranking_names) <- UK_ggC_intermed_gene_names
UK_intermed_gene_underNFDS <- rep(0, length(UK_delta_ranking_names))
names(UK_intermed_gene_underNFDS) <- names(UK_delta_ranking_names)
# and UK GPSC fit: 0.2095
UK_intermed_gene_underNFDS[which((UK_delta_ranking_names <= 0.2095 * length(UK_delta_ranking_names)))] <- 1
# expand this vector to all genes, NFDS or not
# Mass
Mass_underNFDS <- rep(0, length(Mass_ggC_all_gene_freqs_dict))
names(Mass_underNFDS) <- readRDS("Mass_ggC_all_gene_names.rds")
Mass_underNFDS[names(which(Mass_intermed_gene_underNFDS==1))] <- 1
# UK
UK_underNFDS <- rep(0, length(UK_ggC_all_gene_freqs_dict))
names(UK_underNFDS) <- readRDS("UK_ggC_all_gene_names.rds")
UK_underNFDS[names(which(UK_intermed_gene_underNFDS==1))] <- 1
# create color vector
col_clb <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") #8 colorblind friendly colors
colours_UKMassUnfiltered_90 <- rep("grey", length(match_UKMassUnfiltered_90))
names(colours_UKMassUnfiltered_90) <- names(match_UKMassUnfiltered_90)
colours_UKMassUnfiltered_90[names(which(UK_underNFDS[names(match_UKMassUnfiltered_90)]==1))] <- col_clb[2]
colours_UKMassUnfiltered_90[match_MassUKUnfiltered_90[names(which(Mass_underNFDS[match_UKMassUnfiltered_90]==1))]] <- col_clb[3]
colours_UKMassUnfiltered_90[intersect(names(which(UK_underNFDS[names(match_UKMassUnfiltered_90)]==1)),match_MassUKUnfiltered_90[names(which(Mass_underNFDS[match_UKMassUnfiltered_90]==1))])] <- col_clb[8]
colours_UKMassUnfiltered_95 <- rep("grey", length(match_UKMassUnfiltered_95))
names(colours_UKMassUnfiltered_95) <- names(match_UKMassUnfiltered_95)
colours_UKMassUnfiltered_95[names(which(UK_underNFDS[names(match_UKMassUnfiltered_95)]==1))] <- col_clb[2]
colours_UKMassUnfiltered_95[match_MassUKUnfiltered_95[names(which(Mass_underNFDS[match_UKMassUnfiltered_95]==1))]] <- col_clb[3]
colours_UKMassUnfiltered_95[intersect(names(which(UK_underNFDS[names(match_UKMassUnfiltered_95)]==1)),match_MassUKUnfiltered_95[names(which(Mass_underNFDS[match_UKMassUnfiltered_95]==1))])] <- col_clb[8]
colours_UKMassUnfiltered_99 <- rep("grey", length(match_UKMassUnfiltered_99))
names(colours_UKMassUnfiltered_99) <- names(match_UKMassUnfiltered_99)
colours_UKMassUnfiltered_99[names(which(UK_underNFDS[names(match_UKMassUnfiltered_99)]==1))] <- col_clb[2]
colours_UKMassUnfiltered_99[match_MassUKUnfiltered_99[names(which(Mass_underNFDS[match_UKMassUnfiltered_99]==1))]] <- col_clb[3]
colours_UKMassUnfiltered_99[intersect(names(which(UK_underNFDS[names(match_UKMassUnfiltered_99)]==1)),match_MassUKUnfiltered_99[names(which(Mass_underNFDS[match_UKMassUnfiltered_99]==1))])] <- col_clb[8]
par(pty="s")
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_90)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_90[names(match_UKMassUnfiltered_90)]], xlab = "UK gene frequencies", ylab = "Mass gene frequencies",main="All Gene Frequencies, 90% sequence identity", col = colours_UKMassUnfiltered_90, pch = 19)
abline(0,1)
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_95)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_95[names(match_UKMassUnfiltered_95)]], xlab = "UK gene frequencies", ylab = "Mass gene frequencies",main="All Gene Frequencies, 95% sequence identity", col = colours_UKMassUnfiltered_95, pch = 19)
abline(0,1)
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_99)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_99[names(match_UKMassUnfiltered_99)]], xlab = "UK gene frequencies", ylab = "Mass gene frequencies",main="All Gene Frequencies, 99% sequence identity", col = colours_UKMassUnfiltered_99, pch = 19)
abline(0,1)
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_95)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_95[names(match_UKMassUnfiltered_95)]], xlab = "UK gene frequencies", ylab = "Mass gene frequencies",main="All Gene Frequencies, 95% sequence identity", col = colours_UKMassUnfiltered_95, pch = 19)
abline(0,1)
length(which(colours_UKMassUnfiltered_95 == col_clb[2]))
length(which(colours_UKMassUnfiltered_95 == col_clb[3]))
length(which(colours_UKMassUnfiltered_95 == col_clb[8]))
length(which(colours_UKMassUnfiltered_90 == col_clb[8]))
length(which(colours_UKMassUnfiltered_90 == col_clb[2]))
length(which(colours_UKMassUnfiltered_90 == col_clb[3]))
length(which(colours_UKMassUnfiltered_99 == col_clb[3]))
length(which(colours_UKMassUnfiltered_99 == col_clb[2]))
length(which(colours_UKMassUnfiltered_99 == col_clb[8]))
length(Mass_delta_ranking)
### 13.12.2024
# colour these plots in by whether genes are predicted to be under NFDS or not
Mass_delta_ranking <- readRDS(file = "ggC_delta_ranking.rds")
UK_delta_ranking <- readRDS(file = "UK_delta_ranking.rds")
# UK genes under NFDS 4-param model (Dec 2024): 0.1432
# Mass genes under NFDS 4-param model (Dec 2024): 0.2797
# gene under NFDS if delta[i] <= prop_f * gene_no
Mass_delta_ranking_names <- Mass_delta_ranking
names(Mass_delta_ranking_names) <- Mass_ggC_intermed_gene_names
Mass_intermed_gene_underNFDS <- rep(0, length(Mass_delta_ranking_names))
names(Mass_intermed_gene_underNFDS) <- names(Mass_delta_ranking_names)
# new GPSC fit suggests Mass 0.2784
Mass_intermed_gene_underNFDS[which((Mass_delta_ranking_names <= 0.2784 * length(Mass_delta_ranking_names)))] <- 1
#if(Mass_delta_ranking <= 0.2797 * length(Mass_delta_ranking)) 1 else 0
UK_delta_ranking_names <- UK_delta_ranking
names(UK_delta_ranking_names) <- UK_ggC_intermed_gene_names
UK_intermed_gene_underNFDS <- rep(0, length(UK_delta_ranking_names))
names(UK_intermed_gene_underNFDS) <- names(UK_delta_ranking_names)
# and UK GPSC fit: 0.2095
UK_intermed_gene_underNFDS[which((UK_delta_ranking_names <= 0.2095 * length(UK_delta_ranking_names)))] <- 1
# expand this vector to all genes, NFDS or not
# Mass
Mass_underNFDS <- rep(0, length(Mass_ggC_all_gene_freqs_dict))
names(Mass_underNFDS) <- readRDS("Mass_ggC_all_gene_names.rds")
Mass_underNFDS[names(which(Mass_intermed_gene_underNFDS==1))] <- 1
# UK
UK_underNFDS <- rep(0, length(UK_ggC_all_gene_freqs_dict))
names(UK_underNFDS) <- readRDS("UK_ggC_all_gene_names.rds")
UK_underNFDS[names(which(UK_intermed_gene_underNFDS==1))] <- 1
# create color vector
col_clb <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") #8 colorblind friendly colors
colours_UKMassUnfiltered_90 <- rep("grey", length(match_UKMassUnfiltered_90))
names(colours_UKMassUnfiltered_90) <- names(match_UKMassUnfiltered_90)
colours_UKMassUnfiltered_90[names(which(UK_underNFDS[names(match_UKMassUnfiltered_90)]==1))] <- col_clb[2]
colours_UKMassUnfiltered_90[match_MassUKUnfiltered_90[names(which(Mass_underNFDS[match_UKMassUnfiltered_90]==1))]] <- col_clb[3]
colours_UKMassUnfiltered_90[intersect(names(which(UK_underNFDS[names(match_UKMassUnfiltered_90)]==1)),match_MassUKUnfiltered_90[names(which(Mass_underNFDS[match_UKMassUnfiltered_90]==1))])] <- col_clb[8]
colours_UKMassUnfiltered_95 <- rep("grey", length(match_UKMassUnfiltered_95))
names(colours_UKMassUnfiltered_95) <- names(match_UKMassUnfiltered_95)
colours_UKMassUnfiltered_95[names(which(UK_underNFDS[names(match_UKMassUnfiltered_95)]==1))] <- col_clb[2]
colours_UKMassUnfiltered_95[match_MassUKUnfiltered_95[names(which(Mass_underNFDS[match_UKMassUnfiltered_95]==1))]] <- col_clb[3]
colours_UKMassUnfiltered_95[intersect(names(which(UK_underNFDS[names(match_UKMassUnfiltered_95)]==1)),match_MassUKUnfiltered_95[names(which(Mass_underNFDS[match_UKMassUnfiltered_95]==1))])] <- col_clb[8]
colours_UKMassUnfiltered_99 <- rep("grey", length(match_UKMassUnfiltered_99))
names(colours_UKMassUnfiltered_99) <- names(match_UKMassUnfiltered_99)
colours_UKMassUnfiltered_99[names(which(UK_underNFDS[names(match_UKMassUnfiltered_99)]==1))] <- col_clb[2]
colours_UKMassUnfiltered_99[match_MassUKUnfiltered_99[names(which(Mass_underNFDS[match_UKMassUnfiltered_99]==1))]] <- col_clb[3]
colours_UKMassUnfiltered_99[intersect(names(which(UK_underNFDS[names(match_UKMassUnfiltered_99)]==1)),match_MassUKUnfiltered_99[names(which(Mass_underNFDS[match_UKMassUnfiltered_99]==1))])] <- col_clb[8]
par(pty="s")
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_90)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_90[names(match_UKMassUnfiltered_90)]], xlab = "UK gene frequencies", ylab = "Mass gene frequencies",main="All Gene Frequencies, 90% sequence identity", col = colours_UKMassUnfiltered_90, pch = 19)
abline(0,1)
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_95)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_95[names(match_UKMassUnfiltered_95)]], xlab = "UK gene frequencies", ylab = "Mass gene frequencies",main="All Gene Frequencies, 95% sequence identity", col = colours_UKMassUnfiltered_95, pch = 19)
abline(0,1)
length(which(colours_UKMassUnfiltered_95 == col_clb[2]))
length(which(colours_UKMassUnfiltered_95 == col_clb[3]))
length(which(colours_UKMassUnfiltered_95 == col_clb[8]))
barplot(seq_no_per_year, xlab = "Sequencing Years", ylim = c(0, 1200), ylab = "Sequence Counts")
seq_no_per_year <- rep(0, length(Nepal_time_points))
names(seq_no_per_year) <- Nepal_time_points
for (i in 1:length(Nepal_time_points)) {
seq_no_per_year[i] <- length(which(Nepal_meta_data_gps_joined$Year==Nepal_time_points[i]))
}
barplot(seq_no_per_year, xlab = "Sequencing Years", ylim = c(0, 1200), ylab = "Sequence Counts")
View(Mass_Samples_accCodes)
View(UK_metadata)
which(unique(UK_metadata$Month))
(unique(UK_metadata$Month))
UK_winters
UK_SeqYear_dict
head(UK_metadata$Winter)
split_winter(UK_metadata$Winter[1])
View(Navajo_meta_data)
library(readxl)
Navajo_meta_data <- read_excel(paste(path_to_data, "StrepPneumo_Navajo/metadata.xlsx", sep = ""))
View(Navajo_meta_data)
unique(Navajo_meta_data$BEASTdate)
vapply(unique(Navajo_meta_data$BEASTdate), strsplit, ".")
vapply(unique(Navajo_meta_data$BEASTdate), strsplit, split = ".", fixed = TRUE)
sapply(unique(Navajo_meta_data$BEASTdate), strsplit, split = ".", fixed = TRUE)
strsplit(unique(Navajo_meta_data$BEASTdate)[1], split = ".", fixed = TRUE)
strsplit(unique(Navajo_meta_data$BEASTdate)[1], split = "\\.", fixed = TRUE)
strsplit(unique(Navajo_meta_data$BEASTdate)[1], split = "1999", fixed = TRUE)
unique(Navajo_meta_data$BEASTdate)[1]
strsplit(as.character(unique(Navajo_meta_data$BEASTdate)[1]), split = ".", fixed = TRUE)
sapply(as.character(unique(Navajo_meta_data$BEASTdate)), strsplit, split = ".", fixed = TRUE)
sapply(as.character(unique(Navajo_meta_data$BEASTdate)), strsplit, split = ".", fixed = TRUE, simplify = TRUE)
c(sapply(as.character(unique(Navajo_meta_data$BEASTdate)), strsplit, split = ".", fixed = TRUE, simplify = TRUE))
as.vector(sapply(as.character(unique(Navajo_meta_data$BEASTdate)), strsplit, split = ".", fixed = TRUE, simplify = TRUE))
Navajo_winters <- Navajo_meta_data$Year
split_beastYear <- function(beastYear){
month_vec <- rep("0", length(beastYear))
for (i in 1:length(beastYear)) {
month_vec[i] <- strsplit(as.character(beastYear[i]), split = ".", fixed = TRUE)[[1]][2]
}
}
split_beastYear(Navajo_meta_data$BEASTdate)
split_beastYear <- function(beastYear){
month_vec <- rep("0", length(beastYear))
for (i in 1:length(beastYear)) {
month_vec[i] <- strsplit(as.character(beastYear[i]), split = ".", fixed = TRUE)[[1]][2]
}
month_vec
}
split_beastYear(Navajo_meta_data$BEASTdate)
unique(Navajo_meta_data$BEASTdate)
tail(Navajo_meta_data$BEASTdate)
strsplit(as.character(beastYear[length(Navajo_meta_data$BEASTdate)-1]), split = ".", fixed = TRUE)[[1]][2]
strsplit(as.character(Navajo_meta_data$BEASTdate[length(Navajo_meta_data$BEASTdate)-1]), split = ".", fixed = TRUE)[[1]][2]
strsplit(as.character(Navajo_meta_data$BEASTdate[length(Navajo_meta_data$BEASTdate)]), split = ".", fixed = TRUE)[[1]][2]
Navajo_meta_data$BEASTdate[length(Navajo_meta_data$BEASTdate)-1]
as.character(Navajo_meta_data$BEASTdate)[length(Navajo_meta_data$BEASTdate)-1]
Navajo_meta_data$BEASTdate[length(Navajo_meta_data$BEASTdate)-1]
split_beastYear <- function(beastYear){
month_vec <- rep("0", length(beastYear))
for (i in 1:length(beastYear)) {
month_vec[i] <- strsplit(as.character(beastYear[i]), split = ".", fixed = TRUE)[[1]][2]
month_vec[i] <- if(is.na(month_vec[i])){"0"}
}
month_vec
}
split_beastYear(Navajo_meta_data$BEASTdate)
split_beastYear <- function(beastYear){
month_vec <- rep("0", length(beastYear))
for (i in 1:length(beastYear)) {
month_vec[i] <- strsplit(as.character(beastYear[i]), split = ".", fixed = TRUE)[[1]][2]
month_vec[i] <- if(is.na(month_vec[i])){"0"} else{month_vec[i]}
}
month_vec
}
split_beastYear(Navajo_meta_data$BEASTdate)
max(split_beastYear(Navajo_meta_data$BEASTdate))
Navajo_time_seq <- Navajo_time_points[1]:Navajo_time_points[length(Navajo_time_points)]
seq_no_per_year <- rep(0, length(Navajo_time_seq))
names(seq_no_per_year) <- Navajo_time_seq
for (i in 1:length(Navajo_time_seq)) {
seq_no_per_year[i] <- length(which(Navajo_meta_data$Year==Navajo_time_seq[i]))
}
barplot(seq_no_per_year, xlab = "Sequencing Years", ylab = "Sequence Counts", col = rainbow(15))
unique(Navajo_meta_data$Epoch2)
head(Navajo_meta_data$Epoch2)
head(Navajo_meta_data$BEASTdate)
length(which(Navajo_meta_data$Epoch2 == unique(Navajo_meta_data$Epoch2)[2]))
length(which(Navajo_meta_data$Year == unique(Navajo_meta_data$Year)[2]))
length(which(Navajo_meta_data$Year == unique(Navajo_meta_data$Year)[3]))
unique(Navajo_meta_data$Year)
sort(unique(Navajo_meta_data$Year))
length(which(Navajo_meta_data$Year == sort(unique(Navajo_meta_data$Year))[3]))
length(which(Navajo_meta_data$Year == sort(unique(Navajo_meta_data$Year))[2]))
length(which(Navajo_meta_data$Epoch2 == sort(unique(Navajo_meta_data$Epoch2))[2]))
length(which(Navajo_meta_data$Epoch2 == sort(unique(Navajo_meta_data$Epoch2))[1]))
length(which(Navajo_meta_data$Year == sort(unique(Navajo_meta_data$Year))[1]))
length(which(Navajo_meta_data$Year == sort(unique(Navajo_meta_data$Year))[4]))
