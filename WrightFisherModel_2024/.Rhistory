lollipop_cluster_freqs_2x2points(year = "2001", plot_title = "Vaccine Types, Serotypes",data1 = Sero_freq_1[which(Sero_mass_VT==1)]/sum(Sero_freq_1), model_name_1 = "COGtriangles",model1 = sero_model1_VT/sum(sero_model_val1), model_name_2 = "ggCaller", model2 = ggCsero_model1_VT/sum(ggCsero_model_val1))
lollipop_cluster_freqs_2x2points <- function(year = "year unknown", plot_title = "Generic Plot Title",data1, model_name_1 ="Model 1", model1, model_name_2 ="Model 2", model2){
lollipop_data_1 <- data.frame(
x=1:(length(data1)),
model_1=model1,
data_1=as.numeric(data1),
data_2=as.numeric(data1),
model_2 =model2
)
# Change baseline
lollipop_plot_1 <- ggplot(lollipop_data_1) +
geom_segment( aes(x=x, xend=x, y=model_1, yend=data_1), color="grey") +
geom_segment( aes(x=x-0.25, xend=x-0.25, y=model_2, yend=data_2), color="grey") +
geom_point( aes(x=x, y=data_1, color="Data"), size=5) +
geom_point( aes(x=x-0.25, y=data_2, color="Data"), size=5) +
geom_point( aes(x=x, y=model_1, color=model_name_1), size=5) +
geom_point( aes(x=x-0.25, y=model_2, color=model_name_2), size=5) +
#geom_point( aes(x=x, y=model_1, color=model_name_1), size=5, alpha = 0.7) +
#geom_point( aes(x=x, y=data_1, color="Data"), size=5, alpha = 0.7) +
#geom_point(aes(x=x, y=model_2, color=model_name_2), size=5, alpha = 0.7) +
scale_color_manual(values = c("#E69F00","#56B4E9","#CC79A7"),
guide  = guide_legend(),
name   = "Group") +
coord_flip()+
#theme_ipsum() +
theme(legend.position = c(.8,.8),legend.text = element_text(size = 20),legend.title = element_text(size = 20)) +
ggtitle(year) +
ylab("Frequency") +
xlab("Clusters") +
theme(axis.title  = element_text(size = 20), axis.text = element_text(size = 20), plot.title = element_text(size = 25,hjust = 0.5))  +
ylim(0, max(max(lollipop_data_1$model_1)))
grid.arrange(lollipop_plot_1 + scale_y_continuous(limits = c(NA,0.2)) + theme(plot.margin = unit(c(.5,0.5,1,0.5), "cm"),axis.text.y = element_blank()), ncol = 1, nrow=1, top = textGrob(plot_title,gp=gpar(fontsize=20,font=3)))
}
# Plot VTs
lollipop_cluster_freqs_2x2points(year = "2001", plot_title = "Vaccine Types, Serotypes",data1 = Sero_freq_1[which(Sero_mass_VT==1)]/sum(Sero_freq_1), model_name_1 = "COGtriangles",model1 = sero_model1_VT/sum(sero_model_val1), model_name_2 = "ggCaller", model2 = ggCsero_model1_VT/sum(ggCsero_model_val1))
lollipop_cluster_freqs_2x2points(year = "2004",plot_title = "Vaccine Types, Serotypes",data1 = Sero_freq_2[which(Sero_mass_VT==1)]/sum(Sero_freq_2), model_name_1 = "COGtriangles", model1 = sero_model2_VT/sum(sero_model_val2), model_name_2 = "ggCaller", model2 = ggCsero_model2_VT/sum(ggCsero_model_val2))
lollipop_cluster_freqs_2x2points <- function(year = "year unknown", plot_title = "Generic Plot Title",data1, model_name_1 ="Model 1", model1, model_name_2 ="Model 2", model2){
lollipop_data_1 <- data.frame(
x=1:(length(data1)),
model_1=model1,
data_1=as.numeric(data1),
data_2=as.numeric(data1),
model_2 =model2
)
# Change baseline
lollipop_plot_1 <- ggplot(lollipop_data_1) +
geom_segment( aes(x=x, xend=x, y=model_1, yend=data_1), color="grey") +
geom_segment( aes(x=x-0.2, xend=x-0.2, y=model_2, yend=data_2), color="grey") +
geom_point( aes(x=x, y=data_1, color="Data"), size=5) +
geom_point( aes(x=x-0.2, y=data_2, color="Data"), size=5) +
geom_point( aes(x=x, y=model_1, color=model_name_1), size=5) +
geom_point( aes(x=x-0.2, y=model_2, color=model_name_2), size=5) +
#geom_point( aes(x=x, y=model_1, color=model_name_1), size=5, alpha = 0.7) +
#geom_point( aes(x=x, y=data_1, color="Data"), size=5, alpha = 0.7) +
#geom_point(aes(x=x, y=model_2, color=model_name_2), size=5, alpha = 0.7) +
scale_color_manual(values = c("#E69F00","#56B4E9","#CC79A7"),
guide  = guide_legend(),
name   = "Group") +
coord_flip()+
#theme_ipsum() +
theme(legend.position = c(.8,.8),legend.text = element_text(size = 20),legend.title = element_text(size = 20)) +
ggtitle(year) +
ylab("Frequency") +
xlab("Clusters") +
theme(axis.title  = element_text(size = 20), axis.text = element_text(size = 20), plot.title = element_text(size = 25,hjust = 0.5))  +
ylim(0, max(max(lollipop_data_1$model_1)))
grid.arrange(lollipop_plot_1 + scale_y_continuous(limits = c(NA,0.2)) + theme(plot.margin = unit(c(.5,0.5,1,0.5), "cm"),axis.text.y = element_blank()), ncol = 1, nrow=1, top = textGrob(plot_title,gp=gpar(fontsize=20,font=3)))
}
# Plot VTs
lollipop_cluster_freqs_2x2points(year = "2001", plot_title = "Vaccine Types, Serotypes",data1 = Sero_freq_1[which(Sero_mass_VT==1)]/sum(Sero_freq_1), model_name_1 = "COGtriangles",model1 = sero_model1_VT/sum(sero_model_val1), model_name_2 = "ggCaller", model2 = ggCsero_model1_VT/sum(ggCsero_model_val1))
lollipop_cluster_freqs_2x2points(year = "2004",plot_title = "Vaccine Types, Serotypes",data1 = Sero_freq_2[which(Sero_mass_VT==1)]/sum(Sero_freq_2), model_name_1 = "COGtriangles", model1 = sero_model2_VT/sum(sero_model_val2), model_name_2 = "ggCaller", model2 = ggCsero_model2_VT/sum(ggCsero_model_val2))
lollipop_cluster_freqs_2x2points(year = "2007",plot_title = "Vaccine Types, Serotypes",data1 = Sero_freq_3[which(Sero_mass_VT==1)]/sum(Sero_freq_3), model_name_1 = "COGtriangles", model1 = sero_model3_VT/sum(sero_model_val3), model_name_2 = "ggCaller", model2 = ggCsero_model3_VT/sum(ggCsero_model_val3))
source("CreateLollipopPlot.R")
#fit_params <- c(2.400584e-01, 9.981659e-05, 2.948024e-01, 7.317635e-03, 9.683020e-02)
#better_fit_params <- c(2.400549e-01, 9.981205e-05, 2.948120e-01, 7.317485e-03, 9.683313e-02)
fit_params <- optim_fit$par
all_params <- list(dt = 1/36, species_no = mass_clusters,  gene_no = nrow(intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(model_start_pop), Pop_eq = as.double(model_start_pop), capacity = sum(model_start_pop), Genotypes = intermed_gene_presence_absence_consensus_matrix, sigma_f = fit_params[1], sigma_w = fit_params[2], prop_f = fit_params[3], delta = delta_ranking, m = fit_params[4], migVec = avg_cluster_freq, vaccTypes = mass_VT, v = fit_params[5], vacc_time = 0)
WFmodel <- WF_nG_h_vP$new(pars = all_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(WFmodel$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
model_val1 <- x[,1,1]
model_val2 <- x[,1,37]
model_val3 <- x[,1,73]
model1_VT <- model_val1[which(mass_VT==1)]
model1_NVT <- model_val1[which(mass_VT==0)]
model2_VT <- model_val2[which(mass_VT==1)]
model2_NVT <- model_val2[which(mass_VT==0)]
model3_VT <- model_val3[which(mass_VT==1)]
model3_NVT <- model_val3[which(mass_VT==0)]
### COGtriangles and manual sequence clusters
lollipop_cluster_freqs(plot_title = "Vaccine Types, manual Seq Clusters",data1 = mass_cluster_freq_1[which(mass_VT==1)]/sum(mass_cluster_freq_1), data2 = mass_cluster_freq_2[which(mass_VT==1)]/sum(mass_cluster_freq_2), data3= mass_cluster_freq_3[which(mass_VT==1)]/sum(mass_cluster_freq_3), model1 = model1_VT/sum(model_val1), model2 = model2_VT/sum(model_val2), model3 = model3_VT/sum(model_val3))
lollipop_cluster_freqs(plot_title = "Non-Vaccine Types, manual Seq Clusters",data1 = mass_cluster_freq_1[which(mass_VT==0)]/sum(mass_cluster_freq_1), data2 = mass_cluster_freq_2[which(mass_VT==0)]/sum(mass_cluster_freq_2), data3= mass_cluster_freq_3[which(mass_VT==0)]/sum(mass_cluster_freq_3), model1 = model1_NVT/sum(model_val1), model2 = model2_NVT/sum(model_val2), model3 = model3_NVT/sum(model_val3))
### COGtriangles and PopPUNK clusters
PP_fit_params <- PP_optim_fit$par
all_params <- list(dt = 1/36, species_no = PP_mass_clusters,  gene_no = nrow(PP_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(PP_model_start_pop), Pop_eq = as.double(PP_model_start_pop), capacity = sum(PP_model_start_pop), Genotypes = PP_intermed_gene_presence_absence_consensus_matrix, sigma_f = PP_fit_params[1], sigma_w = PP_fit_params[2], prop_f = PP_fit_params[3], delta = delta_ranking, m = PP_fit_params[4], migVec = PP_avg_cluster_freq, vaccTypes = PP_mass_VT, v = PP_fit_params[5], vacc_time = 0)
WFmodel_PP <- WF_PP$new(pars = all_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
WF_PP <- odin.dust::odin_dust("NFDS_Model.R")
### COGtriangles and PopPUNK clusters
PP_fit_params <- PP_optim_fit$par
all_params <- list(dt = 1/36, species_no = PP_mass_clusters,  gene_no = nrow(PP_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(PP_model_start_pop), Pop_eq = as.double(PP_model_start_pop), capacity = sum(PP_model_start_pop), Genotypes = PP_intermed_gene_presence_absence_consensus_matrix, sigma_f = PP_fit_params[1], sigma_w = PP_fit_params[2], prop_f = PP_fit_params[3], delta = delta_ranking, m = PP_fit_params[4], migVec = PP_avg_cluster_freq, vaccTypes = PP_mass_VT, v = PP_fit_params[5], vacc_time = 0)
WFmodel_PP <- WF_PP$new(pars = all_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(WFmodel_PP$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel_PP$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
PP_model_val1 <- x[,1,1]
PP_model_val2 <- x[,1,37]
PP_model_val3 <- x[,1,73]
PP_model1_VT <- PP_model_val1[which(PP_mass_VT==1)]
PP_model1_NVT <- PP_model_val1[which(PP_mass_VT==0)]
PP_model2_VT <- PP_model_val2[which(PP_mass_VT==1)]
PP_model2_NVT <- PP_model_val2[which(PP_mass_VT==0)]
PP_model3_VT <- PP_model_val3[which(PP_mass_VT==1)]
PP_model3_NVT <- PP_model_val3[which(PP_mass_VT==0)]
### COGtriangles and manual sequence clusters
lollipop_cluster_freqs(plot_title = "Vaccine Types, PopPUNK Clusters", data1 = PP_mass_cluster_freq_1[which(PP_mass_VT==1)]/sum(PP_mass_cluster_freq_1), data2 = PP_mass_cluster_freq_2[which(PP_mass_VT==1)]/sum(PP_mass_cluster_freq_2), data3= PP_mass_cluster_freq_3[which(PP_mass_VT==1)]/sum(PP_mass_cluster_freq_3), model1 = PP_model1_VT/sum(PP_model_val1), model2 = PP_model2_VT/sum(PP_model_val2), model3 = PP_model3_VT/sum(PP_model_val3))
lollipop_cluster_freqs(plot_title = "Non-Vaccine Types, PopPUNK Clusters",data1 = PP_mass_cluster_freq_1[which(PP_mass_VT==0)]/sum(PP_mass_cluster_freq_1), data2 = PP_mass_cluster_freq_2[which(PP_mass_VT==0)]/sum(PP_mass_cluster_freq_2), data3= PP_mass_cluster_freq_3[which(PP_mass_VT==0)]/sum(PP_mass_cluster_freq_3), model1 = PP_model1_NVT/sum(PP_model_val1), model2 = PP_model2_NVT/sum(PP_model_val2), model3 = PP_model3_NVT/sum(PP_model_val3))
ggC_fit_params <- ggC_optim_fit$par
all_params <- list(dt = 1/36, species_no = mass_clusters,  gene_no = nrow(ggC_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(model_start_pop), Pop_eq = as.double(model_start_pop), capacity = sum(model_start_pop), Genotypes = ggC_intermed_gene_presence_absence_consensus_matrix, sigma_f = ggC_fit_params[1], sigma_w = ggC_fit_params[2], prop_f = ggC_fit_params[3], delta = ggC_delta_ranking, m = ggC_fit_params[4], migVec = avg_cluster_freq, vaccTypes = mass_VT, v = ggC_fit_params[5], vacc_time = 0)
ggC_WFmodel <- WF_nG_h_vP$new(pars = all_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(ggC_WFmodel$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- ggC_WFmodel$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
ggC_model_val1 <- x[,1,1]
ggC_model_val2 <- x[,1,37]
ggC_model_val3 <- x[,1,73]
ggC_model1_VT <- ggC_model_val1[which(mass_VT==1)]
ggC_model1_NVT <- ggC_model_val1[which(mass_VT==0)]
ggC_model2_VT <- ggC_model_val2[which(mass_VT==1)]
ggC_model2_NVT <- ggC_model_val2[which(mass_VT==0)]
ggC_model3_VT <- ggC_model_val3[which(mass_VT==1)]
ggC_model3_NVT <- ggC_model_val3[which(mass_VT==0)]
ggCPP_fit_params <- ggCPP_optim_fit$par
all_params <- list(dt = 1/36, species_no = PP_mass_clusters,  gene_no = nrow(ggCPP_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(PP_model_start_pop), Pop_eq = as.double(PP_model_start_pop), capacity = sum(PP_model_start_pop), Genotypes = ggCPP_intermed_gene_presence_absence_consensus_matrix, sigma_f = ggCPP_fit_params[1], sigma_w = ggCPP_fit_params[2], prop_f = ggCPP_fit_params[3], delta = ggC_delta_ranking, m = ggCPP_fit_params[4], migVec = PP_avg_cluster_freq, vaccTypes = PP_mass_VT, v = ggCPP_fit_params[5], vacc_time = 0)
ggCPP_WFmodel <- WF_nG_h_vP$new(pars = all_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(ggCPP_WFmodel$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- ggCPP_WFmodel$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
ggCPP_model_val1 <- x[,1,1]
ggCPP_model_val2 <- x[,1,37]
ggCPP_model_val3 <- x[,1,73]
ggCPP_model1_VT <- ggCPP_model_val1[which(PP_mass_VT==1)]
ggCPP_model1_NVT <- ggCPP_model_val1[which(PP_mass_VT==0)]
ggCPP_model2_VT <- ggCPP_model_val2[which(PP_mass_VT==1)]
ggCPP_model2_NVT <- ggCPP_model_val2[which(PP_mass_VT==0)]
ggCPP_model3_VT <- ggCPP_model_val3[which(PP_mass_VT==1)]
ggCPP_model3_NVT <- ggCPP_model_val3[which(PP_mass_VT==0)]
# Plot NVTs
lollipop_cluster_freqs_3points(year = "2001", plot_title = "Non-Vaccine Types, manual Seq Clusters",data1 = mass_cluster_freq_1[which(mass_VT==0)]/sum(mass_cluster_freq_1), model_name_1 = "COGtriangles",model1 = model1_NVT/sum(model_val1), model_name_2 = "ggCaller", model2 = ggC_model1_NVT/sum(ggC_model_val1))
lollipop_cluster_freqs_3points(year = "2004",plot_title = "Non-Vaccine Types, manual Seq Clusters",data1 = mass_cluster_freq_2[which(mass_VT==0)]/sum(mass_cluster_freq_2), model_name_1 = "COGtriangles", model1 = model2_NVT/sum(model_val2), model_name_2 = "ggCaller", model2 = ggC_model2_NVT/sum(ggC_model_val2))
lollipop_cluster_freqs_3points(year = "2007",plot_title = "Non-Vaccine Types, manual Seq Clusters",data1 = mass_cluster_freq_3[which(mass_VT==0)]/sum(mass_cluster_freq_3), model_name_1 = "COGtriangles", model1 = model3_NVT/sum(model_val3), model_name_2 = "ggCaller", model2 = ggC_model3_NVT/sum(ggC_model_val3))
# Plot NVTs
lollipop_cluster_freqs_3points(year = "2001", plot_title = "Non-Vaccine Types, PopPUNK Clusters",data1 = PP_mass_cluster_freq_1[which(PP_mass_VT==0)]/sum(PP_mass_cluster_freq_1), model_name_1 = "COGtriangles",model1 = PP_model1_NVT/sum(PP_model_val1), model_name_2 = "ggCaller", model2 = ggCPP_model1_NVT/sum(ggCPP_model_val1))
lollipop_cluster_freqs_3points(year = "2004",plot_title = "Non-Vaccine Types, PopPUNK  Clusters",data1 = PP_mass_cluster_freq_2[which(PP_mass_VT==0)]/sum(PP_mass_cluster_freq_2), model_name_1 = "COGtriangles", model1 = PP_model2_NVT/sum(PP_model_val2), model_name_2 = "ggCaller", model2 = ggCPP_model2_NVT/sum(ggCPP_model_val2))
lollipop_cluster_freqs_3points(year = "2007",plot_title = "Non-Vaccine Types, PopPUNK  Clusters",data1 = PP_mass_cluster_freq_2[which(PP_mass_VT==0)]/sum(PP_mass_cluster_freq_2), model_name_1 = "COGtriangles", model1 = PP_model3_NVT/sum(PP_model_val3), model_name_2 = "ggCaller", model2 = ggCPP_model3_NVT/sum(ggCPP_model_val3))
# Plot NVTs
lollipop_cluster_freqs_2x2points(year = "2001", plot_title = "Non-Vaccine Types, manual Seq Clusters",data1 = mass_cluster_freq_1[which(mass_VT==0)]/sum(mass_cluster_freq_1), model_name_1 = "COGtriangles",model1 = model1_NVT/sum(model_val1), model_name_2 = "ggCaller", model2 = ggC_model1_NVT/sum(ggC_model_val1))
lollipop_cluster_freqs_2x2points(year = "2004",plot_title = "Non-Vaccine Types, manual Seq Clusters",data1 = mass_cluster_freq_2[which(mass_VT==0)]/sum(mass_cluster_freq_2), model_name_1 = "COGtriangles", model1 = model2_NVT/sum(model_val2), model_name_2 = "ggCaller", model2 = ggC_model2_NVT/sum(ggC_model_val2))
lollipop_cluster_freqs_2x2points(year = "2007",plot_title = "Non-Vaccine Types, manual Seq Clusters",data1 = mass_cluster_freq_3[which(mass_VT==0)]/sum(mass_cluster_freq_3), model_name_1 = "COGtriangles", model1 = model3_NVT/sum(model_val3), model_name_2 = "ggCaller", model2 = ggC_model3_NVT/sum(ggC_model_val3))
source("CreateLollipopPlot.R")
# Plot NVTs
lollipop_cluster_freqs_2x2points(year = "2001", plot_title = "Non-Vaccine Types, manual Seq Clusters",data1 = mass_cluster_freq_1[which(mass_VT==0)]/sum(mass_cluster_freq_1), model_name_1 = "COGtriangles",model1 = model1_NVT/sum(model_val1), model_name_2 = "ggCaller", model2 = ggC_model1_NVT/sum(ggC_model_val1))
lollipop_cluster_freqs_2x2points(year = "2004",plot_title = "Non-Vaccine Types, manual Seq Clusters",data1 = mass_cluster_freq_2[which(mass_VT==0)]/sum(mass_cluster_freq_2), model_name_1 = "COGtriangles", model1 = model2_NVT/sum(model_val2), model_name_2 = "ggCaller", model2 = ggC_model2_NVT/sum(ggC_model_val2))
lollipop_cluster_freqs_2x2points(year = "2007",plot_title = "Non-Vaccine Types, manual Seq Clusters",data1 = mass_cluster_freq_3[which(mass_VT==0)]/sum(mass_cluster_freq_3), model_name_1 = "COGtriangles", model1 = model3_NVT/sum(model_val3), model_name_2 = "ggCaller", model2 = ggC_model3_NVT/sum(ggC_model_val3))
# Plot VTs
lollipop_cluster_freqs_2x2points(year = "2001", plot_title = "Vaccine Types, manual Seq Clusters",data1 = mass_cluster_freq_1[which(mass_VT==1)]/sum(mass_cluster_freq_1), model_name_1 = "COGtriangles",model1 = model1_VT/sum(model_val1), model_name_2 = "ggCaller", model2 = ggC_model1_VT/sum(ggC_model_val1))
lollipop_cluster_freqs_2x2points(year = "2004",plot_title = "Vaccine Types, manual Seq Clusters",data1 = mass_cluster_freq_2[which(mass_VT==1)]/sum(mass_cluster_freq_2), model_name_1 = "COGtriangles", model1 = model2_VT/sum(model_val2), model_name_2 = "ggCaller", model2 = ggC_model2_VT/sum(ggC_model_val2))
lollipop_cluster_freqs_2x2points(year = "2007",plot_title = "Vaccine Types, manual Seq Clusters",data1 = mass_cluster_freq_3[which(mass_VT==1)]/sum(mass_cluster_freq_3), model_name_1 = "COGtriangles", model1 = model3_VT/sum(model_val3), model_name_2 = "ggCaller", model2 = ggC_model3_VT/sum(ggC_model_val3))
# Plot NVTs
lollipop_cluster_freqs_2x2points(year = "2001", plot_title = "Non-Vaccine Types, PopPUNK Clusters",data1 = PP_mass_cluster_freq_1[which(PP_mass_VT==0)]/sum(PP_mass_cluster_freq_1), model_name_1 = "COGtriangles",model1 = PP_model1_NVT/sum(PP_model_val1), model_name_2 = "ggCaller", model2 = ggCPP_model1_NVT/sum(ggCPP_model_val1))
lollipop_cluster_freqs_2x2points(year = "2004",plot_title = "Non-Vaccine Types, PopPUNK  Clusters",data1 = PP_mass_cluster_freq_2[which(PP_mass_VT==0)]/sum(PP_mass_cluster_freq_2), model_name_1 = "COGtriangles", model1 = PP_model2_NVT/sum(PP_model_val2), model_name_2 = "ggCaller", model2 = ggCPP_model2_NVT/sum(ggCPP_model_val2))
lollipop_cluster_freqs_2x2points(year = "2007",plot_title = "Non-Vaccine Types, PopPUNK  Clusters",data1 = PP_mass_cluster_freq_2[which(PP_mass_VT==0)]/sum(PP_mass_cluster_freq_2), model_name_1 = "COGtriangles", model1 = PP_model3_NVT/sum(PP_model_val3), model_name_2 = "ggCaller", model2 = ggCPP_model3_NVT/sum(ggCPP_model_val3))
# Plot VTs
lollipop_cluster_freqs_2x2points(year = "2001", plot_title = "Vaccine Types, PopPUNK Clusters",data1 = PP_mass_cluster_freq_1[which(PP_mass_VT==1)]/sum(PP_mass_cluster_freq_1), model_name_1 = "COGtriangles",model1 = PP_model1_VT/sum(PP_model_val1), model_name_2 = "ggCaller", model2 = ggCPP_model1_VT/sum(ggCPP_model_val1))
lollipop_cluster_freqs_2x2points(year = "2004",plot_title = "Vaccine Types, PopPUNK Clusters",data1 = PP_mass_cluster_freq_2[which(PP_mass_VT==1)]/sum(PP_mass_cluster_freq_2), model_name_1 = "COGtriangles", model1 = PP_model2_VT/sum(PP_model_val2), model_name_2 = "ggCaller", model2 = ggCPP_model2_VT/sum(ggCPP_model_val2))
lollipop_cluster_freqs_2x2points(year = "2007",plot_title = "Vaccine Types, PopPUNK Clusters",data1 = PP_mass_cluster_freq_2[which(PP_mass_VT==1)]/sum(PP_mass_cluster_freq_2), model_name_1 = "COGtriangles", model1 = PP_model3_VT/sum(PP_model_val3), model_name_2 = "ggCaller", model2 = ggCPP_model3_VT/sum(ggCPP_model_val3))
# Plot NVTs
lollipop_cluster_freqs_2x2points(year = "2001", plot_title = "Non-Vaccine Types, Serotypes",data1 = Sero_freq_1[which(Sero_mass_VT==0)]/sum(Sero_freq_1), model_name_1 = "COGtriangles",model1 = sero_model1_NVT/sum(sero_model_val1), model_name_2 = "ggCaller", model2 = ggCsero_model1_NVT/sum(ggCsero_model_val1))
lollipop_cluster_freqs_2x2points(year = "2004",plot_title = "Non-Vaccine Types, Serotypes",data1 = Sero_freq_2[which(Sero_mass_VT==0)]/sum(Sero_freq_2), model_name_1 = "COGtriangles", model1 = sero_model2_NVT/sum(sero_model_val2), model_name_2 = "ggCaller", model2 = ggCsero_model2_NVT/sum(ggCsero_model_val2))
lollipop_cluster_freqs_2x2points(year = "2007",plot_title = "Non-Vaccine Types, Serotypes",data1 = Sero_freq_3[which(Sero_mass_VT==0)]/sum(Sero_freq_3), model_name_1 = "COGtriangles", model1 = sero_model3_NVT/sum(sero_model_val3), model_name_2 = "ggCaller", model2 = ggCsero_model3_NVT/sum(ggCsero_model_val3))
# Plot VTs
lollipop_cluster_freqs_2x2points(year = "2001", plot_title = "Vaccine Types, Serotypes",data1 = Sero_freq_1[which(Sero_mass_VT==1)]/sum(Sero_freq_1), model_name_1 = "COGtriangles",model1 = sero_model1_VT/sum(sero_model_val1), model_name_2 = "ggCaller", model2 = ggCsero_model1_VT/sum(ggCsero_model_val1))
lollipop_cluster_freqs_2x2points(year = "2004",plot_title = "Vaccine Types, Serotypes",data1 = Sero_freq_2[which(Sero_mass_VT==1)]/sum(Sero_freq_2), model_name_1 = "COGtriangles", model1 = sero_model2_VT/sum(sero_model_val2), model_name_2 = "ggCaller", model2 = ggCsero_model2_VT/sum(ggCsero_model_val2))
lollipop_cluster_freqs_2x2points(year = "2007",plot_title = "Vaccine Types, Serotypes",data1 = Sero_freq_3[which(Sero_mass_VT==1)]/sum(Sero_freq_3), model_name_1 = "COGtriangles", model1 = sero_model3_VT/sum(sero_model_val3), model_name_2 = "ggCaller", model2 = ggCsero_model3_VT/sum(ggCsero_model_val3))
path_to_data <- "~/Documents/PhD_Project/Data/"
### Reading in the Accession Codes, Population and the Sequence Clusters
library(readxl)
Samples_accCodes <- read_excel(paste(path_to_data, "Massachusetts_data_NickCroucher/SupplementaryDataPaper/Samples_accCodes.xlsx", sep = ""))
Mass_Samples_accCodes <- Samples_accCodes[Samples_accCodes$Population=="Massachusetts",]
Mass_Isolates <- Mass_Samples_accCodes$`Isolate Name`
Mass_Isolates_dict <- 1:length(Mass_Isolates)
names(Mass_Isolates_dict) <- Mass_Isolates
Isolates <- Samples_accCodes$`Isolate Name`
Isolates_dict <- 1:length(Isolates)
names(Isolates_dict) <- Isolates
Isolate_from_Mass_dict <- rep(0, length(Isolates))
names(Isolate_from_Mass_dict) <- Isolates
Isolate_from_Mass_dict[Mass_Isolates] <- 1
View(intermed_gene_presence_absence)
# Mass_Samples_accCodes
mass_seqs <- nrow(Mass_Samples_accCodes)
mass_seqs
length(which(Mass_Samples_accCodes$"Year of Isolation"==2001))
Mass_Isolates[1]
1 if(Mass_Samples_accCodes[1,]$`Year of Isolation`==2001)
if(Mass_Samples_accCodes[1,]$`Year of Isolation`==2001){1}
if(Mass_Samples_accCodes[2,]$`Year of Isolation`==2001){1}
if(Mass_Samples_accCodes[6,]$`Year of Isolation`==2001){1}
# Mass_Samples_accCodes is the dataframe with all Mass data
# Mass_Isolates are the isolates names
mass_seqs <- nrow(Mass_Samples_accCodes)
mass_seq_freq_1 <- rep(0, mass_seqs)
mass_seq_freq_2 <- rep(0, mass_seqs)
mass_seq_freq_3 <- rep(0, mass_seqs)
for (i in 1:mass_seqs){
mass_seq_freq_1[i] <- if(Mass_Samples_accCodes[6,]$`Year of Isolation`==2001){1}
mass_seq_freq_2[i] <- if(Mass_Samples_accCodes[6,]$`Year of Isolation`==2004){1}
mass_seq_freq_2[i] <- if(Mass_Samples_accCodes[6,]$`Year of Isolation`==2007){1}
}
mass_seq_freq_1 <- rep(0, mass_seqs)
mass_seq_freq_2 <- rep(0, mass_seqs)
mass_seq_freq_3 <- rep(0, mass_seqs)
for (i in 1:mass_seqs){
mass_seq_freq_1[i] <- if(Mass_Samples_accCodes[6,]$`Year of Isolation`==2001){1}
mass_seq_freq_2[i] <- if(Mass_Samples_accCodes[6,]$`Year of Isolation`==2004){1}
mass_seq_freq_3[i] <- if(Mass_Samples_accCodes[6,]$`Year of Isolation`==2007){1}
}
mass_seq_freq_1 <- rep(0, mass_seqs)
mass_seq_freq_2 <- rep(0, mass_seqs)
mass_seq_freq_3 <- rep(0, mass_seqs)
for (i in 1:mass_seqs){
mass_seq_freq_1[i] <- if(Mass_Samples_accCodes[i,]$`Year of Isolation`==2001){1}
mass_seq_freq_2[i] <- if(Mass_Samples_accCodes[i,]$`Year of Isolation`==2004){1}
mass_seq_freq_3[i] <- if(Mass_Samples_accCodes[i,]$`Year of Isolation`==2007){1}
}
mass_seq_freq_1 <- rep(0, mass_seqs)
mass_seq_freq_2 <- rep(0, mass_seqs)
mass_seq_freq_3 <- rep(0, mass_seqs)
for (i in 1:mass_seqs){
mass_seq_freq_1[i] <- if(Mass_Samples_accCodes[i,]$`Year of Isolation`==2001){1}else{0}
mass_seq_freq_2[i] <- if(Mass_Samples_accCodes[i,]$`Year of Isolation`==2004){1}else{0}
mass_seq_freq_3[i] <- if(Mass_Samples_accCodes[i,]$`Year of Isolation`==2007){1}else{0}
}
mass_seq_freq_1
sum(mass_seq_freq_1)
sum(mass_seq_freq_2)
sum(mass_seq_freq_3)
sum(mass_seq_freq_1)+sum(mass_seq_freq_2)+sum(mass_seq_freq_3)
saveRDS(mass_seq_freq_1,file = "mass_seq_freq_1.rds")
saveRDS(mass_seq_freq_2, file = "mass_seq_freq_2.rds")
saveRDS(mass_seq_freq_3, file = "mass_seq_freq_3.rds")
### create initial population that is based on the 2001 data set but not an exact sampling from it
# but a Poisson process
seq_expand_factor <- 15000 / sum(mass_seq_freq_1)
exp_noise <- 10
seq_model_start_pop <- (sapply((mass_seq_freq_1 + rexp(n = length(mass_seq_freq_1), rate = exp_noise)) * seq_expand_factor, rpois, n=1))
# visual check for the "sampling"
plot(mass_seq_freq_1/sum(mass_seq_freq_1))
points(seq_model_start_pop/sum(seq_model_start_pop), col = "red")
# looks similar enough, I would say
### create initial population that is based on the 2001 data set but not an exact sampling from it
# but a Poisson process
seq_expand_factor <- 15000 / sum(mass_seq_freq_1)
exp_noise <- 5
seq_model_start_pop <- (sapply((mass_seq_freq_1 + rexp(n = length(mass_seq_freq_1), rate = exp_noise)) * seq_expand_factor, rpois, n=1))
# visual check for the "sampling"
plot(mass_seq_freq_1/sum(mass_seq_freq_1))
points(seq_model_start_pop/sum(seq_model_start_pop), col = "red")
# looks similar enough, I would say
### create initial population that is based on the 2001 data set but not an exact sampling from it
# but a Poisson process
seq_expand_factor <- 15000 / sum(mass_seq_freq_1)
exp_noise <- 100
seq_model_start_pop <- (sapply((mass_seq_freq_1 + rexp(n = length(mass_seq_freq_1), rate = exp_noise)) * seq_expand_factor, rpois, n=1))
# visual check for the "sampling"
plot(mass_seq_freq_1/sum(mass_seq_freq_1))
points(seq_model_start_pop/sum(seq_model_start_pop), col = "red")
# looks similar enough, I would say
### create initial population that is based on the 2001 data set but not an exact sampling from it
# but a Poisson process
seq_expand_factor <- 15000 / sum(mass_seq_freq_1)
exp_noise <- 10
seq_model_start_pop <- (sapply((mass_seq_freq_1 + rexp(n = length(mass_seq_freq_1), rate = exp_noise)) * seq_expand_factor, rpois, n=1))
# visual check for the "sampling"
plot(mass_seq_freq_1/sum(mass_seq_freq_1))
points(seq_model_start_pop/sum(seq_model_start_pop), col = "red")
# looks similar enough, I would say
# looks quite different from the data
# maybe for the individual-based model, I need less noise?
seq_model_start_pop_2 <- (sapply((mass_seq_freq_1 + rexp(n = length(mass_seq_freq_1), rate = 100)) * seq_expand_factor, rpois, n=1))
#save seq start population
saveRDS(seq_model_start_pop, file = "seq_model_start_pop.rds")
saveRDS(seq_model_start_pop_2, file = "seq_model_start_pop_2.rds")
mass_seq_freq_1 <- readRDS("mass_seq_freq_1.rds")
mass_seq_freq_2 <- readRDS("mass_seq_freq_2.rds")
mass_seq_freq_3 <- readRDS("mass_seq_freq_3.rds")
seq_model_start_pop <- readRDS("seq_model_start_pop.rds")
seq_model_start_pop_2 <- readRDS("seq_model_start_pop_2.rds")
intermed_gene_presence_absence <- readRDS("intermed_gene_presence_absence.rds")
# VT vector
mass_seq_VT <- Mass_Samples_accCodes$`Vaccine Type`=="VT"
mass_seq_VT
# VT vector
mass_seq_VT <- as.integer(Mass_Samples_accCodes$`Vaccine Type`=="VT")
head(mass_seq_VT)
saveRDS(mass_seq_VT, file = "mass_seq_VT.rds")
mass_seq_VT <- readRDS("mass_seq_VT.rds")
intermed_gene_presence_absence_matrix <- sapply(intermed_gene_presence_absence[-1,-1],as.double)
mass_seqs <- nrow(Mass_Samples_accCodes)
avg_mass_seqs <- rep(1/mass_seqs, mass_seqs)
params_n_vP <- list(dt = 1/36, species_no = mass_seqs,  gene_no = nrow(intermed_gene_presence_absence)-1, Pop_ini = as.double(seq_model_start_pop), Pop_eq = as.double(seq_model_start_pop), capacity = sum(seq_model_start_pop), Genotypes = intermed_gene_presence_absence_matrix, sigma_f = 0.2193191513, sigma_w = 0.0007111157, prop_f = 0.3735531590, delta = delta_ranking, m = 0.0052207254, migVec = avg_mass_seqs, vaccTypes = mass_seq_VT, v = 0.1321567425, vacc_time = 0)
seq_params_n_vP <- list(dt = 1/36, species_no = mass_seqs,  gene_no = nrow(intermed_gene_presence_absence)-1, Pop_ini = as.double(seq_model_start_pop), Pop_eq = as.double(seq_model_start_pop), capacity = sum(seq_model_start_pop), Genotypes = intermed_gene_presence_absence_matrix, sigma_f = 0.2193191513, sigma_w = 0.0007111157, prop_f = 0.3735531590, delta = delta_ranking, m = 0.0052207254, migVec = avg_mass_seqs, vaccTypes = mass_seq_VT, v = 0.1321567425, vacc_time = 0)
seq_fit_dfoptim <- function(params){
all_params <- list(dt = 1/36, species_no = mass_seqs,  gene_no = nrow(intermed_gene_presence_absence)-1, Pop_ini = as.double(seq_model_start_pop), Pop_eq = as.double(seq_model_start_pop), capacity = sum(seq_model_start_pop), Genotypes = intermed_gene_presence_absence_matrix, sigma_f = params[1], sigma_w = params[2], prop_f = params[3], delta = delta_ranking, m = params[4], migVec = avg_mass_seqs, vaccTypes = mass_seq_VT, v = params[5], vacc_time = 0)
WFmodel <- WF_nG_h_vP$new(pars = all_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(WFmodel$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
combined_compare(x[,1,37],mass_seq_freq_2) + combined_compare(x[,1,73],mass_seq_freq_2)
}
seq_optim_fit <- nmkb(c(0.15, 0.05, 0.25, 0.03, 0.05), seq_fit_dfoptim, lower=c(0,0,0,0,0), upper=c(1,1,1,1,1), control = c(maximize = TRUE))
mass_seqs
mass_seq_freq_2
seq_fit_dfoptim <- function(params){
all_params <- list(dt = 1/36, species_no = mass_seqs,  gene_no = nrow(intermed_gene_presence_absence)-1, Pop_ini = as.double(seq_model_start_pop), Pop_eq = as.double(seq_model_start_pop), capacity = sum(seq_model_start_pop), Genotypes = intermed_gene_presence_absence_matrix, sigma_f = params[1], sigma_w = params[2], prop_f = params[3], delta = delta_ranking, m = params[4], migVec = avg_mass_seqs, vaccTypes = mass_seq_VT, v = params[5], vacc_time = 0)
WFmodel <- WF_nG_h_vP$new(pars = all_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(WFmodel$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
combined_compare(x[,1,37],as.double(mass_seq_freq_2)) + combined_compare(x[,1,73],as.double(mass_seq_freq_3))
}
seq_optim_fit <- nmkb(c(0.15, 0.05, 0.25, 0.03, 0.05), seq_fit_dfoptim, lower=c(0,0,0,0,0), upper=c(1,1,1,1,1), control = c(maximize = TRUE))
head(intermed_gene_presence_absence_consensus)
head(avg_cluster_freq)
head(mass_VT)
head(mass_seq_VT)
head(avg_mass_seqs)
delta_ranking
head(mass_seq_freq_2)
head(mass_cluster_freq_1)
seq_optim_fit <- nmkb(c(0.15, 0.05, 0.25, 0.03, 0.05), seq_fit_dfoptim, lower=c(0,0,0,0,0), upper=c(1,1,1,1,1), control = c(maximize = TRUE))
head(intermed_gene_presence_absence_matrix)
intermed_gene_presence_absence_matrix <- sapply(intermed_gene_presence_absence[-1,-1],as.double)
head(intermed_gene_presence_absence_matrix)
intermed_gene_presence_absence_matrix <- intermed_gene_presence_absence_matrix + 0.00
intermed_gene_presence_absence_matrix
head(intermed_gene_presence_absence_consensus_matrix)
View(intermed_gene_presence_absence)
seq_fit_dfoptim <- function(params){
all_params <- list(dt = 1/36, species_no = mass_seqs,  gene_no = nrow(intermed_gene_presence_absence)-1, Pop_ini = as.double(seq_model_start_pop), Pop_eq = as.double(seq_model_start_pop), capacity = sum(seq_model_start_pop), Genotypes = intermed_gene_presence_absence_matrix, sigma_f = params[1], sigma_w = params[2], prop_f = params[3], delta = delta_ranking, m = params[4], migVec = avg_mass_seqs, vaccTypes = mass_seq_VT, v = params[5], vacc_time = 0)
WFmodel <- WF_nG_h_vP$new(pars = all_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(WFmodel$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
print("problem")
combined_compare(x[,1,37],as.double(mass_seq_freq_2)) + combined_compare(x[,1,73],as.double(mass_seq_freq_3))
}
seq_optim_fit <- nmkb(c(0.15, 0.05, 0.25, 0.03, 0.05), seq_fit_dfoptim, lower=c(0,0,0,0,0), upper=c(1,1,1,1,1), control = c(maximize = TRUE))
seq_WFmodel <- WF_nG_h_vP$new(pars = seq_params_n_vP,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
model_start_pop
head(delta_ranking)
head(avg_cluster_freq)
head(mass_VT)
```{r}
1+1
```{r}
```{r}
```{r}
seq_fit_dfoptim <- function(params){
all_params <- list(dt = 1/36, species_no = mass_seqs,  gene_no = nrow(intermed_gene_presence_absence)-1, Pop_ini = as.double(seq_model_start_pop), Pop_eq = as.double(seq_model_start_pop), capacity = sum(seq_model_start_pop), Genotypes = intermed_gene_presence_absence_matrix, sigma_f = params[1], sigma_w = params[2], prop_f = params[3], delta = delta_ranking, m = params[4], migVec = avg_mass_seqs, vaccTypes = as.double(mass_seq_VT), v = params[5], vacc_time = 0)
WFmodel <- WF_nG_h_vP$new(pars = all_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(WFmodel$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
combined_compare(x[,1,37],as.double(mass_seq_freq_2)) + combined_compare(x[,1,73],as.double(mass_seq_freq_3))
}
seq_fit_dfoptim <- function(params){
all_params <- list(dt = 1/36, species_no = mass_seqs,  gene_no = nrow(intermed_gene_presence_absence)-1, Pop_ini = as.double(seq_model_start_pop), Pop_eq = as.double(seq_model_start_pop), capacity = sum(seq_model_start_pop), Genotypes = intermed_gene_presence_absence_matrix, sigma_f = params[1], sigma_w = params[2], prop_f = params[3], delta = delta_ranking, m = params[4], migVec = avg_mass_seqs, vaccTypes = (mass_seq_VT), v = params[5], vacc_time = 0)
WFmodel <- WF_nG_h_vP$new(pars = all_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(WFmodel$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
combined_compare(x[,1,37],as.double(mass_seq_freq_2)) + combined_compare(x[,1,73],as.double(mass_seq_freq_3))
}
seq_optim_fit <- nmkb(c(0.15, 0.05, 0.25, 0.03, 0.05), seq_fit_dfoptim, lower=c(0,0,0,0,0), upper=c(1,1,1,1,1), control = c(maximize = TRUE))
seq_fit_dfoptim <- function(params){
all_params <- list(dt = 1/36, species_no = mass_seqs,  gene_no = nrow(intermed_gene_presence_absence)-1, Pop_ini = as.double(seq_model_start_pop), Pop_eq = as.double(seq_model_start_pop), capacity = sum(seq_model_start_pop), Genotypes = intermed_gene_presence_absence_matrix, sigma_f = params[1], sigma_w = params[2], prop_f = params[3], delta = delta_ranking, m = params[4], migVec = avg_mass_seqs, vaccTypes = as.double(mass_seq_VT), v = params[5], vacc_time = 0)
WFmodel <- WF_nG_h_vP$new(pars = all_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(WFmodel$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
combined_compare(x[,1,37],as.double(mass_seq_freq_2)) + combined_compare(x[,1,73],as.double(mass_seq_freq_3))
}
seq_optim_fit <- nmkb(c(0.15, 0.05, 0.25, 0.03, 0.05), seq_fit_dfoptim, lower=c(0,0,0,0,0), upper=c(1,1,1,1,1), control = c(maximize = TRUE))
seq_optim_fit
seq_fit_dfoptim_2 <- function(params){
all_params <- list(dt = 1/36, species_no = mass_seqs,  gene_no = nrow(intermed_gene_presence_absence)-1, Pop_ini = as.double(seq_model_start_pop_2), Pop_eq = as.double(seq_model_start_pop_2), capacity = sum(seq_model_start_pop_2), Genotypes = intermed_gene_presence_absence_matrix, sigma_f = params[1], sigma_w = params[2], prop_f = params[3], delta = delta_ranking, m = params[4], migVec = avg_mass_seqs, vaccTypes = as.double(mass_seq_VT), v = params[5], vacc_time = 0)
WFmodel <- WF_nG_h_vP$new(pars = all_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(WFmodel$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
combined_compare(x[,1,37],as.double(mass_seq_freq_2)) + combined_compare(x[,1,73],as.double(mass_seq_freq_3))
}
seq_optim_fit_2 <- nmkb(c(0.15, 0.05, 0.25, 0.03, 0.05), seq_fit_dfoptim_2, lower=c(0,0,0,0,0), upper=c(1,1,1,1,1), control = c(maximize = TRUE))
seq_optim_fit_2
