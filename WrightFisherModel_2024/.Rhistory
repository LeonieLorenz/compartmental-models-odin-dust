ggc_match <- regmatches(x,regexpr("^GCF\\_[0-9]+\\.1",x))
ggc_match2 <- gsub("\\.","_",ggc_match)
gsub(.*ggc_match.*, assembly_dict[ggc_match2],x)
gsub_apply <- function(x){
ggc_match <- regmatches(x,regexpr("^GCF\\_[0-9]+\\.1",x))
ggc_match2 <- gsub("\\.","_",ggc_match)
gsub(paste(".*",ggc_match".*",sep = ""), assembly_dict[ggc_match2],x)
gsub_apply <- function(x){
ggc_match <- regmatches(x,regexpr("^GCF\\_[0-9]+\\.1",x))
ggc_match2 <- gsub("\\.","_",ggc_match)
gsub(paste(".*",ggc_match,".*",sep = ""), assembly_dict[ggc_match2],x)
}
UK_ggCaller_bool[1,-1] <- sapply(UK_ggCaller_bool[1,-1], gsub_apply)
colnames(UK_ggCaller_bool) <- UK_ggCaller_bool[1,]
saveRDS(UK_ggCallerPP_bool, "UK_ggCaller_bool.rds")
# filter ggCaller results by the ones
UK_ggCallerPP_bool <- data.frame(matrix(0, nrow = nrow(UK_ggCaller_bool), ncol = length(UK_PP$Taxon)+1))
UK_ggCallerPP_bool[-1,-1] <- UK_ggCaller_bool[-1,c(UK_PP$Taxon)]
View(UK_PP)
UK_PP$Taxon
colnames(UK_ggCaller_bool)
View(PP_all)
View(ncbi_metadata)
length(colnames(UK_ggCaller_bool))-1
length(UK_PP$Taxon)
nrow(ncbi_metadata)
length(UK_ids)
for (i in 1;length(UK_PP$Taxon)) {
for (i in 1:length(UK_PP$Taxon)) {
print(UK_PP$Taxon[i])
UK_ggCaller_bool[-1,UK_PP$Taxon[i]]
}
UK_ggCallerPP_bool[-1,-1] <- UK_ggCaller_bool[-1,c(UK_PP$Taxon)]
c(UK_PP$Taxon)
# filter ggCaller results by the ones
UK_ggCallerPP_bool <- data.frame(matrix(0, nrow = nrow(UK_ggCaller_bool), ncol = length(UK_PP$Taxon)+1))
for (i in 1:length(UK_PP$Taxon)) {
print(UK_PP$Taxon[i])
UK_ggCallerPP_bool[-1,(i+1)] <- UK_ggCaller_bool[-1,UK_PP$Taxon[i]]
}
View(UK_ggCaller)
UK_ggCaller[1,]
regmatches(UK_ggCaller[1,-1],regexpr("13682\\_2",UK_ggCaller[1,-1]))
regmatches(UK_ggCaller[1,-1],regexpr("13682\\_1",UK_ggCaller[1,-1]))
regmatches(UK_ggCaller[1,-1],regexpr("6512_\\2",UK_ggCaller[1,-1]))
regmatches(UK_ggCaller[1,-1],regexpr("6512\\_2",UK_ggCaller[1,-1]))
regmatches(UK_ggCaller[1,-1],regexpr("6512\\_2\\_",UK_ggCaller[1,-1]))
regmatches(UK_ggCaller[1,-1],regexpr("6512\\_2\\_14",UK_ggCaller[1,-1]))
regexpr("6512\\_2\\_14",UK_ggCaller[1,-1])
regexpr("13682\\_2#4",UK_ggCaller[1,-1])
regmatches(UK_ggCaller[1,-1],regexpr("13682\\2",UK_ggCaller[1,-1]))
regmatches(UK_ggCaller[1,-1],regexpr("13682\\_2",UK_ggCaller[1,-1]))
has_assembly_ncbi <- rep(FALSE, nrow(PP_all))
PP_all <- read.csv(paste(path_to_data, "StrepPneumo_UK/poppunk_clusters/poppunk_clusters_clusters.csv",sep = ""))
no_PP_all <- length(unique(UK_PP$Cluster))
has_assembly_ncbi <- rep(FALSE, nrow(PP_all))
no_matches <- 0
for (i in 1:nrow(PP_all)) {
if(grepl("GCF",PP_all$Taxon[i])){
assembly_name <- regmatches(PP_all$Taxon[i],regexpr("^GCF\\_[0-9]+\\_1",PP_all$Taxon[i]))
PP_all$Taxon[i] <- assembly_dict[assembly_name]
no_matches <- no_matches + 1
has_assembly_ncbi[i] <- TRUE
}
}
UK_PP <- PP_all[(has_assembly_ncbi),]
nrow(UK_PP)
for (i in 1:nrow(UK_PP)) {
if(is.na(UK_is_UK_dict[UK_PP$Taxon[i]])){
print("here")
}
}
ncbi_PP <- PP_all[(has_assembly_ncbi),] # only keeps taxa for which we have the sequence data
PP_is_UK_dict <- rep(FALSE,nrow(ncbi_PP))
names(PP_is_UK_dict) <- ncbi_PP$Taxon
UK_is_UK_dict <- rep(TRUE,nrow(UK_metadata))
names(UK_is_UK_dict) <- UK_metadata$id
for (i in 1:nrow(ncbi_PP)) {
if(!is.na(UK_is_UK_dict[ncbi_PP$Taxon[i]])){
PP_is_UK_dict[ncbi_PP$Taxon[i]] <- TRUE
}
}
UK_PP <- ncbi_PP[(PP_is_UK_dict),]
no_UK_PP <- length(unique(UK_PP$Cluster))
no_UK_PP
UK_seq_clusters_dict <- UK_PP$Cluster
names(UK_seq_clusters_dict) <- UK_PP$Taxon
# Add Serotype Information
UK_Serotype_dict <- UK_metadata$Serotype
names(UK_Serotype_dict) <- UK_metadata$id
UK_PP$Serotype <- UK_Serotype_dict[UK_PP$Taxon]
saveRDS(UK_PP,"UK_PP.rds")
UK_ggCaller <- read.csv(paste(path_to_data, "StrepPneumo_UK/ggCaller_output/gene_presence_absence.csv", sep = ""), header=FALSE)
# converting the gene presence absence matrix into a boolean df (0 = gene not present, 1 = gene present)
convert_to_bool <- function(x){
if (x=="") 0 else 1
}
UK_ggCaller_bool <- UK_ggCaller[,c(-2,-3)]
UK_ggCaller_bool[-1,-1] <- apply(UK_ggCaller_bool[-1,-1],c(1,2), convert_to_bool)
UK_ggCaller_bool[-1,-1] <- apply(UK_ggCaller_bool[-1,-1],c(1,2), convert_to_bool)
ggC_matches <- regmatches(UK_ggCaller_bool[1,-1],regexpr("^GCF\\_[0-9]+\\.1",UK_ggCaller_bool[1,-1]))
ggC_matches_tr <- assembly_dict[ggC_matches]
gsub_apply <- function(x){
ggc_match <- regmatches(x,regexpr("^GCF\\_[0-9]+\\.1",x))
ggc_match2 <- gsub("\\.","_",ggc_match)
gsub(paste(".*",ggc_match,".*",sep = ""), assembly_dict[ggc_match2],x)
}
UK_ggCaller_bool[1,-1] <- sapply(UK_ggCaller_bool[1,-1], gsub_apply)
colnames(UK_ggCaller_bool) <- UK_ggCaller_bool[1,]
# filter ggCaller results by the ones
UK_ggCallerPP_bool <- data.frame(matrix(0, nrow = nrow(UK_ggCaller_bool), ncol = length(UK_PP$Taxon)+1))
for (i in 1:length(UK_PP$Taxon)) {
print(UK_PP$Taxon[i])
UK_ggCallerPP_bool[-1,(i+1)] <- UK_ggCaller_bool[-1,UK_PP$Taxon[i]]
}
UK_ggCallerPP_bool[-1,-1] <- UK_ggCaller_bool[-1,c(UK_PP$Taxon)]
colnames(UK_ggCallerPP_bool) <- c("Gene",UK_PP$Taxon)
UK_ggCallerPP_bool[1,] <- c("Gene",UK_PP$Taxon)
UK_ggCallerPP_bool[,1] <- UK_ggCaller_bool[,1]
View(UK_ggCallerPP_bool)
dim(UK_ggCallerPP_bool)
saveRDS(UK_ggCallerPP_bool, "UK_ggCaller_bool.rds")
UK_time_points <- sort(unique(UK_SeqYear_dict))
UK_time_points
seq_no_per_year <- rep(0, length(UK_time_points))
names(seq_no_per_year) <- UK_time_points
for (i in 1:length(UK_time_points)) {
seq_no_per_year[i] <- length(which(Nepal_meta_data$Year==UK_time_points[i]))
}
barplot(seq_no_per_year, xlab = "Sequencing Years", ylim = c(0, 250), ylab = "Sequence Counts")
seq_no_per_year
UK_winters <- sort(unique(UK_metadata$Winter))
UK_winters
seq_no_per_year <- rep(0, length(UK_time_points))
names(seq_no_per_year) <- UK_time_points
for (i in 1:length(UK_time_points)) {
seq_no_per_year[i] <- length(which(UK_metadata$Winter==UK_winters[i]))
}
barplot(seq_no_per_year, xlab = "Sequencing Years", ylim = c(0, 250), ylab = "Sequence Counts")
names(seq_no_per_year) <- UK_winters
for (i in 1:length(UK_time_points)) {
seq_no_per_year[i] <- length(which(UK_metadata$Winter==UK_winters[i]))
}
barplot(seq_no_per_year, xlab = "Sequencing Years", ylim = c(0, 250), ylab = "Sequence Counts")
barplot(seq_no_per_year, xlab = "Winters", ylim = c(0, 250), ylab = "Sequence Counts")
UK_ggCaller_byYear <- vector(mode = "list", length = length(UK_time_points))
UK_SeqYear_dict
UK_ggCaller_byYear <- vector(mode = "list", length = length(UK_time_points))
for (i in 1:length(UK_time_points)) {
UK_ggCaller_year <- data.frame(matrix(0, nrow = nrow(UK_ggCallerPP_bool), ncol = length(which(UK_meta_dataPP$Winter==UK_winters[i]))+1)) # initialize data frame
UK_ggCaller_year[1,-1] <- UK_ggCallerPP_bool[1,c(FALSE,UK_SeqYear_dict[unlist(UK_ggCallerPP_bool[1,-1])]==UK_winters[i])] # fill in first row (seq names)
UK_ggCaller_year[-1,1] <- UK_ggCallerPP_bool[-1,1] # fill in first column (gene cluster names)
UK_ggCaller_year[-1,-1] <- UK_ggCallerPP_bool[-1,c(FALSE,UK_SeqYear_dict[unlist(UK_ggCallerPP_bool[1,-1])]==UK_time_points[i])] # fill in presence absence information
UK_ggCaller_byYear[[i]] <- UK_ggCaller_year
}
for (i in 1:length(UK_time_points)) {
UK_ggCaller_year <- data.frame(matrix(0, nrow = nrow(UK_ggCallerPP_bool), ncol = length(which(UK_metadata$Winter==UK_winters[i]))+1)) # initialize data frame
UK_ggCaller_year[1,-1] <- UK_ggCallerPP_bool[1,c(FALSE,UK_SeqYear_dict[unlist(UK_ggCallerPP_bool[1,-1])]==UK_winters[i])] # fill in first row (seq names)
UK_ggCaller_year[-1,1] <- UK_ggCallerPP_bool[-1,1] # fill in first column (gene cluster names)
UK_ggCaller_year[-1,-1] <- UK_ggCallerPP_bool[-1,c(FALSE,UK_SeqYear_dict[unlist(UK_ggCallerPP_bool[1,-1])]==UK_time_points[i])] # fill in presence absence information
UK_ggCaller_byYear[[i]] <- UK_ggCaller_year
}
UK_ggCaller_byYear <- vector(mode = "list", length = length(UK_time_points))
for (i in 1:length(UK_time_points)) {
UK_ggCaller_year <- data.frame(matrix(0, nrow = nrow(UK_ggCallerPP_bool), ncol = length(which(UK_metadata$Winter==UK_winters[i]))+1)) # initialize data frame
UK_ggCaller_year[1,-1] <- UK_ggCallerPP_bool[1,c(FALSE,UK_SeqYear_dict[unlist(UK_ggCallerPP_bool[1,-1])]==UK_winters[i])] # fill in first row (seq names)
UK_ggCaller_year[-1,1] <- UK_ggCallerPP_bool[-1,1] # fill in first column (gene cluster names)
UK_ggCaller_year[-1,-1] <- UK_ggCallerPP_bool[-1,c(FALSE,UK_SeqYear_dict[unlist(UK_ggCallerPP_bool[1,-1])]==UK_time_points[i])] # fill in presence absence information
UK_ggCaller_byYear[[i]] <- UK_ggCaller_year
}
length(which(UK_metadata$Winter==UK_winters[1]))
length(which(UK_metadata$Winter==UK_winters[2]))
length(which(UK_metadata$Winter==UK_winters[3]))
length(which(UK_metadata$Winter==UK_winters[4]))
length(which(UK_metadata$Winter==UK_winters[5]))
length(which(UK_metadata$Winter==UK_winters[6]))
length(UK_winters)
length(UK_time_points)
length(which(UK_metadata$Winter==UK_winters[7]))
UK_ggCaller_byYear <- vector(mode = "list", length = length(UK_time_points))
for (i in 1:length(UK_time_points)) {
UK_ggCaller_year <- data.frame(matrix(0, nrow = nrow(UK_ggCallerPP_bool), ncol = length(which(UK_metadata$Winter==UK_winters[i]))+1)) # initialize data frame
UK_ggCaller_year[1,-1] <- UK_ggCallerPP_bool[1,c(FALSE,UK_SeqYear_dict[unlist(UK_ggCallerPP_bool[1,-1])]==UK_time_points[i])] # fill in first row (seq names)
UK_ggCaller_year[-1,1] <- UK_ggCallerPP_bool[-1,1] # fill in first column (gene cluster names)
UK_ggCaller_year[-1,-1] <- UK_ggCallerPP_bool[-1,c(FALSE,UK_SeqYear_dict[unlist(UK_ggCallerPP_bool[1,-1])]==UK_time_points[i])] # fill in presence absence information
UK_ggCaller_byYear[[i]] <- UK_ggCaller_year
}
UK_ggCaller_byYear <- vector(mode = "list", length = length(UK_time_points))
for (i in 1:length(UK_time_points)) {
UK_ggCaller_year <- data.frame(matrix(0, nrow = nrow(UK_ggCallerPP_bool), ncol = length(which(UK_metadata$Winter==UK_winters[i]))+1)) # initialize data frame
UK_ggCaller_year[1,-1] <- UK_ggCallerPP_bool[1,c(FALSE,UK_SeqYear_dict[unlist(UK_ggCallerPP_bool[1,-1])]==UK_time_points[i])] # fill in first row (seq names)
UK_ggCaller_year[-1,1] <- UK_ggCallerPP_bool[-1,1] # fill in first column (gene cluster names)
UK_ggCaller_year[-1,-1] <- UK_ggCallerPP_bool[-1,c(FALSE,UK_SeqYear_dict[unlist(UK_ggCallerPP_bool[1,-1])]==UK_time_points[i])] # fill in presence absence information
print(i)
UK_ggCaller_byYear[[i]] <- UK_ggCaller_year
}
UK_ggCaller_year <- data.frame(matrix(0, nrow = nrow(UK_ggCallerPP_bool), ncol = length(which(UK_metadata$Winter==UK_winters[5]))+1)) # initialize data frame
UK_ggCaller_year[1,-1] <- UK_ggCallerPP_bool[1,c(FALSE,UK_SeqYear_dict[unlist(UK_ggCallerPP_bool[1,-1])]==UK_time_points[5])] # fill in first row (seq names)
UK_ggCaller_year
UK_ggCaller_year[-1,1] <- UK_ggCallerPP_bool[-1,1] # fill in first column (gene cluster names)
UK_ggCaller_year[-1,-1] <- UK_ggCallerPP_bool[-1,c(FALSE,UK_SeqYear_dict[unlist(UK_ggCallerPP_bool[1,-1])]==UK_time_points[5])] # fill in presence absence information
UK_ggCaller_byYear[[5]] <- UK_ggCaller_year
UK_ggCaller_year <- data.frame(matrix(0, nrow = nrow(UK_ggCallerPP_bool), ncol = length(which(UK_metadata$Winter==UK_winters[6]))+1)) # initialize data frame
UK_ggCaller_year[1,-1] <- UK_ggCallerPP_bool[1,c(FALSE,UK_SeqYear_dict[unlist(UK_ggCallerPP_bool[1,-1])]==UK_time_points[i6)] # fill in first row (seq names)
UK_ggCaller_year[1,-1] <- UK_ggCallerPP_bool[1,c(FALSE,UK_SeqYear_dict[unlist(UK_ggCallerPP_bool[1,-1])]==UK_time_points[6])] # fill in first row (seq names)
UK_time_points[6]
unique(UK_SeqYear_dict)
UK_ggCallerPP_bool[1,-1]
UK_SeqYear_dict[unlist(UK_ggCallerPP_bool[1,-1])]
length(UK_SeqYear_dict)
UK_SeqYear_dict
PP_is_UK_dict
which(!PP_is_UK_dict)
UK_PP$Time <- UK_SeqYear_dict[UK_PP$Taxon]
saveRDS(UK_PP,"UK_PP.rds")
UKPP_time_points <- unique(sort(UK_PP$Time))
UKPP_time_points
left.join
names <- c("anna","jackie","phra")
df1 <- data.frame(names)
df1
surnames <- c("anna","jackie","phra")
location <- c("EBI","EBI","EBI")
df2 <- data.frame(surnames, location)
df2
left_join(df1, df2, by = c("names"="surnames"))
library(dplyr)
left_join(df1, df2, by = c("names"="surnames"))
var1 <- "names"
left_join(df1, df2, by=setNames(var1, "surnames"))
var2 <- "surnames"
left_join(df1, df2, by=setNames(var1, var2))
left_join(df1, df2, by=setNames(var2, var1))
(1.5 * *200) / 60
(1.5 * 200) / 60
206/95
8 *2.2
path_to_data <- "~/Documents/PhD_Project/Data/"
library(readxl)
Navajo_meta_data <- read_excel(paste(path_to_data, "StrepPneumo_Navajo/metadata.xlsx", sep = ""))
Navajo_time_points <- sort(unique(Navajo_meta_data$Year))
Navajo_SeqYear_dict <- Navajo_meta_data$Year
names(Navajo_SeqYear_dict) <- Navajo_meta_data$Accession
Navajo_meta_IDtoInd <- 1:nrow(Navajo_meta_data)
names(Navajo_meta_IDtoInd) <- Navajo_meta_data$Accession
Navajo_time_seq <- Navajo_time_points[1]:Navajo_time_points[length(Navajo_time_points)]
seq_no_per_year <- rep(0, length(Navajo_time_seq))
names(seq_no_per_year) <- Navajo_time_seq
for (i in 1:length(Navajo_time_seq)) {
seq_no_per_year[i] <- length(which(Navajo_meta_data$Year==Navajo_time_seq[i]))
}
barplot(seq_no_per_year, xlab = "Sequencing Years", ylab = "Sequence Counts")
# PCV7 was introduced in 2000
# PCV13 was introduced in 2010
# according to Azarian et al. (2018) https://doi.org/10.1371/journal.ppat.1006966
#
Navajo_time_points_selected <- Navajo_time_seq
Navajo_time_points_preVac1 <- Navajo_time_seq[1:3]
Navajo_time_points_preVac2 <- Navajo_time_seq[1:13]
Navajo_PP <- read.csv(paste(path_to_data, "StrepPneumo_Navajo/poppunk_clusters/poppunk_clusters_clusters.csv",sep = ""))
no_Navajo_PP <- length(unique(Navajo_PP$Cluster)) #  57 clusters!
Navajo_seq_clusters_dict <- Navajo_PP$Cluster
names(Navajo_seq_clusters_dict) <- Navajo_PP$Taxon
no_Navajo_PP
PP_all <- read.csv(paste(path_to_data, "StrepPneumo_Navajo/poppunk_clusters/poppunk_clusters_clusters.csv",sep = ""))
PP_taxon_ind_dict <- 1:nrow(PP_all)
names(PP_taxon_ind_dict) <- PP_all$Taxon
PP_is_Navajo_dict <- rep(FALSE,nrow(PP_all))
names(PP_is_Navajo_dict) <- PP_all$Taxon
for (i in 1:length(Navajo_meta_data$Lane_id)) {
PP_is_Navajo_dict[Navajo_meta_data$Lane_id[i]] <- TRUE
}
View(PP_all)
View(PP_all)
for (i in 1:length(Navajo_meta_data$Accession)) {
PP_is_Navajo_dict[Navajo_meta_data$Accession[i]] <- TRUE
}
Navajo_PP <- PP_all[PP_is_Navajo_dict,]
no_Navajo_PP <- length(unique(Navajo_PP$Cluster))
no_Navajo_PP
Navajo_seq_clusters_dict <- Navajo_PP$Cluster
names(Navajo_seq_clusters_dict) <- Navajo_PP$Taxon
nrow(Navajo_seq_clusters_dict)
nrow(Navajo_PP)
nrow(Navajo_meta_data)
saveRDS(Navajo_meta_data, "Navajo_meta_data.rds")
# Add Serotype Information
Navajo_Serotype_dict <- Navajo_meta_dataPP$Phenotypic_serotype
# Add Serotype Information
Navajo_Serotype_dict <- Navajo_meta_dataPP$Sero
names(Navajo_Serotype_dict) <- Navajo_meta_dataPP$Accession
Navajo_PP$Serotype <- Navajo_Serotype_dict[Navajo_PP$Taxon]
View(Navajo_PP)
Navajo_Serotype_dict
# Add Serotype Information
Navajo_Serotype_dict <- Navajo_meta_dataPP$Sero
names(Navajo_Serotype_dict) <- Navajo_meta_dataPP$Accession
Navajo_Serotype_dict
# Add Serotype Information
Navajo_Serotype_dict <- Navajo_meta_data$Sero
names(Navajo_Serotype_dict) <- Navajo_meta_data$Accession
Navajo_PP$Serotype <- Navajo_Serotype_dict[Navajo_PP$Taxon]
saveRDS(Navajo_PP,"Navajo_PP.rds")
Navajo_ggCaller <- read.csv(paste(path_to_data, "StrepPneumo_Navajo/gene_presence_absence.csv", sep = ""), header=FALSE)
# converting the gene presence absence matrix into a boolean df (0 = gene not present, 1 = gene present)
convert_to_bool <- function(x){
if (x=="") 0 else 1
}
Navajo_ggCaller_bool <- Navajo_ggCaller[,c(-2,-3)]
Navajo_ggCaller_bool[-1,-1] <- apply(Navajo_ggCaller_bool[-1,-1],c(1,2), convert_to_bool)
Navajo_ggCaller_bool[1,-1] <- sapply(Navajo_ggCaller_bool[1,-1], strsplit, split = ".contigs_velvet") # remove contigs appendix
colnames(Navajo_ggCaller_bool) <- Navajo_ggCaller_bool[1,]
# filter ggCaller results by the ones
Navajo_ggCallerPP_bool <- data.frame(matrix(0, nrow = nrow(Navajo_ggCaller_bool), ncol = length(Navajo_PP$Taxon)+1))
Navajo_ggCallerPP_bool[-1,-1] <- Navajo_ggCaller_bool[-1,c(Navajo_PP$Taxon)]
colnames(Navajo_ggCallerPP_bool) <- c("Gene",Navajo_PP$Taxon)
Navajo_ggCallerPP_bool[1,] <- c("Gene",Navajo_PP$Taxon)
View(Navajo_ggCaller_bool)
View(Navajo_ggCaller_boolPP)
View(Navajo_ggCallerPP_bool)
ncol(Navajo_ggCaller_bool)
ncol(Navajo_ggCaller)
View(Navajo_ggCaller)
PP_taxon_in_ggC <- rep(FALSE, length(Navajo_PP$Taxon))
PP_taxon_in_ggC <- rep(FALSE, length(Navajo_PP$Taxon))
names(PP_taxon_in_ggC) <- Navajo_PP$Taxon
length(PP_taxon_in_ggC)
for (i in 2:ncol(Navajo_ggCaller_bool)) {
PP_taxon_in_ggC[colnames(Navajo_ggCaller_bool)[i]] <- TRUE
}
length(PP_taxon_in_ggC)
tail(PP_taxon_in_ggC)
ggC_has_meta <- trp(FALSE, (ncol(Navajo_ggCaller_bool)-1))
ggC_has_meta <- rep(FALSE, (ncol(Navajo_ggCaller_bool)-1))
names(ggC_has_meta) <- colnames(Navajo_ggCaller_bool)
names(ggC_has_meta) <- colnames(Navajo_ggCaller_bool)[-1]
for (i in 1:nrow(Navajo_meta_data)) {
ggC_has_meta[Navajo_meta_data$Accession[i]] <- TRUE
}
length(ggC_has_meta)
length(which(ggC_has_meta))
ncol(Navajo_ggCaller_bool)
ggC_has_meta <- rep(FALSE, (ncol(Navajo_ggCaller_bool)-1))
names(ggC_has_meta) <- colnames(Navajo_ggCaller_bool)[-1]
length(ggC_has_meta)
for (i in 1:nrow(Navajo_meta_data)) {
ggC_has_meta[Navajo_meta_data$Accession[i]] <- TRUE
}
length(which(ggC_has_meta))
length(!which(ggC_has_meta))
length(!(which(ggC_has_meta)))
length(which(ggC_has_meta)==FALSE)
length(which(ggC_has_meta==FALSE))
length(which(ggC_has_meta==TRUE))
### Reading in the Accession Codes, Population and the Sequence Clusters
UK_metadata <- read.csv("~/Documents/PhD_Project/Data/StrepPneumo_UK/metadata.csv")
View(UK_metadata)
Nepal_time_points
path_to_data <- "~/Documents/PhD_Project/Data/"
path_to_data <- "~/Documents/PhD_Project/Data/"
# read in meta data (esp. serotype, sequencing year)
```{r}
library(readxl)
Navajo_meta_data <- read_excel(paste(path_to_data, "StrepPneumo_Navajo/metadata.xlsx", sep = ""))
Navajo_time_points <- sort(unique(Navajo_meta_data$Year))
Navajo_SeqYear_dict <- Navajo_meta_data$Year
names(Navajo_SeqYear_dict) <- Navajo_meta_data$Accession
Navajo_meta_IDtoInd <- 1:nrow(Navajo_meta_data)
names(Navajo_meta_IDtoInd) <- Navajo_meta_data$Accession
Navajo_time_seq <- Navajo_time_points[1]:Navajo_time_points[length(Navajo_time_points)]
seq_no_per_year <- rep(0, length(Navajo_time_seq))
names(seq_no_per_year) <- Navajo_time_seq
for (i in 1:length(Navajo_time_seq)) {
seq_no_per_year[i] <- length(which(Navajo_meta_data$Year==Navajo_time_seq[i]))
}
barplot(seq_no_per_year, xlab = "Sequencing Years", ylab = "Sequence Counts")
# PCV7 was introduced in 2000
# PCV13 was introduced in 2010
# according to Azarian et al. (2018) https://doi.org/10.1371/journal.ppat.1006966
#
Navajo_time_points_selected <- Navajo_time_seq
Navajo_time_points_preVac1 <- Navajo_time_seq[1:3]
Navajo_time_points_preVac2 <- Navajo_time_seq[1:13]
PP_all <- read.csv(paste(path_to_data, "StrepPneumo_Navajo/poppunk_clusters/poppunk_clusters_clusters.csv",sep = ""))
PP_taxon_ind_dict <- 1:nrow(PP_all)
names(PP_taxon_ind_dict) <- PP_all$Taxon
PP_is_Navajo_dict <- rep(FALSE,nrow(PP_all))
names(PP_is_Navajo_dict) <- PP_all$Taxon
for (i in 1:length(Navajo_meta_data$Accession)) {
PP_is_Navajo_dict[Navajo_meta_data$Accession[i]] <- TRUE
}
Navajo_PP <- PP_all[PP_is_Navajo_dict,]
no_Navajo_PP <- length(unique(Navajo_PP$Cluster))
Navajo_seq_clusters_dict <- Navajo_PP$Cluster
names(Navajo_seq_clusters_dict) <- Navajo_PP$Taxon
saveRDS(Navajo_meta_data, "Navajo_meta_data.rds")
# Add Serotype Information
Navajo_Serotype_dict <- Navajo_meta_data$Sero
names(Navajo_Serotype_dict) <- Navajo_meta_data$Accession
Navajo_PP$Serotype <- Navajo_Serotype_dict[Navajo_PP$Taxon]
saveRDS(Navajo_PP,"Navajo_PP.rds")
Navajo_ggCaller <- read.csv(paste(path_to_data, "StrepPneumo_Navajo/gene_presence_absence.csv", sep = ""), header=FALSE)
# converting the gene presence absence matrix into a boolean df (0 = gene not present, 1 = gene present)
convert_to_bool <- function(x){
if (x=="") 0 else 1
}
Navajo_ggCaller_bool <- Navajo_ggCaller[,c(-2,-3)]
Navajo_ggCaller_bool[-1,-1] <- apply(Navajo_ggCaller_bool[-1,-1],c(1,2), convert_to_bool)
Navajo_ggCaller_bool[1,-1] <- sapply(Navajo_ggCaller_bool[1,-1], strsplit, split = ".contigs_velvet") # remove contigs appendix
colnames(Navajo_ggCaller_bool) <- Navajo_ggCaller_bool[1,]
PP_taxon_in_ggC <- rep(FALSE, length(Navajo_PP$Taxon))
names(PP_taxon_in_ggC) <- Navajo_PP$Taxon
for (i in 2:ncol(Navajo_ggCaller_bool)) {
PP_taxon_in_ggC[colnames(Navajo_ggCaller_bool)[i]] <- TRUE
}
length(PP_taxon_in_ggC)
length(PP_taxon_in_ggC)
barplot(seq_no_per_year, xlab = "Sequencing Years", ylab = "Sequence Counts", col = rainbow)
barplot(seq_no_per_year, xlab = "Sequencing Years", ylab = "Sequence Counts", col = rainbow(1:15))
barplot(seq_no_per_year, xlab = "Sequencing Years", ylab = "Sequence Counts", col = rainbow(15))
ggC_has_meta <- rep(FALSE, (ncol(Navajo_ggCaller_bool)-1))
names(ggC_has_meta) <- colnames(Navajo_ggCaller_bool)[-1]
for (i in 1:nrow(Navajo_meta_data)) {
ggC_has_meta[Navajo_meta_data$Accession[i]] <- TRUE
}
# filter ggCaller results by the ones
Navajo_ggCallerPP_bool <- data.frame(matrix(0, nrow = nrow(Navajo_ggCaller_bool), ncol = length(Navajo_PP$Taxon)+1))
Navajo_ggCallerPP_bool[-1,-1] <- Navajo_ggCaller_bool[-1,c(Navajo_PP$Taxon)]
length(PP_taxon_in_ggC)
length(PP_taxon_in_ggC)
ggC_has_meta
length(which(!ggC_has_meta))
PP_taxon_in_ggC <- rep(FALSE, length(Navajo_PP$Taxon))
names(PP_taxon_in_ggC) <- Navajo_PP$Taxon
length(PP_taxon_in_ggC)
View(Navajo_meta_data)
length(which(ggC_has_meta))
length(Navajo_PP$Taxon)
which(ggC_has_meta)
# filter ggCaller results by the ones
Navajo_ggCallerPP_bool <- data.frame(matrix(0, nrow = nrow(Navajo_ggCaller_bool), ncol = length(Navajo_PP$Taxon)+1))
Navajo_ggCallerPP_bool[-1,-1] <- Navajo_ggCaller_bool[-1,which(ggC_has_meta)]
c(Navajo_PP$Taxon)
names(which(ggC_has_meta))
# filter ggCaller results by the ones
Navajo_ggCallerPP_bool <- data.frame(matrix(0, nrow = nrow(Navajo_ggCaller_bool), ncol = length(Navajo_PP$Taxon)+1))
Navajo_ggCallerPP_bool[-1,-1] <- Navajo_ggCaller_bool[-1,names(which(ggC_has_meta))]
colnames(Navajo_ggCallerPP_bool)
Navajo_ggCaller_bool[1,-1] <- sapply(Navajo_ggCaller_bool[1,-1], strsplit, split = ".contigs_velvet") # remove contigs appendix
colnames(Navajo_ggCaller_bool) <- Navajo_ggCaller_bool[1,]
colnames(Navajo_ggCallerPP_bool)
colnames(Navajo_ggCaller)
colnames(Nepal_ggCaller)
# converting the gene presence absence matrix into a boolean df (0 = gene not present, 1 = gene present)
convert_to_bool <- function(x){
if (x=="") 0 else 1
}
Navajo_ggCaller_bool <- Navajo_ggCaller[,c(-2,-3)]
Navajo_ggCaller_bool[-1,-1] <- apply(Navajo_ggCaller_bool[-1,-1],c(1,2), convert_to_bool)
Navajo_ggCaller_bool[1,-1] <- sapply(Navajo_ggCaller_bool[1,-1], strsplit, split = ".contigs_velvet") # remove contigs appendix
colnames(Navajo_ggCaller_bool) <- Navajo_ggCaller_bool[1,]
colnames(Navajo_ggCaller_bool)
PP_taxon_in_ggC <- rep(FALSE, length(Navajo_PP$Taxon))
names(PP_taxon_in_ggC) <- Navajo_PP$Taxon
for (i in 2:ncol(Navajo_ggCaller_bool)) {
PP_taxon_in_ggC[colnames(Navajo_ggCaller_bool)[i]] <- TRUE
}
ggC_has_meta <- rep(FALSE, (ncol(Navajo_ggCaller_bool)-1))
names(ggC_has_meta) <- colnames(Navajo_ggCaller_bool)[-1]
# filter ggCaller results by the ones
Navajo_ggCallerPP_bool <- data.frame(matrix(0, nrow = nrow(Navajo_ggCaller_bool), ncol = length(Navajo_PP$Taxon)+1))
Navajo_ggCallerPP_bool[-1,-1] <- Navajo_ggCaller_bool[-1,names(which(ggC_has_meta))]
length(names(which(ggC_has_meta)))
which(ggC_has_meta)
ggC_has_meta
head(Navajo_meta_data$Accession[i])
ggC_has_meta <- rep(FALSE, (ncol(Navajo_ggCaller_bool)-1))
names(ggC_has_meta) <- colnames(Navajo_ggCaller_bool)[-1]
for (i in 1:nrow(Navajo_meta_data)) {
ggC_has_meta[Navajo_meta_data$Accession[i]] <- TRUE
}
# filter ggCaller results by the ones
Navajo_ggCallerPP_bool <- data.frame(matrix(0, nrow = nrow(Navajo_ggCaller_bool), ncol = length(Navajo_PP$Taxon)+1))
which(ggC_has_meta)
# filter ggCaller results by the ones
Navajo_ggCallerPP_bool <- data.frame(matrix(0, nrow = nrow(Navajo_ggCaller_bool), ncol = length(Navajo_PP$Taxon)+1))
Navajo_ggCallerPP_bool[-1,-1] <- Navajo_ggCaller_bool[-1,names(which(ggC_has_meta))]
length(names(which(ggC_has_meta)))
head(ggC_has_meta)
tail(ggC_has_meta)
Navajo_ggCallerPP_bool[-1,-1] <- Navajo_ggCaller_bool[-1,(which(ggC_has_meta))]
Navajo_ggCaller_bool[-1,c(1,2)]
head(ggC_has_meta)
Navajo_ggCaller_bool[-1,"ERR1068056"]
which(ggC_has_meta)
ncol(Navajo_ggCaller_bool)
which(!ggC_has_meta)
meta_has_ggC <- rep(FALSE, nrow(Navajo_meta_dataPP))
nrow(Navajo_meta_dataPP)
nrow(Navajo_meta_data)
meta_has_ggC <- rep(FALSE, nrow(Navajo_meta_data))
names(meta_has_ggC) <- Navajo_meta_data$Accession
for (i in 2:ncol(Navajo_ggCaller_bool)) {
meta_has_ggC[Navajo_ggCaller_bool[i]] <- TRUE
}
meta_has_ggC <- rep(FALSE, nrow(Navajo_meta_data))
names(meta_has_ggC) <- Navajo_meta_data$Accession
for (i in 2:ncol(Navajo_ggCaller_bool)) {
meta_has_ggC[colnames(Navajo_ggCaller_bool)[i]] <- TRUE
}
which(!meta_has_ggC)
which(!ggC_has_meta)
