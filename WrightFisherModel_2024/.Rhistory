plot(1:length(unique(PopPUNK_clusters$Cluster)),binom_conf_data[,1], ylim = c(0,0.25),main="Binomial 66% conf. intervals on data vs model", xaxt = "n", xlab = "Clusters", ylab = "Frequency")
arrows(1:length(unique(PopPUNK_clusters$Cluster)),binom_conf_data[,2], 1:length(unique(PopPUNK_clusters$Cluster)), binom_conf_data[,3], angle=90, code=3, length=0.06, col="black")
points(cluster_samples_ParamVar[1,],col="red")
points(cluster_samples_ParamVar[1,]/sum(cluster_samples_ParamVar[1,]),col="red")
#BinomCI(PP_mass_cluster_freq_3[2], (sum(PP_mass_cluster_freq_3)))
plot(1:length(unique(PopPUNK_clusters$Cluster)),binom_conf_data[,1], ylim = c(0,0.25),main="Binomial 66% conf. intervals on data vs model", xaxt = "n", xlab = "Clusters", ylab = "Frequency")
arrows(1:length(unique(PopPUNK_clusters$Cluster)),binom_conf_data[,2], 1:length(unique(PopPUNK_clusters$Cluster)), binom_conf_data[,3], angle=90, code=3, length=0.06, col="black")
for (i in 1:length(rand_ind)) {
points(cluster_samples_ParamVar[i,]/sum(cluster_samples_ParamVar[i,]),col="red")
}
rand_ind <- sample(x = 1:nrow(PPxSero_mcmc), size = 1000, replace = FALSE)
WF_PPxSero <- odin.dust::odin_dust("NFDS_Model_PPxSero.R")
empty_vec <- rep(0,PP_mass_clusters)
cluster_samples_ParamVar <- array(rep(empty_vec,length(rand_ind)),dim = c(length(rand_ind),PP_mass_clusters))
for (i in 1:length(rand_ind)) {
pars <- PPxSero_mcmc[rand_ind[i],4:7]
fitPPxSero_params <- list(dt = 1/36, species_no = PP_mass_clusters, sero_no = length(unique(PopPUNK_clusters$Serotype)), gene_no = nrow(intermed_gene_presence_absence_consensus)-1, Pop_ini = PPsero_startpop6, Pop_eq = as.double(rowSums(PPsero_startpop6)), capacity = sum(model_start_pop), Genotypes = intermed_gene_presence_absence_consensus_matrix, sigma_f = pars[1], prop_f = pars[2], delta = delta_ranking, m = pars[3], migVec = avg_cluster_freq, vaccTypes = mass_VT, v = pars[4], vacc_time = 0)
WFmodel_ppxSero <- WF_PPxSero$new(pars = fitPPxSero_params,
time = 0,
n_particles = 1L,
n_threads = 4L,
seed = 1L)
cluster_samples_ParamVar[i,] <- (WFmodel_ppxSero$run(72)[2:(PP_mass_clusters+1),])
}
binom_conf_data <- t(sapply(PP_mass_cluster_freq_3, BinomCI, sum(PP_mass_cluster_freq_3,conf.level = 0.66)))
#BinomCI(PP_mass_cluster_freq_3[2], (sum(PP_mass_cluster_freq_3)))
plot(1:length(unique(PopPUNK_clusters$Cluster)),binom_conf_data[,1], ylim = c(0,0.25),main="Binomial 66% conf. intervals on data vs model", xaxt = "n", xlab = "Clusters", ylab = "Frequency")
arrows(1:length(unique(PopPUNK_clusters$Cluster)),binom_conf_data[,2], 1:length(unique(PopPUNK_clusters$Cluster)), binom_conf_data[,3], angle=90, code=3, length=0.06, col="black")
for (i in 1:length(rand_ind)) {
points(cluster_samples_ParamVar[i,]/sum(cluster_samples_ParamVar[i,]),col="red")
}
saveRDS(cluster_samples_ParamVar, "cluster_samples_ParamVar1000.rds")
empty_vec <- rep(0,PP_mass_clusters)
conf_intervals_Mass <- array(c(empty_vec,empty_vec),dim = c(PP_mass_clusters, 2))
empty_vec <- rep(0,PP_mass_clusters)
conf_intervals_Mass <- array(c(empty_vec,empty_vec),dim = c(PP_mass_clusters, 2))
dim(cluster_samples_ParamVar)
for (i in 1:PP_mass_clusters) {
ttest <- t.test(cluster_samples_ParamVar[,i])
conf_intervals_Mass[i,] <- c(ttest$conf.int[1], ttest$conf.int[2])
}
head(conf_intervals_Mass)
cluster_samples_ParamVar_rel <- cluster_samples_ParamVar/rowSums(cluster_samples_ParamVar)
for (i in 1:PP_mass_clusters) {
ttest <- t.test(cluster_samples_ParamVar_rel[,i])
conf_intervals_Mass[i,] <- c(ttest$conf.int[1], ttest$conf.int[2])
}
head(conf_intervals_Mass)
points(conf_intervals_Mass[,1],col="red")
plot(1:length(unique(PopPUNK_clusters$Cluster)),binom_conf_data[,1], ylim = c(0,0.25),main="Binomial 66% conf. intervals on data vs model", xaxt = "n", xlab = "Clusters", ylab = "Frequency")
arrows(1:length(unique(PopPUNK_clusters$Cluster)),binom_conf_data[,2], 1:length(unique(PopPUNK_clusters$Cluster)), binom_conf_data[,3], angle=90, code=3, length=0.06, col="black")
points(conf_intervals_Mass[,1],col="red")
points(conf_intervals_Mass[,2],col="red")
sd(cluster_samples_ParamVar_rel[,1])
sd(cluster_samples_ParamVar_rel[,2])
sd_Mass_ParamSamples <- empty_vec
apply(cluster_samples_ParamVar_rel, 2,sd)
sd_Mass_ParamSamples <- apply(cluster_samples_ParamVar_rel, 2,sd)
mean_Mass_ParamSamples <- apply(cluster_samples_ParamVar_rel,2,mean)
plot(1:length(unique(PopPUNK_clusters$Cluster)),binom_conf_data[,1], ylim = c(0,0.25),main="Binomial 66% conf. intervals on data vs model", xaxt = "n", xlab = "Clusters", ylab = "Frequency")
arrows(1:length(unique(PopPUNK_clusters$Cluster)),binom_conf_data[,2], 1:length(unique(PopPUNK_clusters$Cluster)), binom_conf_data[,3], angle=90, code=3, length=0.06, col="black")
points(mean_Mass_ParamSamples + sd_Mass_ParamSamples,col="red")
points(mean_Mass_ParamSamples - sd_Mass_ParamSamples,col="red")
plot(1:length(unique(PopPUNK_clusters$Cluster)),binom_conf_data[,1], ylim = c(0,0.25),main="Binomial 66% conf. intervals on data vs model", xaxt = "n", xlab = "Clusters", ylab = "Frequency")
arrows(1:length(unique(PopPUNK_clusters$Cluster)),binom_conf_data[,2], 1:length(unique(PopPUNK_clusters$Cluster)), binom_conf_data[,3], angle=90, code=3, length=0.06, col="black")
points(mean_Mass_ParamSamples,col="red")
arrows(1:length(unique(PopPUNK_clusters$Cluster)),mean_Mass_ParamSamples + sd_Mass_ParamSamples, 1:length(unique(PopPUNK_clusters$Cluster)),mean_Mass_ParamSamples - sd_Mass_ParamSamples, angle=90, code=3, length=0.06, col="red")
# create dummy data
data_with_errors <- data.frame(
cluster=unique(PopPUNK_clusters$Cluster),
xvals = 1:length(unique(PopPUNK_clusters$Cluster)),
data=PP_mass_cluster_freq_3/sum(PP_mass_cluster_freq_3),
sd=sqrt(PP_mass_cluster_freq_3)/sum(PP_mass_cluster_freq_3),
model=simMeanggCPP3_clust/sum(simMeanggCPP3_clust),
model_sd = sqrt(simMeanggCPP3_clust)/sum(simMeanggCPP3_clust)
)
# Most basic error bar
ggplot(data_with_errors) +
geom_bar( aes(x=xvals, y=data), stat="identity", fill="black", alpha=0.5) +
geom_errorbar( aes(x=xvals, ymin=data-sd, ymax=data+sd), width=0.4, colour="black", alpha=0.9, size=1.3) +
geom_point(aes(x=xvals, y=model), colour="red", shape = 19, size=3)
data_and_model_with_errors <- data.frame(
cluster=rep(unique(PopPUNK_clusters$Cluster),2),
xvals = 1:length(unique(PopPUNK_clusters$Cluster)),
condition = c(rep("Data",length(unique(PopPUNK_clusters$Cluster))),rep("Model",length(unique(PopPUNK_clusters$Cluster)))),
values=c(PP_mass_cluster_freq_3/sum(PP_mass_cluster_freq_3), mean_Mass_ParamSamples),
sd=c(sqrt(PP_mass_cluster_freq_3)/sum(PP_mass_cluster_freq_3), sd_Mass_ParamSamples),
)
data_and_model_with_errors <- data.frame(
cluster=rep(unique(PopPUNK_clusters$Cluster),2),
xvals = 1:length(unique(PopPUNK_clusters$Cluster)),
condition = c(rep("Data",length(unique(PopPUNK_clusters$Cluster))),rep("Model",length(unique(PopPUNK_clusters$Cluster)))),
values=c(PP_mass_cluster_freq_3/sum(PP_mass_cluster_freq_3), mean_Mass_ParamSamples),
sd=c(sqrt(PP_mass_cluster_freq_3)/sum(PP_mass_cluster_freq_3), sd_Mass_ParamSamples)
)
ggplot(data, aes(fill=condition, y=values, x=xvals)) +
geom_bar(position="dodge", stat="identity")
ggplot(data_and_model_with_errors, aes(fill=condition, y=values, x=xvals)) +
geom_bar(position="dodge", stat="identity")
ggplot(data_and_model_with_errors, aes(fill=condition, y=values, x=xvals)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar( aes(x=xvals, ymin=data-sd, ymax=values+sd), width=0.4, colour="black", alpha=0.9, size=1.3)
ggplot(data_and_model_with_errors, aes(fill=condition, y=values, x=xvals)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar( aes(x=xvals, ymin=values-sd, ymax=values+sd), width=0.4, colour="black", alpha=0.9, size=1.3)
ggplot(data_and_model_with_errors, aes(fill=condition, y=values, x=xvals)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar( aes(position="dodge", ymin=values-sd, ymax=values+sd), width=0.4, colour="black", alpha=0.9, size=1.3)
ggplot(data_and_model_with_errors, aes(fill=condition, y=values, x=xvals)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar( aes(ymin=values-sd, ymax=values+sd), width=0.4, colour="black", alpha=0.9, size=1.3,position=position_dodge(.9))
ggplot(data_and_model_with_errors, aes(fill=condition, y=values, x=xvals)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar( aes(ymin=values-sd, ymax=values+sd), width=0.4, colour="black", alpha=0.9, size=1,position=position_dodge(.9))
ggplot(data_and_model_with_errors, aes(fill=condition, y=values, x=xvals)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar( aes(ymin=values-sd, ymax=values+sd), width=0.2, colour="black", alpha=0.9, size=1,position=position_dodge(.9))
ggplot(data_and_model_with_errors, aes(fill=condition, y=values, x=xvals)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar( aes(ymin=values-sd, ymax=values+sd), width=0.2, colour="black", alpha=0.9, size=1.5,position=position_dodge(.9))
ggplot(data_and_model_with_errors, aes(fill=condition, y=values, x=xvals)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar( aes(ymin=values-sd, ymax=values+sd), width=0.8, colour="black", alpha=0.9, size=1,position=position_dodge(.9))
ggplot(data_and_model_with_errors, aes(fill=condition, y=values, x=xvals)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar( aes(ymin=values-sd, ymax=values+sd), width=0.8, colour="black", alpha=0.9, size=1,position=position_dodge(.9)) +
scale_x_discrete(cluster)
ggplot(data_and_model_with_errors, aes(fill=condition, y=values, x=xvals)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar( aes(ymin=values-sd, ymax=values+sd), width=0.8, colour="black", alpha=0.9, size=1,position=position_dodge(.9)) +
scale_x_discrete("Clusters", xvals, cluster)
data_and_model_with_errors <- data.frame(
cluster=rep(unique(PopPUNK_clusters$Cluster),2),
xvals = 1:length(unique(PopPUNK_clusters$Cluster)),
condition = c(rep("Data",length(unique(PopPUNK_clusters$Cluster))),rep("Model",length(unique(PopPUNK_clusters$Cluster)))),
values=c(PP_mass_cluster_freq_3/sum(PP_mass_cluster_freq_3), mean_Mass_ParamSamples),
sd=c(sqrt(PP_mass_cluster_freq_3)/sum(PP_mass_cluster_freq_3), sd_Mass_ParamSamples)
)
ggplot(data_and_model_with_errors, aes(fill=condition, y=values, x=xvals)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar( aes(ymin=values-sd, ymax=values+sd), width=0.8, colour="black", alpha=0.9, size=1,position=position_dodge(.9)) +
scale_x_discrete("Clusters", xvals, cluster)
ggplot(data_and_model_with_errors, aes(fill=condition, y=values, x=xvals)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar( aes(ymin=values-sd, ymax=values+sd), width=0.8, colour="black", alpha=0.9, size=1,position=position_dodge(.9)) +
scale_x_discrete("Clusters", breaks = xvals, labels = cluster)
data_and_model_with_errors <- data.frame(
cluster=rep(unique(PopPUNK_clusters$Cluster),2),
xvals = 1:length(unique(PopPUNK_clusters$Cluster)),
condition = c(rep("Data",length(unique(PopPUNK_clusters$Cluster))),rep("Model",length(unique(PopPUNK_clusters$Cluster)))),
values=c(PP_mass_cluster_freq_3/sum(PP_mass_cluster_freq_3), mean_Mass_ParamSamples),
sd=c(sqrt(PP_mass_cluster_freq_3)/sum(PP_mass_cluster_freq_3), sd_Mass_ParamSamples)
)
ggplot(data_and_model_with_errors, aes(fill=condition, y=values, x=xvals)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar( aes(ymin=values-sd, ymax=values+sd), width=0.8, colour="black", alpha=0.9, size=1,position=position_dodge(.9)) +
scale_x_discrete("Clusters", breaks = xvals, labels = cluster)
ggplot(data_and_model_with_errors, aes(fill=condition, y=values, x=xvals)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar( aes(ymin=values-sd, ymax=values+sd), width=0.8, colour="black", alpha=0.9, size=1,position=position_dodge(.9)) +
scale_x_discrete("Clusters", breaks = as.character(xvals), labels = cluster)
ggplot(data_and_model_with_errors, aes(fill=condition, y=values, x=xvals)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar( aes(ymin=values-sd, ymax=values+sd), width=0.8, colour="black", alpha=0.9, size=1,position=position_dodge(.9)) +
scale_x_discrete("Clusters", breaks = as.character(xvals), labels = cluster)
ggplot(data_and_model_with_errors, aes(fill=condition, y=values, x=xvals)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar( aes(ymin=values-sd, ymax=values+sd), width=0.8, colour="black", alpha=0.9, size=1,position=position_dodge(.9)) +
scale_x_discrete("Clusters", breaks = as.character(xvals), labels = cluster)
ggplot(data_and_model_with_errors, aes(fill=condition, y=values, x=xvals)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar( aes(ymin=values-sd, ymax=values+sd), width=0.8, colour="black", alpha=0.9, size=1,position=position_dodge(.9)) +
scale_x_discrete("Clusters", labels = cluster)
data_and_model_with_errors <- data.frame(
cluster=rep(unique(PopPUNK_clusters$Cluster),2),
xvals = rep(1:length(unique(PopPUNK_clusters$Cluster)),2),
condition = c(rep("Data",length(unique(PopPUNK_clusters$Cluster))),rep("Model",length(unique(PopPUNK_clusters$Cluster)))),
values=c(PP_mass_cluster_freq_3/sum(PP_mass_cluster_freq_3), mean_Mass_ParamSamples),
sd=c(sqrt(PP_mass_cluster_freq_3)/sum(PP_mass_cluster_freq_3), sd_Mass_ParamSamples)
)
ggplot(data_and_model_with_errors, aes(fill=condition, y=values, x=xvals)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar( aes(ymin=values-sd, ymax=values+sd), width=0.8, colour="black", alpha=0.9, size=1,position=position_dodge(.9)) +
scale_x_discrete("Clusters", labels = cluster)
ggplot(data_and_model_with_errors, aes(fill=condition, y=values, x=xvals)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar( aes(ymin=values-sd, ymax=values+sd), width=0.8, colour="black", alpha=0.9, size=1,position=position_dodge(.9)) +
scale_x_discrete("Clusters", breaks = xvals, labels = cluster)
head(data_and_model_with_errors)
ggplot(data_and_model_with_errors, aes(fill=condition, y=values, x=xvals)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar( aes(ymin=values-sd, ymax=values+sd), width=0.8, colour="black", alpha=0.9, size=1,position=position_dodge(.9)) #+
ggplot(data_and_model_with_errors, aes(fill=condition, y=values, x=xvals)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar( aes(ymin=values-sd, ymax=values+sd), width=0.8, colour="black", alpha=0.9, size=1,position=position_dodge(.9)) +
scale_x_continuous("Clusters", breaks = xvals, labels = cluster)
ggplot(data_and_model_with_errors, aes(fill=condition, y=values, x=xvals)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar( aes(ymin=values-sd, ymax=values+sd), width=0.8, colour="black", alpha=0.9, size=1,position=position_dodge(.9)) +
scale_x_continuous("Clusters", labels = cluster)
ggplot(data_and_model_with_errors, aes(fill=condition, y=values, x=xvals)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar( aes(ymin=values-sd, ymax=values+sd), width=0.8, colour="black", alpha=0.9, size=1,position=position_dodge(.9)) +
scale_x_continuous("Clusters", breaks = 1:length(cluster), labels = cluster)
sd_Mass_ParamSamples
quantile(cluster_samples_ParamVar_rel[,1])
head(cluster_samples_ParamVar_rel[,1])
quantile(cluster_samples_ParamVar_rel[,1],.95)
quantile_Mass_ParamSamples <- apply(cluster_samples_ParamVar_rel,2,quantile,.95)
quantile_Mass_ParamSamples
mean_Mass_ParamSamples
plot(1:length(unique(PopPUNK_clusters$Cluster)),binom_conf_data[,1], ylim = c(0,0.25),main="Binomial 66% conf. intervals on data vs model", xaxt = "n", xlab = "Clusters", ylab = "Frequency")
arrows(1:length(unique(PopPUNK_clusters$Cluster)),binom_conf_data[,2], 1:length(unique(PopPUNK_clusters$Cluster)), binom_conf_data[,3], angle=90, code=3, length=0.06, col="black")
points(mean_Mass_ParamSamples,col="red")
points(quantile_Mass_ParamSamples,col="blue")
sd_Mass_ParamSamples <- apply(cluster_samples_ParamVar_rel, 2,sd)
mean_Mass_ParamSamples <- apply(cluster_samples_ParamVar_rel,2,mean)
quantile_Mass_ParamSamples_up <- apply(cluster_samples_ParamVar_rel,2,quantile,.975)
quantile_Mass_ParamSamples_low <- apply(cluster_samples_ParamVar_rel,2,quantile,.025)
plot(1:length(unique(PopPUNK_clusters$Cluster)),binom_conf_data[,1], ylim = c(0,0.25),main="Binomial 66% conf. intervals on data vs model", xaxt = "n", xlab = "Clusters", ylab = "Frequency")
arrows(1:length(unique(PopPUNK_clusters$Cluster)),binom_conf_data[,2], 1:length(unique(PopPUNK_clusters$Cluster)), binom_conf_data[,3], angle=90, code=3, length=0.06, col="black")
points(mean_Mass_ParamSamples,col="red")
arrows(1:length(unique(PopPUNK_clusters$Cluster)),quantile_Mass_ParamSamples_low, 1:length(unique(PopPUNK_clusters$Cluster)),quantile_Mass_ParamSamples_up, angle=90, code=3, length=0.06, col="red")
#points(mean_Mass_ParamSamples + sd_Mass_ParamSamples,col="red")
#points(mean_Mass_ParamSamples - sd_Mass_ParamSamples,col="red")
binom_conf_data <- t(sapply(PP_mass_cluster_freq_3, BinomCI, sum(PP_mass_cluster_freq_3,conf.level = 0.66)))
head(binom_conf_data)
data_and_model_with_errors <- data.frame(
cluster=rep(unique(PopPUNK_clusters$Cluster),2),
xvals = rep(1:length(unique(PopPUNK_clusters$Cluster)),2),
condition = c(rep("Data",length(unique(PopPUNK_clusters$Cluster))),rep("Model",length(unique(PopPUNK_clusters$Cluster)))),
values=c(PP_mass_cluster_freq_3/sum(PP_mass_cluster_freq_3), mean_Mass_ParamSamples),
upper=c(binom_conf_data[,2], quantile_Mass_ParamSamples_low),
lowre = c(binom_conf_data[,3], quantile_Mass_ParamSamples_up)
)
ggplot(data_and_model_with_errors, aes(fill=condition, y=values, x=xvals)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar( aes(ymin=values-sd, ymax=values+sd), width=0.8, colour="black", alpha=0.9, size=1,position=position_dodge(.9)) +
scale_x_continuous("Clusters", breaks = 1:length(cluster), labels = cluster)
ggplot(data_and_model_with_errors, aes(fill=condition, y=values, x=xvals)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar( aes(ymin=lower, ymax=upper), width=0.8, colour="black", alpha=0.9, size=1,position=position_dodge(.9)) +
scale_x_continuous("Clusters", breaks = 1:length(cluster), labels = cluster)
data_and_model_with_errors <- data.frame(
cluster=rep(unique(PopPUNK_clusters$Cluster),2),
xvals = rep(1:length(unique(PopPUNK_clusters$Cluster)),2),
condition = c(rep("Data",length(unique(PopPUNK_clusters$Cluster))),rep("Model",length(unique(PopPUNK_clusters$Cluster)))),
values=c(PP_mass_cluster_freq_3/sum(PP_mass_cluster_freq_3), mean_Mass_ParamSamples),
upper=c(binom_conf_data[,2], quantile_Mass_ParamSamples_low),
lower = c(binom_conf_data[,3], quantile_Mass_ParamSamples_up)
)
ggplot(data_and_model_with_errors, aes(fill=condition, y=values, x=xvals)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar( aes(ymin=lower, ymax=upper), width=0.8, colour="black", alpha=0.9, size=1,position=position_dodge(.9)) +
scale_x_continuous("Clusters", breaks = 1:length(cluster), labels = cluster)
PP_mass_cluster_freq_3/sum(PP_mass_cluster_freq_3)
binom_conf_data[8,3]
ggplot(data_and_model_with_errors, aes(fill=condition, y=values, x=xvals)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar( aes(ymin=lower, ymax=upper), width=0.8, colour="black", alpha=0.9, size=1,position=position_dodge(.9)) +
scale_x_continuous("Clusters", breaks = 1:(length(cluster)/2), labels = cluster[1:(length(cluster)/2)])
ggplot(data_and_model_with_errors, aes(fill=condition, y=values, x=xvals)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar( aes(ymin=lower, ymax=upper), width=0.8, colour="black", alpha=0.9, size=1,position=position_dodge(.9)) +
scale_x_continuous("Clusters", breaks = 1:(length(cluster)/2), labels = cluster[1:(length(cluster)/2)])
### Loading packages
# install.packages("drat") # -- if you don't have drat installed
# drat:::add("ncov-ic")
# install.packages("odin.dust")
library(odin.dust)
#install.packages("mcstate")
library(mcstate)
#install.packages("mcstate")
library(mcstate)
library(coda)
# read in model from file
WF <- odin.dust::odin_dust("NFDS_Model_PPxSero.R")
# likelihood for fitting:
ll_pois <<- function(obs, model) {
exp_noise <- 1e6
if (is.na(obs)) {
# Creates vector of zeros in ll with same length, if no data
ll_obs <- numeric(length(model))
} else {
lambda <- model + rexp(n = length(model), rate = exp_noise)
ll_obs <- dpois(x = obs, lambda = lambda, log = TRUE)
}
ll_obs
}
combined_compare <- function(state, observed, pars = NULL) {
result <- 0
#data_size <- sum(unlist(observed))
data_size <- sum(unlist(observed[as.character(1:(length(unlist(observed))-4))]))
model_size = sum(unlist(state[-1, , drop = TRUE]))
exp_noise <- 1e6
data_vals <- unlist(observed[as.character(1:(length(unlist(observed))-4))])
#model_vals <- state[-1, , drop = TRUE]
model_vals <- rep(0, length(unlist(observed))-4)
data_missing <- FALSE
for (i in 1:(length(unlist(observed))-4)){
state_name <- paste("sum_clust", i, sep = "")
model_vals[i] <- state[state_name, , drop = TRUE]
if (is.na(observed[[as.character(i)]])) {
#Creates vector of zeros in ll with same length, if no data
#ll_obs <- numeric(length( state[state_name, , drop = TRUE]))
data_missing <- TRUE
}
}
models_vals_err <- model_vals + rexp(n = length(model_vals), rate = exp_noise)
if(data_missing){
ll_obs <- 0
}
else{
ll_obs <- dmultinom(x = (data_vals), prob = models_vals_err/model_size, log = TRUE)
}
result <- ll_obs
#for (i in 1:(length(unlist(observed))-4)){
#  state_name <- paste("sum_clust", i, sep = "")
#  if (is.na(observed[[as.character(i)]])) {
#    #Creates vector of zeros in ll with same length, if no data
#    ll_obs <- numeric(length( state[state_name, , drop = TRUE]))
#  } else {
#lambda <-  state[state_name, , drop = TRUE]/model_size * data_size + rexp(n = length( state[state_name, , drop = TRUE]/model_size * data_size), rate = exp_noise)
#ll_obs <- dpois(x = observed[[as.character(i)]], lambda = lambda, log = TRUE)
#    ll_obs <- dmultinom(x = (data_vals), prob = model_vals/model_size, log = TRUE)
#  }
#  result <- result + ll_obs
#}
result
}
seq_clusters <- readRDS("PopPUNK_clusters.rds")
sero_no = length(unique(seq_clusters$Serotype))
intermed_gene_presence_absence_consensus <- readRDS(file = "ggCPP_intermed_gene_presence_absence_consensus.rds")
intermed_gene_presence_absence_consensus_matrix <- sapply(intermed_gene_presence_absence_consensus[-1,-1],as.double)
#model_start_pop <- readRDS("PP_mass_cluster_freq_1_sero.rds")
#model_start_pop <- model_start_pop / 133 * 15708
model_start_pop <- readRDS("PPsero_startpop6.rds")
#model_start_pop <- readRDS("PP_mass_cluster_freq_1_sero.rds") # try using data directly
#model_start_pop <- readRDS(file = "PPsero_startpop4.rds")
#model_start_pop <- readRDS(file = "PPsero_startpop.rds")
delta_ranking <- readRDS(file = "ggC_delta_ranking.rds")
mass_cluster_freq_1 <- readRDS(file = "PP_mass_cluster_freq_1.rds")
mass_cluster_freq_2 <- readRDS(file = "PP_mass_cluster_freq_2.rds")
mass_cluster_freq_3 <- readRDS(file = "PP_mass_cluster_freq_3.rds")
#mass_VT <- readRDS(file = "SeroVT.rds")
mass_VT <- readRDS(file = "SeroVT.rds")
mass_clusters <- length(unique(seq_clusters$Cluster))
avg_cluster_freq <- readRDS(file = "PPsero_mig.rds")
dt <- 1/36
peripost_mass_cluster_freq <- data.frame("year" = c(1, 2), rbind(mass_cluster_freq_2, mass_cluster_freq_3))
names(peripost_mass_cluster_freq) <- c("year", as.character(1:mass_clusters))
vacc_time <- 0
output_filename <- "PPxSero_ggCaller_PopPUNK"
threads_total <- 1
worker_nodes <- 1
stoch_run <- FALSE
if(length(args)>=5 & args[5]=="stoch"){
stoch_run <- TRUE
}
fitting_mass_data <- mcstate::particle_filter_data(data = peripost_mass_cluster_freq,
time = "year",
rate = 1 / dt,
initial_time = 0)
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
# Using MCMC to infer parameters
pmcmc_sigma_f <- -1000
#pmcmc_sigma_w <- 0
pmcmc_sigma_w <- -1000
pmcmc_prop_f <- 1
pmcmc_m <- mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1)
pmcmc_v <- mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)
species_no <- mass_clusters
no_clusters <- mass_clusters
gene_no <- nrow(intermed_gene_presence_absence_consensus_matrix)
Pop_ini <- data.frame(model_start_pop)
Pop_eq <- rowSums(model_start_pop)
Genotypes <- intermed_gene_presence_absence_consensus_matrix
capacity <- sum(model_start_pop)
delta <- delta_ranking
vaccTypes <- mass_VT
migVec <- data.frame(avg_cluster_freq)
complex_params = list(species_no = species_no, Pop_ini = Pop_ini, Pop_eq = Pop_eq, Genotypes = intermed_gene_presence_absence_consensus[-1,-1], capacity = capacity, delta = delta, vaccTypes = vaccTypes, gene_no = gene_no, vacc_time = vacc_time, dt = dt, sigma_w = pmcmc_sigma_w, migVec = (migVec), sero_no = sero_no)
make_transform <- function(m) {
function(theta) {
as_double_mtx <- function(x){
sapply(x,as.double)
}
c(lapply(m, as_double_mtx), as.list(theta))
}
}
complex_params = list(species_no = species_no, Pop_ini = Pop_ini, Pop_eq = Pop_eq, Genotypes = intermed_gene_presence_absence_consensus[-1,-1], capacity = capacity, delta = delta, vaccTypes = vaccTypes, gene_no = gene_no, vacc_time = vacc_time, dt = dt, sigma_w = pmcmc_sigma_w, migVec = (migVec), sero_no = sero_no, sigma_f = pmcmc_sigma_f, prop_f = pmcmc_prop_f)
make_transform <- function(m) {
function(theta) {
as_double_mtx <- function(x){
sapply(x,as.double)
}
c(lapply(m, as_double_mtx), as.list(theta))
}
}
index <- function(info) {
list(run = c(sum_clust = info$index$Pop_tot),
state = c(Pop = info$index$Pop))
}
#proposal_matrix <- diag(0.1,4) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
# here, all parameters are proposed independently.
# think about this, this might not actually be true
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(pmcmc_sigma_f, pmcmc_sigma_w, pmcmc_prop_f, pmcmc_m, pmcmc_v), proposal_matrix, transform)
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 01), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = -2), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
proposal_matrix <- diag(c(exp(1), 0.1))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter(mcstate::pmcmc_parameter("m", runif(n=1, min=-10, max=0), min = -1000, max = 0), mcstate::pmcmc_parameter("v", runif(n=1, min=0, max=1), min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("m", runif(n=1, min=-10, max=0), min = -1000, max = 0), mcstate::pmcmc_parameter("v", runif(n=1, min=0, max=1), min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
#proposal_matrix <- diag(0.1,4) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
# here, all parameters are proposed independently.
# think about this, this might not actually be true
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(pmcmc_sigma_f, pmcmc_sigma_w, pmcmc_prop_f, pmcmc_m, pmcmc_v), proposal_matrix, transform)
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 01), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = -2), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
proposal_matrix <- diag(c(exp(1), 0.1))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("m", runif(n=1, min=-10, max=0), min = -1000, max = 0), mcstate::pmcmc_parameter("v", runif(n=1, min=0, max=1), min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars$initial()
#WF$public_methods$has_openmp()
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
index = index,
compare = combined_compare)
n_steps <- 5
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 1)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
n_steps <- 1000
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains =4, n_workers = 4,
n_threads_total = 4)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
n_steps <- 100
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains =4, n_workers = 4,
n_threads_total = 4)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run, burnin = 250, thin = 1)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run, burnin = 25, thin = 1)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
print(parameter_mean_hpd)
det_mcmc1 <- coda::as.mcmc(cbind(det_pmcmc_run$probabilities, det_pmcmc_run$pars))
plot(det_mcmc1)
print("det_mcmc_1 final log likelihood")
processed_chains$probabilities[nrow(processed_chains$probabilities),2]
print("det_mcmc_1 mean log likelihood")
mean(processed_chains$probabilities[,2])
pchisq(lambda = -2 * (340 - 260), 4-2)
pchisq( -2 * (340 - 260), 4-2, lower.tail = FALSE)
# Step Function Models (original)
# compare 3-param model to 5-param model
# ggCaller and PopPUNK
step_LL_3param <- -334.3289
step_LL_5param <- -263.4791
step_LL_4param <- -262.268
step_LL_null <- -335.0503
lambda <- -2 * (step_LL_3param - step_LL_5param)
pchisq(lambda, 5-3, lower.tail = FALSE)
lambda <- -2 * (-340 - (-260))
pchisq(lambda, 4-2, lower.tail = FALSE)
mean(processed_chains$probabilities[,2])
det_proposal_matrix <- cov(processed_chains$pars)
det_proposal_matrix
processed_chains
processed_chains$pars
ggplot(data_and_model_with_errors, aes(fill=condition, y=values, x=xvals)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar( aes(ymin=lower, ymax=upper), width=0.8, colour="black", alpha=0.9, size=1,position=position_dodge(.9)) +
scale_x_continuous("Clusters", breaks = 1:(length(cluster)/2), labels = cluster[1:(length(cluster)/2)])
#null model vals m -3.701675 v 0.6740351
fitPPxSero_params <- list(dt = 1/36, species_no = PP_mass_clusters, sero_no = length(unique(PopPUNK_clusters$Serotype)), gene_no = nrow(intermed_gene_presence_absence_consensus)-1, Pop_ini = PPsero_startpop6, Pop_eq = as.double(rowSums(PPsero_startpop6)), capacity = sum(model_start_pop), Genotypes = intermed_gene_presence_absence_consensus_matrix, sigma_f = -1000, prop_f = 1, delta = delta_ranking, m = -3.701675, migVec = avg_cluster_freq, vaccTypes = mass_VT, v = 0.6740351, vacc_time = 0)
WFmodel_ppxSero <- WF_PPxSero$new(pars = fitPPxSero_params,
time = 0,
n_particles = 1L,
n_threads = 4L,
seed = 1L)
WFmodel_ppxSero$run(72)[2:(PP_mass_clusters+1),]
null_mod_test <- WFmodel_ppxSero$run(72)[2:(PP_mass_clusters+1),]
null_mod_test_rel <- null_mod_test/sum(null_mod_test)
plot(1:length(unique(PopPUNK_clusters$Cluster)),binom_conf_data[,1], ylim = c(0,0.25),main="Binomial 66% conf. intervals on data vs model", xaxt = "n", xlab = "Clusters", ylab = "Frequency")
arrows(1:length(unique(PopPUNK_clusters$Cluster)),binom_conf_data[,2], 1:length(unique(PopPUNK_clusters$Cluster)), binom_conf_data[,3], angle=90, code=3, length=0.06, col="black")
points(null_mod_test_rel,col="red")
plot(1:length(unique(PopPUNK_clusters$Cluster)),binom_conf_data[,1], ylim = c(0,0.25),main="Binomial 66% conf. intervals on data vs model", xaxt = "n", xlab = "Clusters", ylab = "Frequency")
arrows(1:length(unique(PopPUNK_clusters$Cluster)),binom_conf_data[,2], 1:length(unique(PopPUNK_clusters$Cluster)), binom_conf_data[,3], angle=90, code=3, length=0.06, col="black")
points(mean_Mass_ParamSamples,col="red")
arrows(1:length(unique(PopPUNK_clusters$Cluster)),quantile_Mass_ParamSamples_low, 1:length(unique(PopPUNK_clusters$Cluster)),quantile_Mass_ParamSamples_up, angle=90, code=3, length=0.06, col="red")
points(null_mod_test_rel,col="blue")
