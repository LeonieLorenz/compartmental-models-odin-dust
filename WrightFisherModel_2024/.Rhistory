}
}
else{
if(mmseq_results_FindUKInMass$V3[i]>0){
match_count <- match_count + 1
}
}
}
match_count
no_match_count
which(mmseq_results_FindUKInMass$V3 >=0.95)
length(which(mmseq_results_FindUKInMass$V3 >=0.95))
length(which(mmseq_results_FindUKInMass$V3 >=0.9))
484/1418
970/1418
head(ggC_gene_freq_2001)
head(ggC_gene_freq_2001[which(ggC_filter==1)])
saveRDS(ggC_intermed_gene_freqs, file = "Mass_ggC_intermed_gene_freqs.rds")
ggC_intermed_gene_freqs <- ggC_gene_freq_2001[which(ggC_filter==1)]
saveRDS(ggC_intermed_gene_freqs, file = "Mass_ggC_intermed_gene_freqs.rds")
head(ggC_intermed_gene_freqs)
Mass_ggC_intermed_gene_freqs <- readRDS("Mass_ggC_intermed_gene_freqs.rds")
head(Mass_ggC_intermed_gene_freqs)
names(Mass_ggC_intermed_gene_freqs) <- Mass_ggC_intermed_gene_names
head(Mass_ggC_intermed_gene_freqs)
UK_ggC_intermed_gene_freqs <- UK_gene_freq_preVac[which(UK_gene_filter==1)]
UK_ggCallerPP_bool <- readRDS("UK_ggCaller_bool.rds")
UK_ggCaller_byYear <- vector(mode = "list", length = length(UK_time_points))
UK_time_points <- sort(unique(UK_SeqYear_dict))
### Reading in the Accession Codes, Population and the Sequence Clusters
UK_metadata <- read.csv("~/Documents/PhD_Project/Data/StrepPneumo_UK/metadata.csv")
UK_ids <- UK_metadata$id
UK_ids_dict <- 1:length(UK_ids)
names(UK_ids_dict) <- UK_ids
UK_id_acc_dict <- UK_ids
names(UK_id_acc_dict) <- UK_metadata$Accession
split_winter <- function(winter){
strsplit(winter,"\\/")[[1]][1]
}
UK_SeqYear_dict <- sapply(UK_metadata$Winter, split_winter)
#names(UK_SeqYear_dict) <- UK_ids
names(UK_SeqYear_dict) <- UK_metadata$Accession
UK_meta_IDtoInd <- 1:nrow(UK_metadata)
names(UK_meta_IDtoInd) <- UK_metadata$Accession
UK_time_points <- sort(unique(UK_SeqYear_dict))
UK_winters <- sort(unique(UK_metadata$Winter))
UK_ggCaller_byYear <- vector(mode = "list", length = length(UK_time_points))
for (i in 1:length(UK_time_points)) {
UK_ggCaller_year <- data.frame(matrix(0, nrow = nrow(UK_ggCallerPP_bool), ncol = length(which(UK_metadata$Winter==UK_winters[i]))+1)) # initialize data frame
UK_ggCaller_year[1,-1] <- UK_ggCallerPP_bool[1,c(FALSE,UK_SeqYear_dict[unlist(UK_ggCallerPP_bool[1,-1])]==UK_time_points[i])] # fill in first row (seq names)
UK_ggCaller_year[-1,1] <- UK_ggCallerPP_bool[-1,1] # fill in first column (gene cluster names)
UK_ggCaller_year[-1,-1] <- UK_ggCallerPP_bool[-1,c(FALSE,UK_SeqYear_dict[unlist(UK_ggCallerPP_bool[1,-1])]==UK_time_points[i])] # fill in presence absence information
#print(i)
UK_ggCaller_byYear[[i]] <- UK_ggCaller_year
}
sum_as_int <- function(x){
sum(as.integer(x))
}
UK_time_points_preVac <- 1
UK_gene_freq_preVac <- rep(0, nrow(UK_ggCaller_byYear[[1]])-1)
preVac_datapoints <- 0
for (i in 1:length(UK_time_points_preVac)) {
UK_gene_freq_preVac <- UK_gene_freq_preVac + apply(UK_ggCaller_byYear[[i]][-1,-1],1, sum_as_int)
preVac_datapoints <- preVac_datapoints + length(UK_ggCaller_byYear[[i]][1,-1])
}
UK_gene_freq_preVac <- UK_gene_freq_preVac / preVac_datapoints
UK_gene_filter <- as.integer(UK_gene_freq_preVac<=0.95 & UK_gene_freq_preVac>=0.05)
sum(UK_gene_filter)
UK_ggC_intermed_gene_freqs <- UK_gene_freq_preVac[which(UK_gene_filter==1)]
saveRDS(UK_ggC_intermed_gene_freqs, file = "UK_ggC_intermed_gene_freqs.rds")
head(UK_ggC_intermed_gene_freqs)
names(UK_ggC_intermed_gene_freqs) <- UK_ggC_intermed_gene_names
head(UK_ggC_intermed_gene_freqs)
match_dict <- c()
match_count <- 0
no_match_count <- 0
match_dict <- c()
for (i in 1:length(names(UKInMass_dict))){
name <- names(UKInMass_dict)[i]
val <- UKInMass_dict[name]
return_val <- MassInUK_dict[val]
if(name != return_val){
if(mmseq_results_FindUKInMass$V3[i]>0.95){
no_match_count <- no_match_count + 1
}
}
else{
if(mmseq_results_FindUKInMass$V3[i]>0.95){
match_count <- match_count + 1
match_dict[name] <- val
}
}
}
head(match_dict)
plot(UK_ggC_intermed_gene_freqs[names(match_dict)], Mass_ggC_intermed_gene_freqs[match_dict[names(match_dict)]]
)
match_count <- 0
no_match_count <- 0
match_dict <- c()
for (i in 1:length(names(UKInMass_dict))){
name <- names(UKInMass_dict)[i]
val <- UKInMass_dict[name]
return_val <- MassInUK_dict[val]
if(name != return_val){
if(mmseq_results_FindUKInMass$V3[i]>0.9){
no_match_count <- no_match_count + 1
}
}
else{
if(mmseq_results_FindUKInMass$V3[i]>0.9){
match_count <- match_count + 1
match_dict[name] <- val
}
}
}
plot(UK_ggC_intermed_gene_freqs[names(match_dict)], Mass_ggC_intermed_gene_freqs[match_dict[names(match_dict)]])
match_count <- 0
no_match_count <- 0
match_dict <- c()
for (i in 1:length(names(UKInMass_dict))){
name <- names(UKInMass_dict)[i]
val <- UKInMass_dict[name]
return_val <- MassInUK_dict[val]
if(name != return_val){
if(mmseq_results_FindUKInMass$V3[i]>0.99){
no_match_count <- no_match_count + 1
}
}
else{
if(mmseq_results_FindUKInMass$V3[i]>0.99){
match_count <- match_count + 1
match_dict[name] <- val
}
}
}
plot(UK_ggC_intermed_gene_freqs[names(match_dict)], Mass_ggC_intermed_gene_freqs[match_dict[names(match_dict)]])
recip_matching <- function(seq_identity = 0.95){
match_count <- 0
no_match_count <- 0
match_dict <- c()
for (i in 1:length(names(UKInMass_dict))){
name <- names(UKInMass_dict)[i]
val <- UKInMass_dict[name]
return_val <- MassInUK_dict[val]
if(name != return_val){
if(mmseq_results_FindUKInMass$V3[i]>=seq_identity){
no_match_count <- no_match_count + 1
}
}
else{
if(mmseq_results_FindUKInMass$V3[i]>=seq_identity){
match_count <- match_count + 1
match_dict[name] <- val
}
}
}
match_dict
}
match_UKMass_95 <- recip_matching(0.95)
match_UKMass_95
recip_matching <- function(seq_identity = 0.95){
match_count <- 0
no_match_count <- 0
match_dict <- c()
for (i in 1:length(names(UKInMass_dict))){
name <- names(UKInMass_dict)[i]
val <- UKInMass_dict[name]
return_val <- MassInUK_dict[val]
if(name != return_val){
if(mmseq_results_FindUKInMass$V3[i]>=seq_identity){
no_match_count <- no_match_count + 1
}
}
else{
if(mmseq_results_FindUKInMass$V3[i]>=seq_identity){
match_count <- match_count + 1
match_dict[name] <- val
}
}
}
print(paste("recip matches", match_count))
print(paste("non-recip matches", no_match_count))
match_dict
}
match_UKMass_95 <- recip_matching(0.95)
match_UKMass_90 <- recip_matching(0.90)
match_UKMass_99 <- recip_matching(0.99)
plot(UK_ggC_intermed_gene_freqs[names(match_UKMass_90)], Mass_ggC_intermed_gene_freqs[match_UKMass_90[names(match_UKMass_90)]])
plot(UK_ggC_intermed_gene_freqs[names(match_UKMass_95)], Mass_ggC_intermed_gene_freqs[match_UKMass_95[names(match_UKMass_95)]])
plot(UK_ggC_intermed_gene_freqs[names(match_UKMass_99)], Mass_ggC_intermed_gene_freqs[match_UKMass_99[names(match_UKMass_99)]])
match_UKMass_95 <- recip_matching(UKInMass_dict, MassInUK_dict, 0.95)
recip_matching <- function(AinB_dict, BinA_dict, seq_identity = 0.95){
match_count <- 0
no_match_count <- 0
match_dict <- c()
for (i in 1:length(names(AinB_dict))){
name <- names(AinB_dict)[i]
val <- AinB_dict[name]
return_val <- BinA_dict[val]
if(name != return_val){
if(mmseq_results_FindUKInMass$V3[i]>=seq_identity){
no_match_count <- no_match_count + 1
}
}
else{
if(mmseq_results_FindUKInMass$V3[i]>=seq_identity){
match_count <- match_count + 1
match_dict[name] <- val
}
}
}
print(paste("recip matches", match_count))
print(paste("non-recip matches", no_match_count))
match_dict
}
match_UKMass_95 <- recip_matching(UKInMass_dict, MassInUK_dict, 0.95)
UKMass_seq_id_vec <- mmseq_results_FindUKInMass$V3
recip_matching <- function(AinB_dict, BinA_dict, seq_id_vec, seq_identity = 0.95){
match_count <- 0
no_match_count <- 0
match_dict <- c()
for (i in 1:length(names(AinB_dict))){
name <- names(AinB_dict)[i]
val <- AinB_dict[name]
return_val <- BinA_dict[val]
if(name != return_val){
if(seq_id_vec[i]>=seq_identity){
no_match_count <- no_match_count + 1
}
}
else{
if(seq_id_vec[i]>=seq_identity){
match_count <- match_count + 1
match_dict[name] <- val
}
}
}
print(paste("recip matches", match_count))
print(paste("non-recip matches", no_match_count))
match_dict
}
match_UKMass_95 <- recip_matching(UKInMass_dict, MassInUK_dict, UKMass_seq_id_vec, 0.95)
match_UKMass_90 <- recip_matching(UKInMass_dict, MassInUK_dict, UKMass_seq_id_vec, 0.90)
match_UKMass_99 <- recip_matching(UKInMass_dict, MassInUK_dict, UKMass_seq_id_vec, 0.99)
plot(UK_ggC_intermed_gene_freqs[names(match_UKMass_90)], Mass_ggC_intermed_gene_freqs[match_UKMass_90[names(match_UKMass_90)]])
plot(UK_ggC_intermed_gene_freqs[names(match_UKMass_95)], Mass_ggC_intermed_gene_freqs[match_UKMass_95[names(match_UKMass_95)]])
plot(UK_ggC_intermed_gene_freqs[names(match_UKMass_99)], Mass_ggC_intermed_gene_freqs[match_UKMass_99[names(match_UKMass_99)]])
# same with unfiltered matches
mmseq_results_FindUKInMass_unfiltered <- read.delim("~/Documents/PhD_Project/Data/Mapping_ggCaller/MMseqs2_results/FindAllUKinAllMass/bestResultUKinMass.m8", header=FALSE)
mmseq_results_FindMassInUK_unfiltered <- read.delim("~/Documents/PhD_Project/Data/Mapping_ggCaller/MMseqs2_results/FindAllMassInAllUK/bestResultMassInUK.m8", header=FALSE)
UKInMassUnfiltered_dict <- mmseq_results_FindUKInMass_unfiltered$V2
names(UKInMassUnfiltered_dict) <- mmseq_results_FindUKInMass_unfiltered$V1
MassInUKUnfiltered_dict <- mmseq_results_FindMassInUK_unfiltered$V2
names(MassInUKUnfiltered_dict) <- mmseq_results_FindMassInUK_unfiltered$V1
UKMassUnfiltered_seq_id_vec <- mmseq_results_FindUKInMass_unfiltered$V3
ggC_intermed_gene_freqs <- ggC_gene_freq_2001
saveRDS(ggC_all_gene_freqs, file = "Mass_ggC_all_gene_freqs.rds")
head(ggC_intermed_gene_freqs)
ggC_intermed_gene_freqs <- ggC_gene_freq_2001
saveRDS(ggC_all_gene_freqs, file = "Mass_ggC_all_gene_freqs.rds")
ggC_all_gene_freqs <- ggC_gene_freq_2001
saveRDS(ggC_all_gene_freqs, file = "Mass_ggC_all_gene_freqs.rds")
ggC_intermed_gene_freqs <- ggC_gene_freq_2001[which(ggC_filter==1)]
saveRDS(ggC_intermed_gene_freqs, file = "Mass_ggC_intermed_gene_freqs.rds")
ggC_all_gene_names <- ggCaller_gene_presence_absence_2001[,1]
saveRDS(ggC_all_gene_names, file = "Mass_ggC_all_gene_names.rds")
head(UK_ggCaller_byYear[[1]][-1,1])
head(UK_ggCaller_byYear[[1]][1,1])
head(UK_ggCaller_byYear[[1]][,1])
View(UK_ggCaller_byYear[[1]])
UK_ggC_all_gene_freqs <- UK_gene_freq_preVac
saveRDS(UK_ggC_all_gene_freqs, file = "UK_ggC_all_gene_freqs.rds")
UK_ggC_all_gene_names <- UK_ggCaller_byYear[[1]][-1,1]
UK_ggC_all_gene_names <- UK_ggCaller_byYear[[1]][-1,1]
saveRDS(UK_ggC_all_gene_names, file = "UK_ggC_all_gene_names.rds")
Mass_ggC_all_gene_freqs_dict <- readRDS("Mass_ggC_all_gene_freqs.rds")
names(Mass_ggC_all_gene_freqs_dict) <- readRDS("Mass_ggC_all_gene_names.rds")
UK_ggC_all_gene_freqs_dict <- readRDS("UK_ggC_all_gene_freqs.rds")
names(UK_ggC_all_gene_freqs_dict) <- readRDS("UK_ggC_all_gene_freqs.rds")
ggC_all_gene_names <- ggCaller_gene_presence_absence_2001[-1,1]
saveRDS(ggC_all_gene_names, file = "Mass_ggC_all_gene_names.rds")
Mass_ggC_all_gene_freqs_dict <- readRDS("Mass_ggC_all_gene_freqs.rds")
names(Mass_ggC_all_gene_freqs_dict) <- readRDS("Mass_ggC_all_gene_names.rds")
match_UKMassUnfiltered_95 <- recip_matching(UKInMassUnfiltered_dict, MassInUKUnfiltered_dict, UKMassUnfiltered_seq_id_vec, 0.95)
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_95)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_95[names(match_UKMassUnfiltered_95)]])
head(match_UKMassUnfiltered_95)
head(Mass_ggC_all_gene_freqs_dict)
head(UK_ggC_all_gene_freqs_dict)
head(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_95)])
UKMassUnfiltered_seq_id_vec <- mmseq_results_FindUKInMass_unfiltered$V3
match_UKMassUnfiltered_95 <- recip_matching(UKInMassUnfiltered_dict, MassInUKUnfiltered_dict, UKMassUnfiltered_seq_id_vec, 0.95)
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_95)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_95[names(match_UKMassUnfiltered_95)]])
head(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_95)])
UK_ggC_all_gene_freqs_dict <- readRDS("UK_ggC_all_gene_freqs.rds")
names(UK_ggC_all_gene_freqs_dict) <- readRDS("UK_ggC_all_gene_freqs.rds")
head(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_95)])
head(UK_ggC_all_gene_freqs_dict)
UK_ggC_all_gene_freqs_dict <- readRDS("UK_ggC_all_gene_freqs.rds")
names(UK_ggC_all_gene_freqs_dict) <- readRDS("UK_ggC_all_gene_names.rds")
match_UKMassUnfiltered_95 <- recip_matching(UKInMassUnfiltered_dict, MassInUKUnfiltered_dict, UKMassUnfiltered_seq_id_vec, 0.95)
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_95)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_95[names(match_UKMassUnfiltered_95)]])
match_UKMassUnfiltered_90 <- recip_matching(UKInMassUnfiltered_dict, MassInUKUnfiltered_dict, UKMassUnfiltered_seq_id_vec, 0.90)
match_UKMassUnfiltered_95 <- recip_matching(UKInMassUnfiltered_dict, MassInUKUnfiltered_dict, UKMassUnfiltered_seq_id_vec, 0.95)
match_UKMassUnfiltered_99 <- recip_matching(UKInMassUnfiltered_dict, MassInUKUnfiltered_dict, UKMassUnfiltered_seq_id_vec, 0.99)
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_90)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_90[names(match_UKMassUnfiltered_90)]])
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_95)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_95[names(match_UKMassUnfiltered_95)]])
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_99)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_99[names(match_UKMassUnfiltered_99)]])
length(mmseq_results_FindUKInMass_unfiltered)
length(mmseq_results_FindUKInMass_unfiltered$V2)
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_90)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_90[names(match_UKMassUnfiltered_90)]])
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_95)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_95[names(match_UKMassUnfiltered_95)]])
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_99)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_99[names(match_UKMassUnfiltered_99)]])
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_90)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_90[names(match_UKMassUnfiltered_90)]])
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_99)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_99[names(match_UKMassUnfiltered_99)]])
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_99)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_99[names(match_UKMassUnfiltered_99)]])
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_95)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_95[names(match_UKMassUnfiltered_95)]])
plot(UK_ggC_intermed_gene_freqs[names(match_UKMass_90)], Mass_ggC_intermed_gene_freqs[match_UKMass_90[names(match_UKMass_90)]])
plot(UK_ggC_intermed_gene_freqs[names(match_UKMass_95)], Mass_ggC_intermed_gene_freqs[match_UKMass_95[names(match_UKMass_95)]])
plot(UK_ggC_intermed_gene_freqs[names(match_UKMass_99)], Mass_ggC_intermed_gene_freqs[match_UKMass_99[names(match_UKMass_99)]])
#this one does not exist yet:
# 5-parameter model
UK_5param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_12_11/ModelComparison_UK/UK_PPxSero_ggCaller_PopPUNK_5param_det_pmcmc_run2.rds")
UK_5param_mcmc2_probs <- coda::as.mcmc(cbind(UK_5param_mcmc2$probabilities, UK_5param_mcmc2$pars))
#coda::effectiveSize(UK_5param_mcmc2_probs)
#summary(coda::as.mcmc(UK_5param_mcmc2_probs))
UK_likelihood_5param <- median(UK_5param_mcmc2_probs[,"log_likelihood"])
#mean(UK_5param_mcmc2_probs[,"log_likelihood"])
param_mean <- apply(UK_5param_mcmc2_probs, 2, mean)
percentile95_low <- apply(UK_5param_mcmc2_probs,2,quantile,.025)
percentile95_up <- apply(UK_5param_mcmc2_probs,2,quantile,.975)
param_mean
percentile95_low
percentile95_up
#     log_prior log_likelihood  log_posterior        sigma_f         prop_f        sigma_w              m              v
#    0.00000000  -565.12227695  -565.12227695    -4.04693826     0.31370789  -484.23214193    -4.11417055     0.09340846
#    0.00000000  -569.20950094  -569.20950094    -4.51206733     0.11112096  -971.53041773    -4.42753182     0.07971375
#     0.0000000   -560.7370031   -560.7370031     -2.7685434      0.3894192    -41.8319850     -3.7885388      0.1080344
rm(UK_5param_mcmc2)
# 4-parameter model
UK_4param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_12_05/ModelComparison_UK/UK_PPxSero_ggCaller_PopPUNK_4param_det_pmcmc_run2.rds")
UK_4param_mcmc2_probs <- coda::as.mcmc(cbind(UK_4param_mcmc2$probabilities, UK_4param_mcmc2$pars))
#mean(UK_4param_mcmc2_probs[,"log_likelihood"])
param_mean <- apply(UK_4param_mcmc2_probs, 2, mean)
param_mean
#     log_prior log_likelihood  log_posterior        sigma_f         prop_f              m              v
#     0.0000000   -562.2620742   -562.2620742     -3.1745767      0.1432364     -3.9757905      0.0910330
#    0.00000000  -566.34600127  -566.34600127    -3.62415671     0.10767921    -4.26552560     0.07626173
#     0.0000000   -560.4980507   -560.4980507     -2.5274892      0.1524845     -3.6791013      0.1069834
rm(UK_4param_mcmc2)
# 3-parameter model
UK_3param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_12_05/ModelComparison_UK/UK_PPxSero_ggCaller_PopPUNK_3param_det_pmcmc_run2.rds")
# 3-parameter model
UK_3param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_12_05/ModelComparison_UK/UK_PPxSero_ggCaller_PopPUNK_3param_det_pmcmc_run2.rds")
UK_3param_mcmc2_probs <- coda::as.mcmc(cbind(UK_3param_mcmc2$probabilities, UK_3param_mcmc2$pars))
UK_3param_mcmc2_probs <- coda::as.mcmc(cbind(UK_3param_mcmc2$probabilities, UK_3param_mcmc2$pars))
#mean(UK_3param_mcmc2_probs[,"log_likelihood"])
param_mean <- apply(UK_3param_mcmc2_probs, 2, mean)
param_mean
apply(UK_3param_mcmc2_probs, 2, median)
#     log_prior log_likelihood  log_posterior        sigma_f              m              v
#    0.00000000  -643.07829722  -643.07829722   -40.87901034    -4.45696522     0.05151384
#    0.00000000  -652.65879091  -652.65879091  -307.70593047    -4.75223182     0.02277319
#     0.0000000   -640.2573559   -640.2573559     -4.2676913     -2.4375028      0.6825091
rm(UK_3param_mcmc2)
# Null model
UK_2param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_12_05/ModelComparison_UK/UK_PPxSero_ggCaller_PopPUNK_Null_det_pmcmc_run2.rds")
UK_2param_mcmc2_probs <- coda::as.mcmc(cbind(UK_2param_mcmc2$probabilities, UK_2param_mcmc2$pars))
#mean(UK_2param_mcmc2_probs[,"log_likelihood"])
param_mean <- apply(UK_2param_mcmc2_probs, 2, mean)
param_mean
#     log_prior log_likelihood  log_posterior              m              v
#    0.00000000  -641.16360797  -641.16360797    -4.36138821     0.02805271
#    0.00000000  -643.95162152  -643.95162152    -4.56306240     0.02164408
#    0.00000000  -640.17013460  -640.17013460    -4.16166788     0.03482034
rm(UK_2param_mcmc2)
# Null model
Mass_2param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_12_05/ModelComparison_Mass/PPxSero_ggCaller_PopPUNK_Null_det_pmcmc_run2.rds")
Mass_2param_mcmc2_probs <- coda::as.mcmc(cbind(Mass_2param_mcmc2$probabilities, Mass_2param_mcmc2$pars))
#-4.54, 0.04
param_mean <- apply(Mass_2param_mcmc2_probs, 2, mean)
param_mean
#     log_prior log_likelihood  log_posterior              m              v
#    0.00000000  -283.03864760  -283.03864760    -4.55741935     0.03749215
#    0.00000000  -285.77115406  -285.77115406    -4.78545282     0.02894042
#    0.00000000  -282.05070637  -282.05070637    -4.33260021     0.04784521
rm(Mass_2param_mcmc2)
rm(Mass_2param_mcmc2_probs)
# 3-parameter model
Mass_3param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_12_05/ModelComparison_Mass/PPxSero_ggCaller_PopPUNK_3param_det_pmcmc_run2.rds")
Mass_3param_mcmc2_probs <- coda::as.mcmc(cbind(Mass_3param_mcmc2$probabilities, Mass_3param_mcmc2$pars))
# -6.49, -4.50, 0.05
param_mean <- apply(Mass_3param_mcmc2_probs, 2, mean)
param_mean
#     log_prior log_likelihood  log_posterior        sigma_f              m              v
#    0.00000000  -278.16020683  -278.16020683    -6.74752111    -4.51538531     0.05239445
#    0.00000000  -282.04398459  -282.04398459    -8.28515193    -4.78809296     0.03730393
#    0.00000000  -276.63008552  -276.63008552    -5.92139441    -4.24192984     0.06905461
rm(Mass_3param_mcmc2)
rm(Mass_3param_mcmc2_probs)
# 4-parameter model
Mass_4param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_12_05/ModelComparison_Mass/PPxSero_ggCaller_PopPUNK_4param_det_pmcmc_run2.rds")
Mass_4param_mcmc2_probs <- coda::as.mcmc(cbind(Mass_4param_mcmc2$probabilities, Mass_4param_mcmc2$pars))
# -3.27, 0.24, -4.36, 0.08
param_mean <- apply(Mass_4param_mcmc2_probs, 2, mean)
param_mean
#     log_prior log_likelihood  log_posterior        sigma_f         prop_f              m              v
#    0.00000000  -236.18187830  -236.18187830    -3.29342091     0.27971311    -4.31740603     0.08169713
#    0.00000000  -240.56908318  -240.56908318    -4.18698747     0.11780847    -4.80025991     0.06278332
#     0.0000000   -233.6428808   -233.6428808     -2.1707973      0.4555952     -3.8273690      0.1059178
rm(Mass_4param_mcmc2)
rm(Mass_4param_mcmc2_probs)
# 5-parameter model
Mass_5param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_12_05/ModelComparison_Mass/PPxSero_ggCaller_PopPUNK_5param_det_pmcmc_run2.rds")
Mass_5param_mcmc2_probs <- coda::as.mcmc(cbind(Mass_5param_mcmc2$probabilities, Mass_5param_mcmc2$pars))
# -3.07, 0.25, -308.77, -4.27, 0.08
param_mean <- apply(Mass_5param_mcmc2_probs, 2, mean)
param_mean
#      log_prior log_likelihood  log_posterior        sigma_f         prop_f        sigma_w              m              v
#     0.0000000   -235.8505446   -235.8505446     -3.1303171      0.2529448   -478.3519069     -4.2950099      0.0831402
#     0.0000000   -239.8943341   -239.8943341     -3.4820120      0.1705453   -970.0844042     -4.7681127      0.0648898
#     0.0000000   -233.6029196   -233.6029196     -2.5691558      0.3820193    -31.7122708     -3.7922820      0.1061980
rm(Mass_5param_mcmc2)
rm(Mass_5param_mcmc2_probs)
# Null model
Navajo_2param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_12_05/ModelComparison_Navajo/Navajo_PPxSero2vacc_ggCaller_PopPUNK_Null_det_pmcmc_run2.rds")
Navajo_2param_mcmc2_probs <- coda::as.mcmc(cbind(Navajo_2param_mcmc2$probabilities, Navajo_2param_mcmc2$pars))
#mean(Navajo_2param_mcmc2_probs[,"log_likelihood"])
param_mean <- apply(Navajo_2param_mcmc2_probs, 2, mean)
param_mean
#     log_prior log_likelihood  log_posterior              m              v
#     0.0000000   -878.3942538   -878.3942538     -3.6796603      0.1242759
#    0.00000000  -881.36090195  -881.36090195    -3.99475933     0.06562337
#     0.0000000   -877.3314368   -877.3314368     -3.2919001      0.2179553
rm(Navajo_2param_mcmc2)
# 3-parameter model
Navajo_3param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_12_05/ModelComparison_Navajo/Navajo_PPxSero2vacc_ggCaller_PopPUNK_3param_det_pmcmc_run2.rds")
Navajo_3param_mcmc2_probs <- coda::as.mcmc(cbind(Navajo_3param_mcmc2$probabilities, Navajo_3param_mcmc2$pars))
#mean(Navajo_3param_mcmc2_probs[,"log_likelihood"])
param_mean <- apply(Navajo_3param_mcmc2_probs, 2, mean)
param_mean
#     log_prior log_likelihood  log_posterior        sigma_f              m              v
#     0.0000000   -775.6613259   -775.6613259     -4.5054937     -2.8647564      0.2628066
#     0.0000000   -779.0923917   -779.0923917     -5.0989938     -3.3458219      0.1111547
#     0.0000000   -774.0645465   -774.0645465     -3.8534879     -2.2976970      0.5704883
rm(Navajo_3param_mcmc2)
# 4-parameter model
Navajo_4param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_12_05/ModelComparison_Navajo/Navajo_PPxSero2vacc_ggCaller_PopPUNK_4param_det_pmcmc_run2.rds")
Navajo_4param_mcmc2_probs <- coda::as.mcmc(cbind(Navajo_4param_mcmc2$probabilities, Navajo_4param_mcmc2$pars))
#mean(Navajo_4param_mcmc2_probs[,"log_likelihood"])
param_mean <- apply(Navajo_4param_mcmc2_probs, 2, mean)
param_mean
#     log_prior log_likelihood  log_posterior        sigma_f         prop_f              m              v
#     0.0000000   -775.4195261   -775.4195261     -4.3750991      0.9006583     -2.8662851      0.2635598
#     0.0000000   -779.1645089   -779.1645089     -5.0194125      0.7804437     -3.3327171      0.1113736
#     0.0000000   -773.3687772   -773.3687772     -3.6963467      0.9960815     -2.3210855      0.5919767
rm(Navajo_4param_mcmc2)
#this one does not exist yet:
# 5-parameter model
Navajo_5param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_12_11/ModelComparison_Navajo/Navajo_PPxSero2vacc_ggCaller_PopPUNK_5param_det_pmcmc_run2.rds")
Navajo_5param_mcmc2_probs <- coda::as.mcmc(cbind(Navajo_5param_mcmc2$probabilities, Navajo_5param_mcmc2$pars))
#coda::effectiveSize(Navajo_5param_mcmc2_probs)
#summary(coda::as.mcmc(Navajo_5param_mcmc2_probs))
Navajo_likelihood_5param <- median(Navajo_5param_mcmc2_probs[,"log_likelihood"])
#mean(Navajo_5param_mcmc2_probs[,"log_likelihood"])
param_mean <- apply(Navajo_5param_mcmc2_probs, 2, mean)
percentile95_low <- apply(Navajo_5param_mcmc2_probs,2,quantile,.025)
percentile95_up <- apply(Navajo_5param_mcmc2_probs,2,quantile,.975)
param_mean
percentile95_low
percentile95_up
#     log_prior log_likelihood  log_posterior        sigma_f         prop_f        sigma_w              m              v
#     0.0000000   -775.7187082   -775.7187082     -4.5390431      0.8471789   -433.9222723     -2.8335532      0.2792345
#     0.0000000   -779.8975459   -779.8975459     -6.2594906      0.2446372   -972.2649520     -3.3022625      0.1162148
#     0.0000000   -773.3938106   -773.3938106     -3.6396775      0.9935490     -4.2750278     -2.1766673      0.6036182
rm(Navajo_5param_mcmc2)
match_UKMassUnfiltered_99 <- recip_matching(UKInMassUnfiltered_dict, MassInUKUnfiltered_dict, UKMassUnfiltered_seq_id_vec, 0.99)
match_UKMassUnfiltered_95 <- recip_matching(UKInMassUnfiltered_dict, MassInUKUnfiltered_dict, UKMassUnfiltered_seq_id_vec, 0.95)
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_90)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_90[names(match_UKMassUnfiltered_90)]])
par(pty="s")
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_90)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_90[names(match_UKMassUnfiltered_90)]])
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_90)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_90[names(match_UKMassUnfiltered_90)]], xlab = "UK gene frequencies")
lm(Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_90[names(match_UKMassUnfiltered_90)]] ~ UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_90)])
lin_mod <- lm(Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_90[names(match_UKMassUnfiltered_90)]] ~ UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_90)])
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_90)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_90[names(match_UKMassUnfiltered_90)]], xlab = "UK gene frequencies", ylab = "Mass gene frequencies")
abline(lin_mod)
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_90)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_90[names(match_UKMassUnfiltered_90)]], xlab = "UK gene frequencies", ylab = "Mass gene frequencies")
abline(0,1)
par(pty="s")
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_90)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_90[names(match_UKMassUnfiltered_90)]], xlab = "UK gene frequencies", ylab = "Mass gene frequencies")
abline(0,1)
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_95)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_95[names(match_UKMassUnfiltered_95)]], xlab = "UK gene frequencies", ylab = "Mass gene frequencies")
abline(0,1)
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_90)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_90[names(match_UKMassUnfiltered_90)]], xlab = "UK gene frequencies", ylab = "Mass gene frequencies",main="All Gene Frequencies, 90% sequence identity")
abline(0,1)
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_95)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_95[names(match_UKMassUnfiltered_95)]], xlab = "UK gene frequencies", ylab = "Mass gene frequencies",main="All Gene Frequencies, 95% sequence identity")
abline(0,1)
plot(UK_ggC_all_gene_freqs_dict[names(match_UKMassUnfiltered_99)], Mass_ggC_all_gene_freqs_dict[match_UKMassUnfiltered_99[names(match_UKMassUnfiltered_99)]], xlab = "UK gene frequencies", ylab = "Mass gene frequencies",main="All Gene Frequencies, 99% sequence identity")
abline(0,1)
match_UKMassUnfiltered_90 <- recip_matching(UKInMassUnfiltered_dict, MassInUKUnfiltered_dict, UKMassUnfiltered_seq_id_vec, 0.90)
match_UKMassUnfiltered_95 <- recip_matching(UKInMassUnfiltered_dict, MassInUKUnfiltered_dict, UKMassUnfiltered_seq_id_vec, 0.95)
match_UKMassUnfiltered_99 <- recip_matching(UKInMassUnfiltered_dict, MassInUKUnfiltered_dict, UKMassUnfiltered_seq_id_vec, 0.99)
plot(UK_ggC_intermed_gene_freqs[names(match_UKMass_90)], Mass_ggC_intermed_gene_freqs[match_UKMass_90[names(match_UKMass_90)]], xlab = "UK gene frequencies", ylab = "Mass gene frequencies",main="Intermed. Gene Frequencies, 90% sequence identity")
abline(0,1)
plot(UK_ggC_intermed_gene_freqs[names(match_UKMass_95)], Mass_ggC_intermed_gene_freqs[match_UKMass_95[names(match_UKMass_95)]], xlab = "UK gene frequencies", ylab = "Mass gene frequencies",main="Intermed. Gene Frequencies, 95% sequence identity")
abline(0,1)
plot(UK_ggC_intermed_gene_freqs[names(match_UKMass_99)], Mass_ggC_intermed_gene_freqs[match_UKMass_99[names(match_UKMass_99)]], xlab = "UK gene frequencies", ylab = "Mass gene frequencies",main="Intermed. Gene Frequencies, 99% sequence identity")
abline(0,1)
match_UKMass_95 <- recip_matching(UKInMass_dict, MassInUK_dict, UKMass_seq_id_vec, 0.95)
match_UKMass_90 <- recip_matching(UKInMass_dict, MassInUK_dict, UKMass_seq_id_vec, 0.90)
match_UKMass_99 <- recip_matching(UKInMass_dict, MassInUK_dict, UKMass_seq_id_vec, 0.99)
exp(-478)
exp(-3)
