PCV13_VTs[c("1", "3", "4","5","6A","6B", "7F", "9V", "14", "18C", "19A", "19F", "23F")] <- "VT"
PCV7_VTs <- rep("NVT",length(unique(Navajo_meta_data$Sero)))
names(PCV7_VTs) <- unique(Navajo_meta_data$Sero)
PCV7_VTs[c("4","6B", "9V", "14", "18C", "19F", "23F")] <- "VT"
Navajo_PP$VT_PCV13 <- PCV13_VTs[Navajo_Serotype_dict[Navajo_PP$Taxon]]
# Add sequencing year info
Navajo_Year_dict <- Navajo_meta_data$Year
names(Navajo_Year_dict) <- Navajo_meta_data$Accession
Navajo_PP$SeqYear <- Navajo_Year_dict[Navajo_PP$Taxon]
saveRDS(Navajo_PP,"Navajo_PP.rds")
seq_clusters <- readRDS("Navajo_PP.rds")
intermed_gene_presence_absence_consensus <- readRDS(file = "Navajo_ggCaller_intermed_consensus.rds")
intermed_gene_presence_absence_consensus_matrix <- sapply(intermed_gene_presence_absence_consensus[-1,-1],as.double)
model_start_pop <- readRDS(file = "Navajo_model_start_pop.rds")
delta_ranking <- readRDS(file = "Navajo_delta_ranking.rds")
mass_cluster_freq_1 <- readRDS(file = "Navajo_cluster_freqs_1.rds")
mass_cluster_freq_2 <- readRDS(file = "Navajo_cluster_freqs_2.rds")
mass_cluster_freq_3 <- readRDS(file = "Navajo_cluster_freqs_3.rds")
mass_cluster_freq_4 <- readRDS(file = "Navajo_cluster_freqs_4.rds")
mass_cluster_freq_5 <- readRDS(file = "Navajo_cluster_freqs_5.rds")
mass_cluster_freq_6 <- readRDS(file = "Navajo_cluster_freqs_6.rds")
mass_cluster_freq_7 <- readRDS(file = "Navajo_cluster_freqs_7.rds")
mass_cluster_freq_8 <- readRDS(file = "Navajo_cluster_freqs_8.rds")
mass_cluster_freq_9 <- readRDS(file = "Navajo_cluster_freqs_9.rds")
mass_cluster_freq_10 <- readRDS(file = "Navajo_cluster_freqs_10.rds")
mass_cluster_freq_11 <- readRDS(file = "Navajo_cluster_freqs_11.rds")
mass_cluster_freq_12 <- readRDS(file = "Navajo_cluster_freqs_12.rds")
mass_cluster_freq_13 <- readRDS(file = "Navajo_cluster_freqs_13.rds")
mass_cluster_freq_14 <- readRDS(file = "Navajo_cluster_freqs_14.rds")
mass_cluster_freq_15 <- readRDS(file = "Navajo_cluster_freqs_15.rds")
mass_VT <- readRDS(file = "Navajo_VT.rds")
mass_clusters <- length(unique(seq_clusters$Cluster))
avg_cluster_freq <- rep(1/mass_clusters, mass_clusters)
output_filename <- "Navajo_VT_ggCaller_PopPUNK"
dt <- 1/12
peripost_mass_cluster_freq <- data.frame("year" = 1:14, rbind(mass_cluster_freq_2,mass_cluster_freq_3,mass_cluster_freq_4,mass_cluster_freq_5,mass_cluster_freq_6, mass_cluster_freq_7, mass_cluster_freq_8, mass_cluster_freq_9,mass_cluster_freq_10, mass_cluster_freq_11, mass_cluster_freq_12, mass_cluster_freq_13,mass_cluster_freq_14,mass_cluster_freq_15))
names(peripost_mass_cluster_freq) <- c("year", as.character(1:mass_clusters))
vacc_time1 <- 2 # trying vacc time =2 instead of 5 as before
vacc_time2 <- 12
ceil_mass_NVT1 <- rep(0, mass_clusters)
for (i in 1:mass_clusters){
ceil_mass_NVT1[i] <- ceiling(mean(as.integer(seq_clusters[seq_clusters$Cluster == unique(seq_clusters$Cluster)[i],"VT"]=="NVT")))
}
ceil_mass_NVT1
seq_clusters[seq_clusters$Cluster == unique(seq_clusters$Cluster)[1],"VT"]=="NVT"
ceil_mass_NVT2 <- rep(0, mass_clusters)
for (i in 1:mass_clusters){
ceil_mass_NVT2[i] <- ceiling(mean(as.integer(seq_clusters[seq_clusters$Cluster == unique(seq_clusters$Cluster)[i],"VT_PCV13"]=="NVT")))
}
ceil_mass_NVT2
#ceil_mass_NVT[is.nan(ceil_mass_NVT)] <- 0
mean_mass_VT_start <- rep(0, mass_clusters)
for (i in 1:mass_clusters){
mean_mass_VT_start[i] <- (mean(as.integer(seq_clusters[seq_clusters$SeqYear == 1999 & seq_clusters$Cluster == unique(seq_clusters$Cluster)[i],"VT"]=="VT")))
}
mean_mass_VT_start[is.nan(mean_mass_VT_start)] <- 0
NVT_mig <- rep(1/mass_clusters, mass_clusters) * (ceil_mass_NVT)
VT_mig <- rep(1/mass_clusters, mass_clusters) * (1-ceil_mass_NVT)
NVT_mig <- rep(1/mass_clusters, mass_clusters) * (ceil_mass_NVT2)
VT_mig <- rep(1/mass_clusters, mass_clusters) * (1-ceil_mass_NVT1)
avg_cluster_freq <- data.frame(as.matrix(cbind(NVT_mig,VT_mig)))
avg_cluster_freq
VT2_mig <- rep(1/mass_clusters, mass_clusters) * (1-ceil_mass_NVT2)
avg_cluster_freq <- data.frame(as.matrix(cbind(NVT_mig,VT_mig)))
avg_cluster_freq
avg_cluster_freq <- data.frame(as.matrix(cbind(NVT_mig,VT_mig,VT2_mig)))
avg_cluster_freq
ceil_mass_NVT1
length(ceil_mass_NVT1)
seq_clusters[seq_clusters$Cluster == unique(seq_clusters$Cluster)[72],"VT"]=="NVT"
seq_clusters[seq_clusters$Cluster == unique(seq_clusters$Cluster)[71],"VT"]=="NVT"
seq_clusters[seq_clusters$Cluster == unique(seq_clusters$Cluster)[25],"VT"]=="NVT"
ceiling(mean(as.integer(seq_clusters[seq_clusters$Cluster == unique(seq_clusters$Cluster)[25],"VT"]=="NVT")))
ceiling(mean(as.integer(seq_clusters[seq_clusters$Cluster == unique(seq_clusters$Cluster)[24],"VT"]=="NVT")))
(seq_clusters[seq_clusters$Cluster == unique(seq_clusters$Cluster)[24],"VT"]=="NVT"
)
(seq_clusters[seq_clusters$Cluster == unique(seq_clusters$Cluster)[2],"VT"]=="NVT")
NVT_mig <- rep(1/mass_clusters, mass_clusters) * (ceil_mass_NVT2)
VT_mig <- rep(1/mass_clusters, mass_clusters) * (1-ceil_mass_NVT1) * (ceil_mass_NVT2)
VT2_mig <- rep(1/mass_clusters, mass_clusters) * (1-ceil_mass_NVT2)
avg_cluster_freq <- data.frame(as.matrix(cbind(NVT_mig,VT_mig,VT2_mig)))
avg_cluster_freq
ceil_mass_NVT2
ceil_mass_NVT1
NVT_mig <- rep(1/mass_clusters, mass_clusters) * (ceil_mass_NVT2)
VT_mig <- rep(1/mass_clusters, mass_clusters) * (1-ceil_mass_NVT1) * (1-ceil_mass_NVT2)
VT2_mig <- rep(1/mass_clusters, mass_clusters) * (1-ceil_mass_NVT2)
avg_cluster_freq <- data.frame(as.matrix(cbind(NVT_mig,VT_mig,VT2_mig)))
avg_cluster_freq
ceil_mass_NVT1
ceil_mass_NVT2
NVT_mig <- rep(1/mass_clusters, mass_clusters) * (ceil_mass_NVT2)
VT_mig <- rep(1/mass_clusters, mass_clusters) * (1-ceil_mass_NVT1)
VT2_mig <- rep(1/mass_clusters, mass_clusters) * (1-ceil_mass_NVT2) * ceil_mass_NVT1
avg_cluster_freq <- data.frame(as.matrix(cbind(NVT_mig,VT_mig,VT2_mig)))
avg_cluster_freq
rowSums(avg_cluster_freq)
avg_cluster_freq <- data.frame(as.matrix(cbind(NVT_mig,VT_mig,VT2_mig)))
model_start_pop <- matrix(as.double(c(model_start_pop * (1-mean_mass_VT_start),model_start_pop * mean_mass_VT_start)), byrow = FALSE, nrow = mass_clusters, ncol = 2)
fitting_mass_data <- mcstate::particle_filter_data(data = peripost_mass_cluster_freq,
time = "year",
rate = 1 / dt,
initial_time = 0)
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
# Using MCMC to infer parameters
pmcmc_sigma_f <- mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0, max = 1)
#pmcmc_sigma_w <- 0
pmcmc_sigma_w <- -1000
pmcmc_prop_f <- mcstate::pmcmc_parameter("prop_f", 0.2, min = 0, max = 1)
pmcmc_m <- mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1)
pmcmc_v <- mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)
species_no <- mass_clusters
no_clusters <- mass_clusters
gene_no <- nrow(intermed_gene_presence_absence_consensus_matrix)
Pop_ini <- data.frame(model_start_pop)
Pop_eq <- rowSums(model_start_pop)
Genotypes <- intermed_gene_presence_absence_consensus_matrix
capacity <- sum(model_start_pop)
delta <- delta_ranking
vT1 = c(0,1,0)
vT2 = c(0,0,1)
migVec <- data.frame(avg_cluster_freq)
complex_params = list(species_no = species_no, Pop_ini = Pop_ini, Pop_eq = Pop_eq, Genotypes = intermed_gene_presence_absence_consensus[-1,-1], capacity = capacity, delta = delta, vT = vT, gene_no = gene_no, vacc_time = vacc_time, dt = dt, sigma_w = pmcmc_sigma_w, migVec = (migVec))
make_transform <- function(m) {
function(theta) {
as_double_mtx <- function(x){
sapply(x,as.double)
}
c(lapply(m, as_double_mtx), as.list(theta))
}
}
take_list <- function(x){
print(x$Genotype)
}
transform <- function() {
make_transform(complex_params)}
index <- function(info) {
list(run = c(sum_clust = info$index$Pop_tot),
state = c(Pop = info$index$Pop))
}
proposal_matrix <- diag(0.1,4) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
# here, all parameters are proposed independently.
# think about this, this might not actually be true
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(pmcmc_sigma_f, pmcmc_sigma_w, pmcmc_prop_f, pmcmc_m, pmcmc_v), proposal_matrix, transform)
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 01), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars$initial()
#WF$public_methods$has_openmp()
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
index = index,
compare = combined_compare)
n_steps <- 5
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 1)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
complex_params = list(species_no = species_no, Pop_ini = Pop_ini, Pop_eq = Pop_eq, Genotypes = intermed_gene_presence_absence_consensus[-1,-1], capacity = capacity, delta = delta, vT1 = vT1,  vT2 = vT2, gene_no = gene_no, vacc_time1 = vacc_time1, vacc_time2 = vacc_time2, dt = dt, sigma_w = pmcmc_sigma_w, migVec = (migVec))
make_transform <- function(m) {
function(theta) {
as_double_mtx <- function(x){
sapply(x,as.double)
}
c(lapply(m, as_double_mtx), as.list(theta))
}
}
take_list <- function(x){
print(x$Genotype)
}
transform <- function() {
make_transform(complex_params)}
index <- function(info) {
list(run = c(sum_clust = info$index$Pop_tot),
state = c(Pop = info$index$Pop))
}
proposal_matrix <- diag(0.1,4) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
# here, all parameters are proposed independently.
# think about this, this might not actually be true
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(pmcmc_sigma_f, pmcmc_sigma_w, pmcmc_prop_f, pmcmc_m, pmcmc_v), proposal_matrix, transform)
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 01), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars$initial()
#WF$public_methods$has_openmp()
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
index = index,
compare = combined_compare)
n_steps <- 5
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 1)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
# read in model from file
WF <- odin.dust::odin_dust("NFDS_Model_VT_2vacc.R")
# read in model from file
WF <- odin.dust::odin_dust("NFDS_Model_VT_2vacc.R")
fitting_mass_data <- mcstate::particle_filter_data(data = peripost_mass_cluster_freq,
time = "year",
rate = 1 / dt,
initial_time = 0)
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
# Using MCMC to infer parameters
pmcmc_sigma_f <- mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0, max = 1)
#pmcmc_sigma_w <- 0
pmcmc_sigma_w <- -1000
pmcmc_prop_f <- mcstate::pmcmc_parameter("prop_f", 0.2, min = 0, max = 1)
pmcmc_m <- mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1)
pmcmc_v <- mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)
species_no <- mass_clusters
no_clusters <- mass_clusters
gene_no <- nrow(intermed_gene_presence_absence_consensus_matrix)
Pop_ini <- data.frame(model_start_pop)
Pop_eq <- rowSums(model_start_pop)
Genotypes <- intermed_gene_presence_absence_consensus_matrix
capacity <- sum(model_start_pop)
delta <- delta_ranking
vT1 = c(0,1,0)
vT2 = c(0,0,1)
migVec <- data.frame(avg_cluster_freq)
complex_params = list(species_no = species_no, Pop_ini = Pop_ini, Pop_eq = Pop_eq, Genotypes = intermed_gene_presence_absence_consensus[-1,-1], capacity = capacity, delta = delta, vT1 = vT1,  vT2 = vT2, gene_no = gene_no, vacc_time1 = vacc_time1, vacc_time2 = vacc_time2, dt = dt, sigma_w = pmcmc_sigma_w, migVec = (migVec))
make_transform <- function(m) {
function(theta) {
as_double_mtx <- function(x){
sapply(x,as.double)
}
c(lapply(m, as_double_mtx), as.list(theta))
}
}
take_list <- function(x){
print(x$Genotype)
}
transform <- function() {
make_transform(complex_params)}
index <- function(info) {
list(run = c(sum_clust = info$index$Pop_tot),
state = c(Pop = info$index$Pop))
}
proposal_matrix <- diag(0.1,4) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
# here, all parameters are proposed independently.
# think about this, this might not actually be true
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(pmcmc_sigma_f, pmcmc_sigma_w, pmcmc_prop_f, pmcmc_m, pmcmc_v), proposal_matrix, transform)
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 01), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars$initial()
#WF$public_methods$has_openmp()
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
index = index,
compare = combined_compare)
n_steps <- 5
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 1)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
#ceil_mass_NVT[is.nan(ceil_mass_NVT)] <- 0
mean_mass_VT1_start <- rep(0, mass_clusters)
for (i in 1:mass_clusters){
mean_mass_VT_start1[i] <- (mean(as.integer(seq_clusters[seq_clusters$SeqYear == 1999 & seq_clusters$Cluster == unique(seq_clusters$Cluster)[i],"VT"]=="VT")))
}
#ceil_mass_NVT[is.nan(ceil_mass_NVT)] <- 0
mean_mass_VT1_start <- rep(0, mass_clusters)
for (i in 1:mass_clusters){
mean_mass_VT_start1[i] <- (mean(as.integer(seq_clusters[seq_clusters$SeqYear == 1999 & seq_clusters$Cluster == unique(seq_clusters$Cluster)[i],"VT"]=="VT")))
}
for (i in 1:mass_clusters){
mean_mass_VT1_start[i] <- (mean(as.integer(seq_clusters[seq_clusters$SeqYear == 1999 & seq_clusters$Cluster == unique(seq_clusters$Cluster)[i],"VT"]=="VT")))
}
mean_mass_VT1_start[is.nan(mean_mass_VT_start)] <- 0
mean_mass_VT1_start
mean_mass_VT1_start[is.nan(mean_mass_VT_start)] <- 0
mean_mass_VT1_start
mean_mass_VT1_start[is.nan(mean_mass_VT1_start)] <- 0
mean_mass_VT1_start
mean_mass_VT2_start <- rep(0, mass_clusters)
for (i in 1:mass_clusters){
mean_mass_VT2_start[i] <- (mean(as.integer(seq_clusters[seq_clusters$SeqYear == 1999 & seq_clusters$Cluster == unique(seq_clusters$Cluster)[i],"VT_PCV13"]=="VT")))
}
mean_mass_VT2_start[is.nan(mean_mass_VT2_start)] <- 0
mean_mass_VT2_start
mean_mass_VT2_start <- rep(0, mass_clusters)
for (i in 1:mass_clusters){
mean_mass_VT2_start[i] <- (mean(as.integer(seq_clusters[seq_clusters$SeqYear == 1999 & seq_clusters$Cluster == unique(seq_clusters$Cluster)[i],"VT_PCV13"]=="VT" & seq_clusters$Cluster == unique(seq_clusters$Cluster)[i],"VT"]=="NVT")))
unique(seq_clusters$Cluster)[1],"VT_PCV13"]=="VT"
seq_clusters[seq_clusters$SeqYear == 1999 & seq_clusters$Cluster == unique(seq_clusters$Cluster)[i],"VT_PCV13"]=="VT"
mean_mass_VT2_start <- rep(0, mass_clusters)
for (i in 1:mass_clusters){
mean_mass_VT2_start[i] <- (mean(as.integer(seq_clusters[seq_clusters$SeqYear == 1999 & seq_clusters$Cluster == unique(seq_clusters$Cluster)[i],"VT_PCV13"]=="VT")))
}
mean_mass_VT2_start <- mean_mass_VT2_start - mean_mass_VT1_start
mean_mass_VT2_start[is.nan(mean_mass_VT2_start)] <- 0
mean_mass_VT2_start
mean_mass_VT2_start[is.nan(mean_mass_VT2_start)] <- 0
mean_mass_VT2_start <- mean_mass_VT2_start - mean_mass_VT1_start
mean_mass_VT2_start
#ceil_mass_NVT[is.nan(ceil_mass_NVT)] <- 0
mean_mass_VT1_start <- rep(0, mass_clusters)
for (i in 1:mass_clusters){
mean_mass_VT1_start[i] <- (mean(as.integer(seq_clusters[seq_clusters$SeqYear == 1999 & seq_clusters$Cluster == unique(seq_clusters$Cluster)[i],"VT"]=="VT")))
}
mean_mass_VT1_start[is.nan(mean_mass_VT1_start)] <- 0
mean_mass_VT2_start <- rep(0, mass_clusters)
for (i in 1:mass_clusters){
mean_mass_VT2_start[i] <- (mean(as.integer(seq_clusters[seq_clusters$SeqYear == 1999 & seq_clusters$Cluster == unique(seq_clusters$Cluster)[i],"VT_PCV13"]=="VT")))
}
mean_mass_VT2_start[is.nan(mean_mass_VT2_start)] <- 0
mean_mass_VT2_start <- mean_mass_VT2_start - mean_mass_VT1_start
mean_mass_VT2_start
seq_clusters[seq_clusters$SeqYear == 1999 & seq_clusters$Cluster == unique(seq_clusters$Cluster)[6],"VT_PCV13"]
seq_clusters[seq_clusters$SeqYear == 1999 & seq_clusters$Cluster == unique(seq_clusters$Cluster)[6],"VT"]
unique(seq_clusters$Cluster)[6]
# Add VT information
PCV7_VTs <- rep("NVT",length(unique(Navajo_meta_data$Sero)))
names(PCV7_VTs) <- unique(Navajo_meta_data$Sero)
PCV7_VTs[c("4","6B", "9V", "14", "18C", "19F", "23F")] <- "VT"
#Navajo_PP$VT <- Navajo_VT_PCV7_dict[Navajo_PP$Taxon]
Navajo_PP$VT <- PCV7_VTs[Navajo_Serotype_dict[Navajo_PP$Taxon]]
# Add PCV13 info
PCV13_VTs <- rep("NVT",length(unique(Navajo_meta_data$Sero)))
names(PCV13_VTs) <- unique(Navajo_meta_data$Sero)
PCV13_VTs[c("1", "3", "4","5","6A","6B", "7F", "9V", "14", "18C", "19A", "19F", "23F")] <- "VT"
Navajo_PP$VT_PCV13 <- PCV13_VTs[Navajo_Serotype_dict[Navajo_PP$Taxon]]
# Add sequencing year info
Navajo_Year_dict <- Navajo_meta_data$Year
names(Navajo_Year_dict) <- Navajo_meta_data$Accession
Navajo_PP$SeqYear <- Navajo_Year_dict[Navajo_PP$Taxon]
saveRDS(Navajo_PP,"Navajo_PP.rds")
seq_clusters <- readRDS("Navajo_PP.rds")
seq_clusters <- readRDS("Navajo_PP.rds")
intermed_gene_presence_absence_consensus <- readRDS(file = "Navajo_ggCaller_intermed_consensus.rds")
intermed_gene_presence_absence_consensus_matrix <- sapply(intermed_gene_presence_absence_consensus[-1,-1],as.double)
model_start_pop <- readRDS(file = "Navajo_model_start_pop.rds")
delta_ranking <- readRDS(file = "Navajo_delta_ranking.rds")
mass_cluster_freq_1 <- readRDS(file = "Navajo_cluster_freqs_1.rds")
mass_cluster_freq_2 <- readRDS(file = "Navajo_cluster_freqs_2.rds")
mass_cluster_freq_3 <- readRDS(file = "Navajo_cluster_freqs_3.rds")
mass_cluster_freq_4 <- readRDS(file = "Navajo_cluster_freqs_4.rds")
mass_cluster_freq_5 <- readRDS(file = "Navajo_cluster_freqs_5.rds")
mass_cluster_freq_6 <- readRDS(file = "Navajo_cluster_freqs_6.rds")
mass_cluster_freq_7 <- readRDS(file = "Navajo_cluster_freqs_7.rds")
mass_cluster_freq_8 <- readRDS(file = "Navajo_cluster_freqs_8.rds")
mass_cluster_freq_9 <- readRDS(file = "Navajo_cluster_freqs_9.rds")
mass_cluster_freq_10 <- readRDS(file = "Navajo_cluster_freqs_10.rds")
mass_cluster_freq_11 <- readRDS(file = "Navajo_cluster_freqs_11.rds")
mass_cluster_freq_12 <- readRDS(file = "Navajo_cluster_freqs_12.rds")
mass_cluster_freq_13 <- readRDS(file = "Navajo_cluster_freqs_13.rds")
mass_cluster_freq_14 <- readRDS(file = "Navajo_cluster_freqs_14.rds")
mass_cluster_freq_15 <- readRDS(file = "Navajo_cluster_freqs_15.rds")
mass_VT <- readRDS(file = "Navajo_VT.rds")
mass_clusters <- length(unique(seq_clusters$Cluster))
avg_cluster_freq <- rep(1/mass_clusters, mass_clusters)
output_filename <- "Navajo_VT_ggCaller_PopPUNK"
dt <- 1/12
peripost_mass_cluster_freq <- data.frame("year" = 1:14, rbind(mass_cluster_freq_2,mass_cluster_freq_3,mass_cluster_freq_4,mass_cluster_freq_5,mass_cluster_freq_6, mass_cluster_freq_7, mass_cluster_freq_8, mass_cluster_freq_9,mass_cluster_freq_10, mass_cluster_freq_11, mass_cluster_freq_12, mass_cluster_freq_13,mass_cluster_freq_14,mass_cluster_freq_15))
names(peripost_mass_cluster_freq) <- c("year", as.character(1:mass_clusters))
vacc_time1 <- 2 # trying vacc time =2 instead of 5 as before
vacc_time2 <- 12
ceil_mass_NVT1 <- rep(0, mass_clusters)
for (i in 1:mass_clusters){
ceil_mass_NVT1[i] <- ceiling(mean(as.integer(seq_clusters[seq_clusters$Cluster == unique(seq_clusters$Cluster)[i],"VT"]=="NVT")))
}
ceil_mass_NVT2 <- rep(0, mass_clusters)
for (i in 1:mass_clusters){
ceil_mass_NVT2[i] <- ceiling(mean(as.integer(seq_clusters[seq_clusters$Cluster == unique(seq_clusters$Cluster)[i],"VT_PCV13"]=="NVT")))
}
#ceil_mass_NVT[is.nan(ceil_mass_NVT)] <- 0
mean_mass_VT1_start <- rep(0, mass_clusters)
for (i in 1:mass_clusters){
mean_mass_VT1_start[i] <- (mean(as.integer(seq_clusters[seq_clusters$SeqYear == 1999 & seq_clusters$Cluster == unique(seq_clusters$Cluster)[i],"VT"]=="VT")))
}
mean_mass_VT1_start[is.nan(mean_mass_VT1_start)] <- 0
mean_mass_VT2_start <- rep(0, mass_clusters)
for (i in 1:mass_clusters){
mean_mass_VT2_start[i] <- (mean(as.integer(seq_clusters[seq_clusters$SeqYear == 1999 & seq_clusters$Cluster == unique(seq_clusters$Cluster)[i],"VT_PCV13"]=="VT")))
}
mean_mass_VT2_start[is.nan(mean_mass_VT2_start)] <- 0
mean_mass_VT2_start <- mean_mass_VT2_start - mean_mass_VT1_start
mean_mass_VT2_start
NVT_mig <- rep(1/mass_clusters, mass_clusters) * (ceil_mass_NVT2)
VT_mig <- rep(1/mass_clusters, mass_clusters) * (1-ceil_mass_NVT1)
VT2_mig <- rep(1/mass_clusters, mass_clusters) * (1-ceil_mass_NVT2) * ceil_mass_NVT1
avg_cluster_freq <- data.frame(as.matrix(cbind(NVT_mig,VT_mig,VT2_mig)))
model_start_pop <- matrix(as.double(c(model_start_pop * (1-(mean_mass_VT1_start + mean_mass_VT2_start)),model_start_pop * mean_mass_VT1_start, model_start_pop * mean_mass_VT2_start)), byrow = FALSE, nrow = mass_clusters, ncol = 3)
fitting_mass_data <- mcstate::particle_filter_data(data = peripost_mass_cluster_freq,
time = "year",
rate = 1 / dt,
initial_time = 0)
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
# Using MCMC to infer parameters
pmcmc_sigma_f <- mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0, max = 1)
#pmcmc_sigma_w <- 0
pmcmc_sigma_w <- -1000
pmcmc_prop_f <- mcstate::pmcmc_parameter("prop_f", 0.2, min = 0, max = 1)
pmcmc_m <- mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1)
pmcmc_v <- mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)
species_no <- mass_clusters
no_clusters <- mass_clusters
gene_no <- nrow(intermed_gene_presence_absence_consensus_matrix)
Pop_ini <- data.frame(model_start_pop)
Pop_eq <- rowSums(model_start_pop)
Genotypes <- intermed_gene_presence_absence_consensus_matrix
capacity <- sum(model_start_pop)
delta <- delta_ranking
vT1 = c(0,1,0)
vT2 = c(0,0,1)
migVec <- data.frame(avg_cluster_freq)
complex_params = list(species_no = species_no, Pop_ini = Pop_ini, Pop_eq = Pop_eq, Genotypes = intermed_gene_presence_absence_consensus[-1,-1], capacity = capacity, delta = delta, vT1 = vT1,  vT2 = vT2, gene_no = gene_no, vacc_time1 = vacc_time1, vacc_time2 = vacc_time2, dt = dt, sigma_w = pmcmc_sigma_w, migVec = (migVec))
make_transform <- function(m) {
function(theta) {
as_double_mtx <- function(x){
sapply(x,as.double)
}
c(lapply(m, as_double_mtx), as.list(theta))
}
}
take_list <- function(x){
print(x$Genotype)
}
transform <- function() {
make_transform(complex_params)}
index <- function(info) {
list(run = c(sum_clust = info$index$Pop_tot),
state = c(Pop = info$index$Pop))
}
proposal_matrix <- diag(0.1,4) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
# here, all parameters are proposed independently.
# think about this, this might not actually be true
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(pmcmc_sigma_f, pmcmc_sigma_w, pmcmc_prop_f, pmcmc_m, pmcmc_v), proposal_matrix, transform)
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 01), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars$initial()
#WF$public_methods$has_openmp()
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
index = index,
compare = combined_compare)
n_steps <- 5
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 1)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
n_steps <- 1000
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains =4, n_workers = 4,
n_threads_total = 4)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run, burnin = 250, thin = 1)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
print(parameter_mean_hpd)
det_mcmc1 <- coda::as.mcmc(cbind(det_pmcmc_run$probabilities, det_pmcmc_run$pars))
plot(det_mcmc1)
print("det_mcmc_1 final log likelihood")
processed_chains$probabilities[nrow(processed_chains$probabilities),2]
print("det_mcmc_1 mean log likelihood")
mean(processed_chains$probabilities[,2])
det_proposal_matrix <- cov(processed_chains$pars)
det_mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", parameter_mean_hpd[1], min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", parameter_mean_hpd[2], min = 0, max = 1),mcstate::pmcmc_parameter("m", parameter_mean_hpd[3], min = -1000, max = 0), mcstate::pmcmc_parameter("v", parameter_mean_hpd[4], min = 0, max = 1)), det_proposal_matrix, make_transform(complex_params))
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
index = index,
compare = combined_compare)
n_steps <- 5
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 1)
det_pmcmc_run <- mcstate::pmcmc(det_mcmc_pars, det_filter, control = control)
n_steps <- 1000
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 4, n_workers = 4, n_threads_total = 4)
det_pmcmc_run2 <- mcstate::pmcmc(det_mcmc_pars, det_filter, control = control)
