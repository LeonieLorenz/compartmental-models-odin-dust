n_steps <- 2000
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 4, n_workers = 4, n_threads_total = 4)
det_pmcmc_run2 <- mcstate::pmcmc(det_mcmc_pars, det_filter, control = control)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run2, burnin = 2000, thin = 1)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run2, burnin = 500, thin = 1)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
print(parameter_mean_hpd)
par(mfrow = c(1,1))
det_mcmc2 <- coda::as.mcmc(cbind(det_pmcmc_run2$probabilities, det_pmcmc_run2$pars))
plot(det_mcmc2)
processed_chains$probabilities[nrow(processed_chains$probabilities),2]
proposal_matrix <- diag(c(0.1, 0.01, 0.1, 0.1, 0.1)) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
# here, all parameters are proposed independently.
# think about this, this might not actually be true
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(pmcmc_sigma_f, pmcmc_sigma_w, pmcmc_prop_f, pmcmc_m, pmcmc_v), proposal_matrix, transform)
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f",-2, min = -3.5, max = 0), mcstate::pmcmc_parameter("sigma_w", -10, min = -1000, max = -3.5), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", -2, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
#= make_transform(c(Pop_ini, Pop_eq, Genotypes, capacity, delta, vaccTypes, species_no, gene_no, vacc_time)))
#mcmc_pars$names()
#mcmc_pars$model(mcmc_pars$initial())
mcmc_pars$initial()
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0.075, max = 1), mcstate::pmcmc_parameter("sigma_w", 0.0011, min = 0, max = 0.0749), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0.075, max = 1), mcstate::pmcmc_parameter("sigma_w", 0.0011, min = 0, max = 0.0749), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
n_steps <- 5
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 1)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
n_steps <- 1000
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains =4, n_workers = 4,
n_threads_total = 4)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run, burnin = 250, thin = 1)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
print(parameter_mean_hpd)
det_mcmc1 <- coda::as.mcmc(cbind(det_pmcmc_run$probabilities, det_pmcmc_run$pars))
plot(det_mcmc1)
#det_mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0.075, max = 0.22), mcstate::pmcmc_parameter("sigma_w", 0.05, min = 0.000001, max = 0.0749), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 0.2), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 0.5)), det_proposal_matrix, make_transform(complex_params))
det_mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", parameter_mean_hpd[1], min = -3.5, max = 0), mcstate::pmcmc_parameter("sigma_w", parameter_mean_hpd[2], min = -1000, max = -3.5), mcstate::pmcmc_parameter("prop_f", parameter_mean_hpd[3], min = 0, max = 1),mcstate::pmcmc_parameter("m", parameter_mean_hpd[4], min = -1000, max = 0), mcstate::pmcmc_parameter("v", parameter_mean_hpd[5], min = 0, max = 1)), det_proposal_matrix, make_transform(complex_params))
det_proposal_matrix <- cov(processed_chains$pars)
det_proposal_matrix
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
n_steps <- 5
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 1)
det_pmcmc_run <- mcstate::pmcmc(det_mcmc_pars, det_filter, control = control)
n_steps <- 2000
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 4, n_workers = 4, n_threads_total = 4)
det_pmcmc_run2 <- mcstate::pmcmc(det_mcmc_pars, det_filter, control = control)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run2, burnin = 500, thin = 1)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
print(parameter_mean_hpd)
exp(-21.23776334)
det_mcmc2 <- coda::as.mcmc(cbind(det_pmcmc_run2$probabilities, det_pmcmc_run2$pars))
plot(det_mcmc2)
print("det_mcmc_2 final log likelihood")
processed_chains$probabilities[nrow(processed_chains$probabilities),2]
print("det_mcmc_2 mean log likelihood")
mean(processed_chains$probabilities[,2])
lollipop_cluster_freqs_VTandNVT_labelSero(year = "tp 13", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_13/sum(mass_cluster_freq_13), model_name_1 ="Model", model1 = simMeanggCPP13_Navajo/sum(simMeanggCPP13_Navajo), VT_vec = mass_VT, SeroLabel = Navajo_PP_serotype_comp)
lollipop_cluster_freqs_VTandNVT_labelSero(year = "tp 14", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_14/sum(mass_cluster_freq_14), model_name_1 ="Model", model1 = simMeanggCPP14_Navajo/sum(simMeanggCPP14_Navajo), VT_vec = mass_VT, SeroLabel = Navajo_PP_serotype_comp)
lollipop_cluster_freqs_VTandNVT_labelSero(year = "tp 13", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_13/sum(mass_cluster_freq_13), model_name_1 ="Model", model1 = mass_cluster_freq_14/sum(mass_cluster_freq_14), VT_vec = mass_VT, SeroLabel = Navajo_PP_serotype_comp)
lollipop_cluster_freqs_VTandNVT_labelSero(year = "tp 13", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_13/sum(mass_cluster_freq_13), model_name_1 ="Model", model1 = mass_cluster_freq_14/sum(mass_cluster_freq_14), VT_vec = mass_VT, SeroLabel = Navajo_PP_serotype_comp)
lollipop_cluster_freqs_VTandNVT_labelSero(year = "data tp 13 vs 14", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_13/sum(mass_cluster_freq_13), model_name_1 ="Model", model1 = mass_cluster_freq_14/sum(mass_cluster_freq_14), VT_vec = mass_VT, SeroLabel = Navajo_PP_serotype_comp)
lollipop_cluster_freqs_VTandNVT_labelSero(year = "tp 13", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_13/sum(mass_cluster_freq_13), model_name_1 ="Model", model1 = simMeanggCPP13_Navajo/sum(simMeanggCPP13_Navajo), VT_vec = mass_VT, SeroLabel = Navajo_PP_serotype_comp)
lollipop_cluster_freqs_VTandNVT_labelSero(year = "tp 14", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_14/sum(mass_cluster_freq_14), model_name_1 ="Model", model1 = simMeanggCPP14_Navajo/sum(simMeanggCPP14_Navajo), VT_vec = mass_VT, SeroLabel = Navajo_PP_serotype_comp)
lollipop_cluster_freqs_VTandNVT_labelSero(year = "data tp 13 vs 14", plot_title = "PopPUNK and ggCaller", data_name = "tp 13",data1 = mass_cluster_freq_13/sum(mass_cluster_freq_13), model_name_1 ="tp 14", model1 = mass_cluster_freq_14/sum(mass_cluster_freq_14), VT_vec = mass_VT, SeroLabel = Navajo_PP_serotype_comp)
lollipop_cluster_freqs_VTandNVT_labelSero(year = "data tp 13 vs 14", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_13/sum(mass_cluster_freq_13), model_name_1 ="tp 14", model1 = mass_cluster_freq_14/sum(mass_cluster_freq_14), VT_vec = mass_VT, SeroLabel = Navajo_PP_serotype_comp)
lollipop_cluster_freqs_VTandNVT_labelSero(year = "data tp 14 vs 15", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_14/sum(mass_cluster_freq_14), model_name_1 ="tp 15", model1 = mass_cluster_freq_15/sum(mass_cluster_freq_15), VT_vec = mass_VT, SeroLabel = Navajo_PP_serotype_comp)
Navajo_4param_fit <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_07_17/Navajo_fit/Navajo_ggCaller_PopPUNK_det_pmcmc_run2.rds")
Nepal_mcmc2 <- coda::as.mcmc(cbind(Navajo_4param_fit$probabilities, Navajo_4param_fit$pars))
coda::effectiveSize(Navajo_4param_fit_mcmc)
Navajo_4param_fit_mcmc <- coda::as.mcmc(cbind(Nepal_2ndfit$probabilities, Nepal_2ndfit$pars))
coda::effectiveSize(Navajo_4param_fit_mcmc)
summary(coda::as.mcmc(Navajo_4param_fit_mcmc))
# 5 param fit
Navajo_5param_fit <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_07_17/Navajo_5paramfit/Navajo_ggCaller_PopPUNK_det_pmcmc_run2.rds")
Navajo_4param_fit_mcmc <- coda::as.mcmc(cbind(Navajo_4param_fit$probabilities, Navajo_4param_fit$pars))
# 4 param fit
Navajo_4param_fit <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_07_17/Navajo_fit/Navajo_ggCaller_PopPUNK_det_pmcmc_run2.rds")
Navajo_4param_fit_mcmc <- coda::as.mcmc(cbind(Navajo_4param_fit$probabilities, Navajo_4param_fit$pars))
coda::effectiveSize(Navajo_4param_fit_mcmc)
summary(coda::as.mcmc(Navajo_4param_fit_mcmc))
exp(0.26)
# 5 param fit
Navajo_5param_fit <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_07_17/Navajo_5paramfit/Navajo_ggCaller_PopPUNK_det_pmcmc_run2.rds")
Navajo_5param_fit_mcmc <- coda::as.mcmc(cbind(Navajo_5param_fit$probabilities, Navajo_5param_fit$pars))
coda::effectiveSize(Navajo_5param_fit_mcmc)
summary(coda::as.mcmc(Navajo_5param_fit_mcmc))
# 5 param fit: -2.50384352 -476.25811203    0.27730687   -2.95914643    0.08597233
ggCPP_params <- list(dt = 1/36, species_no =mass_clusters,  gene_no = nrow(intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double( model_start_pop), Pop_eq = as.double( model_start_pop), capacity = sum( model_start_pop), Genotypes = intermed_gene_presence_absence_consensus_matrix, sigma_f = -2.50384352, prop_f = 0.27730687, sigma_w =-476.25811203, delta = delta_ranking, m = -2.95914643, migVec =  avg_cluster_freq, vaccTypes =  mass_VT, v = 0.08597233  , vacc_time = 0)
WFmodel <- WF_model$new(pars = ggCPP_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
simMeanggCPP10_Navajo <- rowMeans(WFmodel$run(109)[-1,])
simMeanggCPP13_Navajo <- rowMeans(WFmodel$run(145)[-1,])
simMeanggCPP14_Navajo <- rowMeans(WFmodel$run(157)[-1,])
simMeanggCPP15_Navajo <- rowMeans(WFmodel$run(169)[-1,])
lollipop_cluster_freqs_VTandNVT_labelSero(year = "tp 10", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_10/sum(mass_cluster_freq_10), model_name_1 ="Model", model1 = simMeanggCPP10_Navajo/sum(simMeanggCPP10_Navajo), VT_vec = mass_VT, SeroLabel = Navajo_PP_serotype_comp)
lollipop_cluster_freqs_VTandNVT_labelSero(year = "tp 13", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_13/sum(mass_cluster_freq_13), model_name_1 ="Model", model1 = simMeanggCPP13_Navajo/sum(simMeanggCPP13_Navajo), VT_vec = mass_VT, SeroLabel = Navajo_PP_serotype_comp)
lollipop_cluster_freqs_VTandNVT_labelSero(year = "tp 14", plot_title = "PopPUNK and ggCaller", data1 = mass_cluster_freq_14/sum(mass_cluster_freq_14), model_name_1 ="Model", model1 = simMeanggCPP14_Navajo/sum(simMeanggCPP14_Navajo), VT_vec = mass_VT, SeroLabel = Navajo_PP_serotype_comp)
ggCPP_params <- list(dt = 1/36, species_no =mass_clusters,  gene_no = nrow(intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double( model_start_pop), Pop_eq = as.double( model_start_pop), capacity = sum( model_start_pop), Genotypes = intermed_gene_presence_absence_consensus_matrix, sigma_f = -2.0986254, prop_f = 0.2779427, sigma_w =-1000 , delta = delta_ranking, m = -2.6195911, migVec =  avg_cluster_freq, vaccTypes =  mass_VT, v = 0.2701895 , vacc_time = 0)
WFmodel <- WF_model$new(pars = ggCPP_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
simMeanggCPP10_Navajo <- rowMeans(WFmodel$run(109)[-1,])
simMeanggCPP13_Navajo <- rowMeans(WFmodel$run(145)[-1,])
simMeanggCPP14_Navajo <- rowMeans(WFmodel$run(157)[-1,])
simMeanggCPP15_Navajo <- rowMeans(WFmodel$run(169)[-1,])
# 5 param fit: -2.50384352 -476.25811203    0.27730687   -2.95914643    0.08597233
ggCPP_params <- list(dt = 1/36, species_no =mass_clusters,  gene_no = nrow(intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double( model_start_pop), Pop_eq = as.double( model_start_pop), capacity = sum( model_start_pop), Genotypes = intermed_gene_presence_absence_consensus_matrix, sigma_f = -2.50384352, prop_f = 0.27730687, sigma_w =-476.25811203, delta = delta_ranking, m = -2.95914643, migVec =  avg_cluster_freq, vaccTypes =  mass_VT, v = 0.08597233  , vacc_time = 0)
simMeanggCPP10_Navajo_5p <- rowMeans(WFmodel$run(109)[-1,])
# 5 param fit: -2.50384352 -476.25811203    0.27730687   -2.95914643    0.08597233
ggCPP_params <- list(dt = 1/36, species_no =mass_clusters,  gene_no = nrow(intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double( model_start_pop), Pop_eq = as.double( model_start_pop), capacity = sum( model_start_pop), Genotypes = intermed_gene_presence_absence_consensus_matrix, sigma_f = -2.50384352, prop_f = 0.27730687, sigma_w =-476.25811203, delta = delta_ranking, m = -2.95914643, migVec =  avg_cluster_freq, vaccTypes =  mass_VT, v = 0.08597233  , vacc_time = 0)
WFmodel <- WF_model$new(pars = ggCPP_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
simMeanggCPP10_Navajo_5p <- rowMeans(WFmodel$run(109)[-1,])
simMeanggCPP13_Navajo_5p <- rowMeans(WFmodel$run(145)[-1,])
simMeanggCPP14_Navajo_5p <- rowMeans(WFmodel$run(157)[-1,])
simMeanggCPP15_Navajo_5p <- rowMeans(WFmodel$run(169)[-1,])
lollipop_cluster_freqs_2x2_VTandNVT_labelSero(year = "Data change vs Model change", plot_title = "PopPUNK and ggCaller", data_name = "data tp 14", data1 = mass_cluster_freq_14/sum(mass_cluster_freq_14), model_name_1 ="4 param", model1 =  simMeanggCPP14_Navajo/sum(simMeanggCPP14_Navajo), model_name_2 ="5 param", model2 =  simMeanggCPP14_Navajo_5p/sum(simMeanggCPP14_Navajo_5p), VT_vec = mass_VT, SeroLabel = Navajo_PP_serotype_comp)
lollipop_cluster_freqs_2x2_VTandNVT_labelSero(year = "Data change vs Model change", plot_title = "PopPUNK and ggCaller", data_name = "data tp 14", data1 = mass_cluster_freq_14/sum(mass_cluster_freq_14), model_name_1 ="model 4 param", model1 =  simMeanggCPP14_Navajo/sum(simMeanggCPP14_Navajo), model_name_2 ="model 5 param", model2 =  simMeanggCPP14_Navajo_5p/sum(simMeanggCPP14_Navajo_5p), VT_vec = mass_VT, SeroLabel = Navajo_PP_serotype_comp)
path_to_data <- "~/Documents/PhD_Project/Data/"
### Reading in the Accession Codes, Population and the Sequence Clusters
UK_metadata <- read.csv("~/Documents/PhD_Project/Data/StrepPneumo_UK/metadata.csv")
UK_ids <- UK_metadata$id
UK_ids_dict <- 1:length(UK_ids)
names(UK_ids_dict) <- UK_ids
UK_id_acc_dict <- UK_ids
names(UK_id_acc_dict) <- UK_metadata$Accession
split_winter <- function(winter){
strsplit(winter,"\\/")[[1]][1]
}
UK_SeqYear_dict <- sapply(UK_metadata$Winter, split_winter)
names(UK_SeqYear_dict) <- UK_ids
UK_time_points <- sort(unique(UK_SeqYear_dict))
UK_winters <- sort(unique(UK_metadata$Winter))
saveRDS(UK_metadata, file = "UK_metadata.rds")
View(UK_metadata)
ncbi_metadata <- read.delim("~/Documents/PhD_Project/Data/StrepPneumo_UK/ncbi_dataset.tsv")
assembly_dict <- ncbi_metadata$Assembly.Name
names(assembly_dict) <- gsub("\\.", "_", ncbi_metadata$Assembly.Accession)
PP_all <- read.csv(paste(path_to_data, "StrepPneumo_UK/poppunk_clusters/poppunk_clusters_clusters.csv",sep = ""))
no_PP_all <- length(unique(UK_PP$Cluster))
has_assembly_ncbi <- rep(FALSE, nrow(PP_all))
no_matches <- 0
for (i in 1:nrow(PP_all)) {
if(grepl("GCF",PP_all$Taxon[i])){
assembly_name <- regmatches(PP_all$Taxon[i],regexpr("^GCF\\_[0-9]+\\_1",PP_all$Taxon[i]))
PP_all$Taxon[i] <- assembly_dict[assembly_name]
no_matches <- no_matches + 1
has_assembly_ncbi[i] <- TRUE
}
}
ncbi_PP <- PP_all[(has_assembly_ncbi),] # only keeps taxa for which we have the sequence data
PP_is_UK_dict <- rep(FALSE,nrow(ncbi_PP))
names(PP_is_UK_dict) <- ncbi_PP$Taxon
UK_is_UK_dict <- rep(TRUE,nrow(UK_metadata))
names(UK_is_UK_dict) <- UK_metadata$id
for (i in 1:nrow(ncbi_PP)) {
if(!is.na(UK_is_UK_dict[ncbi_PP$Taxon[i]])){
PP_is_UK_dict[ncbi_PP$Taxon[i]] <- TRUE
}
}
UK_PP <- ncbi_PP[(PP_is_UK_dict),]
no_UK_PP <- length(unique(UK_PP$Cluster))
UK_seq_clusters_dict <- UK_PP$Cluster
names(UK_seq_clusters_dict) <- UK_PP$Taxon
# Add Serotype Information
UK_Serotype_dict <- UK_metadata$Serotype
names(UK_Serotype_dict) <- UK_metadata$id
UKPP_time_points <- unique(sort(UK_PP$Time))
unique(UK_metadata$Year)
nrow(UK_metadata)
PP_all <- read.csv(paste(path_to_data, "StrepPneumoUKjoined/PopPUNK/poppunk_clusters_clusters.csv",sep = ""))
no_PP_all <- length(unique(UK_PP$Cluster))
no_PP_all
length((UK_PP$Cluster))
PP_all <- read.csv(paste(path_to_data, "StrepPneumoUKjoined/PopPUNK/poppunk_clusters_clusters.csv",sep = ""))
no_PP_all <- length(unique(PP_all$Cluster))
no_PP_all
PP_taxon_ind_dict <- 1:nrow(PP_all)
names(PP_taxon_ind_dict) <- PP_all$Taxon
PP_is_UK_dict <- rep(FALSE,nrow(PP_all))
names(PP_is_UK_dict) <- PP_all$Taxon
head(PP_is_UK_dict)
head(UK_metadata$Accession)
tail(UK_metadata$Accession)
for (i in 1:length(UK_metadata$Accession)) {
PP_is_Navajo_dict[UK_metadata$Accession[i]] <- TRUE
}
PP_is_UK_dict <- rep(FALSE,nrow(PP_all))
names(PP_is_UK_dict) <- PP_all$Taxon
for (i in 1:length(UK_metadata$Accession)) {
PP_is_UK_dict[UK_metadata$Accession[i]] <- TRUE
}
UK_PP <- PP_all[PP_is_Navajo_dict,]
no_UK_PP <- length(unique(PP_is_UK_dict$Cluster))
no_UK_PP <- length(unique(UK_PP$Cluster))
no_UK_PP
length((UK_PP$Cluster))
PP_all <- read.csv(paste(path_to_data, "StrepPneumoUKjoined/PopPUNK/poppunk_clusters_clusters.csv",sep = ""))
no_PP_all <- length(unique(PP_all$Cluster))
PP_taxon_ind_dict <- 1:nrow(PP_all)
names(PP_taxon_ind_dict) <- PP_all$Taxon
PP_is_UK_dict <- rep(FALSE,nrow(PP_all))
names(PP_is_UK_dict) <- PP_all$Taxon
for (i in 1:length(UK_metadata$Accession)) {
PP_is_UK_dict[UK_metadata$Accession[i]] <- TRUE
}
UK_PP <- PP_all[PP_is_Navajo_dict,]
UK_PP <- PP_all[PP_is_UK_dict,]
no_UK_PP <- length(unique(UK_PP$Cluster))
no_UK_PP
length((UK_PP$Cluster))
nrow(UK_metadata)
UK_seq_clusters_dict <- UK_PP$Cluster
names(UK_seq_clusters_dict) <- UK_PP$Taxon
# Add Serotype Information
UK_Serotype_dict <- UK_meta_data$Sero
names(UK_Serotype_dict) <- UK_meta_data$Accession
# Add Serotype Information
UK_Serotype_dict <- UK_metadata$Sero
names(UK_Serotype_dict) <- UK_metadata$Accession
UK_metadata$Accession
# Add Serotype Information
UK_Serotype_dict <- UK_metadata$Serotype
names(UK_Serotype_dict) <- UK_metadata$Accession
UK_PP$Serotype <- UK_Serotype_dict[UK_PP$Taxon]
saveRDS(UK_PP,"UK_PP.rds")
View(UK_PP)
UK_SeqYear_dict
UK_PP$Time <- UK_SeqYear_dict[UK_PP$Taxon]
saveRDS(UK_PP,"UK_PP.rds")
UK_SeqYear_dict <- sapply(UK_metadata$Winter, split_winter)
#names(UK_SeqYear_dict) <- UK_ids
names(UK_SeqYear_dict) <- UK_metadata$Accession
UK_time_points <- sort(unique(UK_SeqYear_dict))
UK_winters <- sort(unique(UK_metadata$Winter))
saveRDS(UK_metadata, file = "UK_metadata.rds")
UK_PP$Serotype <- UK_Serotype_dict[UK_PP$Taxon]
UK_PP$Time <- UK_SeqYear_dict[UK_PP$Taxon]
saveRDS(UK_PP,"UK_PP.rds")
UKPP_time_points <- unique(sort(UK_PP$Time))
UKPP_time_points
UK_ggCaller <- read.csv(paste(path_to_data, "StrepPneumo_UK/ggCaller_output/gene_presence_absence.csv", sep = ""), header=FALSE)
View(UK_ggCaller)
UK_metadata$Accession
which(UK_metadata$Year==2012)
UK_metadata$Accession[which(UK_metadata$Year==2012)]
for (i in UK_metadata$Accession[which(UK_metadata$Year==2012)]) {
print(paste("cp ", i, ".fa fasta_with_metadata/"))
}
for (i in UK_metadata$Accession[which(UK_metadata$Year==2012)]) {
print(paste("cp ", i, ".fa fasta_with_metadata/", sep = ""))
}
copy_please <- ""
for (i in UK_metadata$Accession[which(UK_metadata$Year==2013)]) {
copy_please <- (paste(copy_please, "cp ", i, ".fa fasta_with_metadata/ \n", sep = ""))
}
copy_please
for (i in UK_metadata$Accession[which(UK_metadata$Year==2013)]) {
print(paste("cp ", i, ".fa fasta_with_metadata/", sep = ""))
}
length(UK_metadata$Accession[which(UK_metadata$Year==2013))
length(UK_metadata$Accession[which(UK_metadata$Year==2013]))
length(UK_metadata$Accession[which(UK_metadata$Year==2013)])
length(UK_metadata$Accession[which(UK_metadata$Year==2012)])
length(UK_metadata$Year)
528 + 62 + 74
# 4 param fit
# Mass
Mass_4param_fit <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_07_16/Mass_fit/4param_ggCaller_PopPUNK_det_pmcmc_run2.rds")
528 + 62 + 74
Mass_4param_fit_mcmc <- coda::as.mcmc(cbind(Mass_4param_fit$probabilities, Mass_4param_fit$pars))
coda::effectiveSize(Mass_4param_fit_mcmc)
summary(coda::as.mcmc(Mass_4param_fit_mcmc))
gann <- readRDS("gann.rds")
gann@population
nrows(gann@population)
dim(gann@population)
UK_metadata
copy_please <- ""
for (i in UK_metadata$Accession[which(UK_metadata$Year==2013)]) {
copy_please <- (paste(copy_please, "cp ", i, ".fa fasta_with_metadata/ \n", sep = ""))
}
copy_please
sink(file = "Southampton_accessions.txt")
copy_please
sink(file = NULL)
writeLines(copy_please, "Southampton_accessions.txt",sep = "")
length(UK_metadata$Year)
for (i in UK_metadata$Accession) {
copy_please <- (paste(copy_please, "cp ", i, ".fa fasta_with_metadata/ \n", sep = ""))
}
copy_please <- ""
for (i in UK_metadata$Accession) {
copy_please <- (paste(copy_please, "cp ", i, ".fa fasta_with_metadata/ \n", sep = ""))
}
writeLines(copy_please, "Southampton_accessions.txt",sep = "")
copy_please
writeLines(copy_please, "Southampton_accessions.txt",sep = "")
528 + 157
nrow(UK_metadata)
ga_results <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_07_22/GA/gann.rds")
summary(ga_results)
sum(ga_results@solution)
WF_model <- odin.dust::odin_dust("NFDS_Model_FindGenes.R")
PopPUNK_clusters <- readRDS("PopPUNK_clusters.rds")
ggCPP_intermed_gene_presence_absence_consensus <- readRDS(file = "ggCPP_intermed_gene_presence_absence_consensus.rds")
ggCPP_intermed_gene_presence_absence_consensus_matrix <- sapply(ggCPP_intermed_gene_presence_absence_consensus[-1,-1],as.double)
PP_model_start_pop <- readRDS(file = "PP_model_start_pop.rds")
ggC_delta_ranking <- readRDS(file = "ggC_delta_ranking.rds")
PP_mass_cluster_freq_1 <- readRDS(file = "PP_mass_cluster_freq_1.rds")
PP_mass_cluster_freq_2 <- readRDS(file = "PP_mass_cluster_freq_2.rds")
PP_mass_cluster_freq_3 <- readRDS(file = "PP_mass_cluster_freq_3.rds")
PP_mass_VT <- readRDS(file = "PP_mass_VT.rds")
PP_mass_clusters <- length(unique(PopPUNK_clusters$Cluster))
PP_avg_cluster_freq <- rep(1/PP_mass_clusters, PP_mass_clusters)
FindGenes_ggCPP_params <- list(dt = 1/36, species_no = PP_mass_clusters,  gene_no = nrow(ggCPP_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(PP_model_start_pop), Pop_eq = as.double(PP_model_start_pop), capacity = sum(PP_model_start_pop), Genotypes = ggCPP_intermed_gene_presence_absence_consensus_matrix, sigma_f = 0.3090376, sigma_w = 0, prop_f = 1, m = 0.03104461, migVec = PP_avg_cluster_freq, vaccTypes = PP_mass_VT, v = 0.15977862, vacc_time = 0, delta_bool = (as.vector(ga_results@solution)))
#ggCPP_params <- list(dt = 1/36, species_no = PP_mass_clusters,  gene_no = nrow(ggCPP_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(PP_model_start_pop), Pop_eq = as.double(PP_model_start_pop), capacity = sum(PP_model_start_pop), Genotypes = ggCPP_intermed_gene_presence_absence_consensus_matrix, sigma_f = log(0.11313856), delta = ggC_delta_data2, m = log(0.01107152), migVec = PP_avg_cluster_freq, vaccTypes = PP_mass_VT, v = 0.14340557, vacc_time = 0)
WFmodel <- WF_model$new(pars = FindGenes_ggCPP_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
simMeanggCPP2 <- rowMeans(WFmodel$run(37)[-1,])
simMeanggCPP3 <- rowMeans(WFmodel$run(73)[-1,])
combined_compare(simMeanggCPP2,PP_mass_cluster_freq_2) + combined_compare(simMeanggCPP3,PP_mass_cluster_freq_3)
simMeanggCPP2
simMeanggCPP3
PP_mass_cluster_freq_2
PP_mass_cluster_freq_3
length(PP_mass_cluster_freq_3)
length(simMeanggCPP3)
# try using dfoptim with likelihood
ll_pois <- function(obs, model) {
exp_noise <- 1e6
if (is.na(obs)) {
# Creates vector of zeros in ll with same length, if no data
ll_obs <- numeric(length(model))
} else {
lambda <- model + rexp(n = length(model), rate = exp_noise)
ll_obs <- dpois(x = obs, lambda = lambda, log = TRUE)
}
ll_obs
}
combined_compare <- function(state, observed, pars = NULL) {
result <- 0
#data_size <- sum(mass_cluster_freq_1)
#model_size = 15000
data_size <- sum(observed)
model_size = sum(state)
for (i in 1:length(observed)){
result <- result + ll_pois(observed[i], state[i]/model_size * data_size)
}
result
}
combined_compare(simMeanggCPP2,PP_mass_cluster_freq_2) + combined_compare(simMeanggCPP3,PP_mass_cluster_freq_3)
local_cols <- rainbow(12)
plot(PP_mass_cluster_freq_3/sum(PP_mass_cluster_freq_3), type = "p", ylim=c(0,0.3))
points(PP_mass_cluster_freq_1/sum(PP_mass_cluster_freq_1), col = "orange")
points(PP_mass_cluster_freq_2/sum(PP_mass_cluster_freq_2), col = "red")
# create a dataset
cluster <- rep(unique(PopPUNK_clusters$Cluster),3)
cluster_iter <- rep(1:length(unique(PopPUNK_clusters$Cluster)),3)
time <- c(rep("1" , length(unique(PopPUNK_clusters$Cluster))),rep("2", length(unique(PopPUNK_clusters$Cluster))),rep("3", length(unique(PopPUNK_clusters$Cluster))))
value <- c(PP_mass_cluster_freq_1/sum(PP_mass_cluster_freq_1), PP_mass_cluster_freq_2/sum(PP_mass_cluster_freq_2),PP_mass_cluster_freq_3/sum(PP_mass_cluster_freq_3))
data_points_df <- data.frame(cluster,cluster_iter,time,value)
# Grouped
library(ggplot2)
ggplot(data_points_df, aes(fill=time, y=value, x=cluster_iter)) +
geom_bar(position="dodge", stat="identity")
test <- data_points_df[1:10, "X2"]
barplot(test)
ga_results@population
View(ga_results@population)
dim(ga_results@population)
start_pop <- function(){
ga_results@population
}
### Likelihood
ll_pois <- function(obs, model) {
exp_noise <- 1e6
if (is.na(obs)) {
# Creates vector of zeros in ll with same length, if no data
ll_obs <- numeric(length(model))
} else {
lambda <- model + rexp(n = length(model), rate = exp_noise)
ll_obs <- dpois(x = obs, lambda = lambda, log = TRUE)
}
ll_obs
}
combined_compare <- function(state, observed, pars = NULL) {
result <- 0
#data_size <- sum(mass_cluster_freq_1)
#model_size = 15000
data_size <- sum(observed)
model_size = sum(state)
for (i in 1:length(observed)){
result <- result + ll_pois(observed[i], state[i]/model_size * data_size)
}
result
}
#setwd("/nfs/research/jlees/leonie/WF_fitting_2024/run3")
### load model
WF <- odin.dust::odin_dust("NFDS_Model_FindGenes.R")
fitting_closure_max_binary <- function(all_other_params, data1, data2){
null_fit_dfoptim_fl <- function(fit_params){
rnd_vect_full <- fit_params
all_other_params$delta_bool = rnd_vect_full
WFmodel_ggCPP <- WF$new(pars = all_other_params,
time = 1,
n_particles = 1L,
n_threads = 4L,
seed = 1L)
#n_particles <- 10L
#n_times <- 73
#x <- array(NA, dim = c(WFmodel_ggCPP$info()$len, n_particles, n_times))
#for (t in seq_len(n_times)) {
#  x[ , , t] <- WFmodel_ggCPP$run(t)
#}
#time <- x[1, 1, ]
#x <- x[-1, , ]
#simMeanggCPP2 <- rowMeans(WFmodel_ggCPP$run(36)[-1,])
#simMeanggCPP3 <- rowMeans(WFmodel_ggCPP$run(72)[-1,])
#combined_compare(simMeanggCPP2,data1) + combined_compare(simMeanggCPP3,data2)
sim1 <- WFmodel_ggCPP$run(37)
sim2 <- WFmodel_ggCPP$run(73)
combined_compare(sim1,data1) + combined_compare(sim2,data2)
#- combined_compare(x[,1,37],data1) - combined_compare(x[,1,73],data2)
}
}
library(parallel)
#install.packages("doParallel",repos = "http://cran.us.r-project.org")
library(doParallel)
#install.packages("doSNOW",repos = "http://cran.us.r-project.org")
library(doSNOW)
#install.packages("GA",repos = "http://cran.us.r-project.org")
library(GA)
seq_clusters <- readRDS("PopPUNK_clusters.rds")
intermed_gene_presence_absence_consensus <- readRDS(file = "ggCPP_intermed_gene_presence_absence_consensus.rds")
intermed_gene_presence_absence_consensus_matrix <- sapply(intermed_gene_presence_absence_consensus[-1,-1],as.double)
model_start_pop <- readRDS(file = "PP_model_start_pop.rds")
delta_ranking <- readRDS(file = "ggC_delta_ranking.rds")
mass_cluster_freq_1 <- readRDS(file = "PP_mass_cluster_freq_1.rds")
mass_cluster_freq_2 <- readRDS(file = "PP_mass_cluster_freq_2.rds")
mass_cluster_freq_3 <- readRDS(file = "PP_mass_cluster_freq_3.rds")
mass_VT <- readRDS(file = "PP_mass_VT_mean.rds")
mass_VT <- readRDS(file = "PP_mass_VT.rds")
mass_clusters <- length(unique(seq_clusters$Cluster))
avg_cluster_freq <- rep(1/mass_clusters, mass_clusters)
output_filename <- "4param_ggCaller_PopPUNK"
# process data with particle filter:
dt <- 1/36 # we assume that the generation time of Strep. pneumo is 1 month
peripost_mass_cluster_freq <- data.frame("year" = c(1, 2), rbind(mass_cluster_freq_2, mass_cluster_freq_3))
names(peripost_mass_cluster_freq) <- c("year", as.character(1:mass_clusters))
vacc_time <- 0
FindGenes_ggCPP_params <- list(dt = 1/36, species_no = mass_clusters,  gene_no = nrow(intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(model_start_pop), Pop_eq = as.double(model_start_pop), capacity = sum(model_start_pop), Genotypes = intermed_gene_presence_absence_consensus_matrix, sigma_f = 0.3090376, sigma_w = 0, prop_f = 1, m = 0.03104461, migVec = avg_cluster_freq, vaccTypes = mass_VT, v = 0.15977862, vacc_time = 0)
ga_fit_FindGenes_ggCPP_bin <- fitting_closure_max_binary(FindGenes_ggCPP_params, mass_cluster_freq_2, mass_cluster_freq_3)
start_pop <- function(){
ga_results@population
}
gann <- ga(type = "binary", nBits = 1770, population =  start_pop, fitness = ga_fit_FindGenes_ggCPP_bin, lower = rep(0, 1770), upper = rep(1,1770),
elitism = 1000, maxiter = 2, popSize = 100000, run = 2, pcrossover = 0.8, pmutation = 0.5, crossover = gabin_spCrossover, mutation = gabin_raMutation, parallel = 48)
library(parallel)
#install.packages("doParallel",repos = "http://cran.us.r-project.org")
library(doParallel)
install.packages("doParallel",repos = "http://cran.us.r-project.org")
