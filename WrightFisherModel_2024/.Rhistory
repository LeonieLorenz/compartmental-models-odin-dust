mass_gene_anno_dict <- c()
for (i in 1:nrow(mass_gene_presence_absence)) {
anno <- strsplit(mass_gene_presence_absence[i,3],"SPARC1\\_")[[1]][length(strsplit(mass_gene_presence_absence[i,3],"SPARC1\\_")[[1]])]
if(! is.na(anno)){
mass_gene_anno_dict[anno] <- mass_gene_presence_absence[i,1]
}
}
navajo_anno_gene_dict <- c()
for(i in 1:nrow(navajo_gene_presence_absence)){
anno <- strsplit(navajo_gene_presence_absence[i,3],"SPARC1\\_")[[1]][length(strsplit(navajo_gene_presence_absence[i,3],"SPARC1\\_")[[1]])]
if(! is.na(anno)){
navajo_anno_gene_dict[mass_gene_presence_absence[i,1]] <- anno
}
}
nrow(mass_gene_presence_absence)
length(mass_gene_anno_dict)
nrow(navajo_gene_presence_absence)
length(navajo_anno_gene_dict)
navajo_anno_gene_dict[1]
mass_gene_anno_dict[navajo_anno_gene_dict[1]]
Navajo_matching_Mass <- data.frame(NA)
Navajo_matching_Mass$Navajo <- navajo_anno_gene_dict
Navajo_matching_Mass <- data.frame(NA, nrow = length(navajo_anno_gene_dict))
Navajo_matching_Mass$Navajo <- navajo_anno_gene_dict
unname(navajo_anno_gene_dict)
Navajo_matching_Mass$Navajo <- unname(navajo_anno_gene_dict)
Navajo_matching_Mass <- data.frame(NA, nrow = length(navajo_anno_gene_dict), ncol = 2)
Navajo_matching_Mass <- data.frame(NA, nrow = length(navajo_anno_gene_dict), ncol = 2)
colnames(Navajo_matching_Mass) <- c("Navajo", "Matching Mass")
Navajo_matching_Mass$Navajo <- unname(navajo_anno_gene_dict)
Navajo_matching_Mass <- data.frame(NA, nrow = length(navajo_anno_gene_dict), ncol = 2)
colnames(Navajo_matching_Mass) <- c("Navajo", "MatchingMass")
View(Navajo_matching_Mass)
Navajo_matching_Mass <- data.frame(NA, nrow = length(navajo_anno_gene_dict), ncol = 2)
colnames(Navajo_matching_Mass) <- c("Navajo", "MatchingMass")
head(Navajo_matching_Mass)
Navajo_matching_Mass <- data.frame(NA, nrow = length(navajo_anno_gene_dict), ncol = 2)
head(Navajo_matching_Mass)
Navajo_matching_Mass <- data.frame(data = NA, nrow = length(navajo_anno_gene_dict), ncol = 2)
head(Navajo_matching_Mass)
Navajo_matching_Mass <- data.frame(matrix(NA, nrow = length(navajo_anno_gene_dict), ncol = 2))
head(Navajo_matching_Mass)
colnames(Navajo_matching_Mass) <- c("Navajo", "MatchingMass")
Navajo_matching_Mass$  <- unname(navajo_anno_gene_dict)
Navajo_matching_Mass$Navajo <- unname(navajo_anno_gene_dict)
for (i in 1:nrow(Navajo_matching_Mass)) {
Navajo_matching_Mass$MatchingMass[i] <- mass_gene_anno_dict[navajo_anno_gene_dict[i]]
}
missing_match_count <- 0
Navajo_matching_Mass <- data.frame(matrix(NA, nrow = length(navajo_anno_gene_dict), ncol = 2))
colnames(Navajo_matching_Mass) <- c("Navajo", "MatchingMass")
Navajo_matching_Mass$Navajo <- unname(navajo_anno_gene_dict)
missing_match_count <- 0
for (i in 1:nrow(Navajo_matching_Mass)) {
matching_mass <- mass_gene_anno_dict[navajo_anno_gene_dict[i]]
Navajo_matching_Mass$MatchingMass[i] <- matching_mass
if(is.na(matching_mass)){
missing_match_count <- missing_match_count +1
}
}
missing_match_count
unique(unname(navajo_anno_gene_dict))
length(unique(unname(navajo_anno_gene_dict)))
length((unname(navajo_anno_gene_dict)))
unique(mass_gene_presence_absence[,1])
length(unique(mass_gene_presence_absence[,1]))
length(unique(mass_gene_presence_absence[,3]))
length(unique(navajo_gene_presence_absence[,1]))
length(unique(navajo_gene_presence_absence[,3]))
mass_anno_gene_dict <- c()
for (i in 1:nrow(mass_gene_presence_absence)) {
anno <- strsplit(mass_gene_presence_absence[i,3],"SPARC1\\_")[[1]][length(strsplit(mass_gene_presence_absence[i,3],"SPARC1\\_")[[1]])]
if(! is.na(anno)){
mass_anno_gene_dict[mass_gene_presence_absence[i,1]] <- anno
}
}
length(mass_anno_gene_dict)
4938/5256
5024/5712
5024 -222
4802/5712
head(mass_gene_anno_dict)
mass_gene_anno_dict["CL11"]
length(unname(navajo_anno_gene_dict))
head(unname(navajo_anno_gene_dict))
length(unname(mass_anno_gene_dict))
length(unique(unname(mass_anno_gene_dict)))
length(unique(unname(navajo_anno_gene_dict)))
3511/5712
587/(587+1167)
path_to_data <- "~/Documents/PhD_Project/Data/"
Nepal_meta_data <- read.csv(paste(path_to_data, "StrepPneumo_Nepal/GPS_data/gps1+gps2_metadata_results_leonie.csv",sep = ""))
View(Nepal_meta_data)
View(Nepal_meta_data)
Nepal_time_points <- sort(unique(Nepal_meta_data$Year))
Nepal_time_points
Nepal_SeqYear_dict <- Nepal_meta_data$Year
names(Nepal_SeqYear_dict) <- Nepal_meta_data$Lane_id
Nepal_SeqYear_dict
Nepal_meta_IDtoInd <- 1:nrow(Nepal_meta_data)
names(Nepal_meta_IDtoInd) <- Nepal_meta_data$Lane_id
seq_no_per_year <- rep(0, length(Nepal_time_points))
names(seq_no_per_year) <- Nepal_time_points
for (i in 1:length(Nepal_time_points)) {
seq_no_per_year[i] <- length(which(Nepal_meta_data$Year==Nepal_time_points[i]))
}
barplot(seq_no_per_year, xlab = "Sequencing Years", ylim = c(0, 250), ylab = "Sequence Counts")
barplot(seq_no_per_year, xlab = "Sequencing Years", ylim = c(0, 400), ylab = "Sequence Counts")
barplot(seq_no_per_year, xlab = "Sequencing Years", ylim = c(0, 800), ylab = "Sequence Counts")
barplot(seq_no_per_year, xlab = "Sequencing Years", ylim = c(0, 1000), ylab = "Sequence Counts")
barplot(seq_no_per_year, xlab = "Sequencing Years", ylim = c(0, 1200), ylab = "Sequence Counts")
# PCV10 was introduced in 2015
# number of sequences fluctuates a lot from year to year. take just 2009, 2012, 2014, 2017, 2018, 2019?
# or summaries the years somehow?
#Nepal_time_points_selected <- Nepal_time_points[c(5,7,9,12,13)]
# No, I want all the years
Nepal_time_points_selected <- Nepal_time_points
Nepal_time_points_preVac <- Nepal_time_points[1:10]
Nepal_time_points_preVac
Nepal_time_points_selected
min(Nepal_time_points)
max(Nepal_time_points)
# PCV10 was introduced in 2015
# number of sequences fluctuates a lot from year to year. take just 2009, 2012, 2014, 2017, 2018, 2019?
# or summaries the years somehow?
#Nepal_time_points_selected <- Nepal_time_points[c(5,7,9,12,13)]
# No, I want all the years
#Nepal_time_points_selected <- Nepal_time_points
#Nepal_time_points_preVac <- Nepal_time_points[1:10]
Nepal_time_points_selected <- min(Nepal_time_points):max(Nepal_time_points)
Nepal_time_points_preVac <- Nepal_time_points_selected[1:11]
Nepal_time_points_preVac
PP_all <- read.csv(paste(path_to_data, "StrepPneumo_Nepal/GPS_PopPUNK/poppunk_clusters/poppunk_clusters_clusters.csv",sep = ""))
# since Nepal was in the database, I had to run PopPUNK with --write-references
# so now I need to filter this dataset to only have the real Nepal sequences
PP_taxon_ind_dict <- 1:nrow(PP_all)
names(PP_taxon_ind_dict) <- PP_all$Taxon
PP_is_Nepal_dict <- rep(FALSE,nrow(PP_all))
names(PP_is_Nepal_dict) <- PP_all$Taxon
for (i in 1:length(Nepal_meta_data$Lane_id)) {
PP_is_Nepal_dict[Nepal_meta_data$Lane_id[i]] <- TRUE
}
Nepal_PP <- PP_all[PP_is_Nepal_dict,]
no_Nepal_PP <- length(unique(Nepal_PP$Cluster))
no_Nepal_PP
Nepal_PP
head(Nepal_meta_data$Lane_id)
head(PP_all$Taxon)
strsplit("28790_1#85_contigs_velvet", "_contigs_velvet", fixed = TRUE)
strsplit("28790_1#85", "_contigs_velvet", fixed = TRUE)
strsplit("28790_1#85", "_contigs_velvet", fixed = TRUE)[[1]][1]
strsplit("28790_1#85_contigs_velvet", "_contigs_velvet", fixed = TRUE)[[1]][1]
# remove appendix "_contigs_velvet"
remove_contigs_velvet <- function(str_with_app){
str_without_app <- strsplit(str_with_app, "_contigs_velvet", fixed = TRUE)[[1]][1]
str_without_app
}
PP_all$Taxon <- apply(PP_all$Taxon, remove_contigs_velvet)
PP_all$Taxon <- apply(PP_all$Taxon, 1, remove_contigs_velvet)
PP_all$Taxon <- sapply(PP_all$Taxon, remove_contigs_velvet)
PP_all$Taxon
head(PP_all$Taxon)
PP_taxon_ind_dict <- 1:nrow(PP_all)
names(PP_taxon_ind_dict) <- PP_all$Taxon
PP_is_Nepal_dict <- rep(FALSE,nrow(PP_all))
names(PP_is_Nepal_dict) <- PP_all$Taxon
for (i in 1:length(Nepal_meta_data$Lane_id)) {
PP_is_Nepal_dict[Nepal_meta_data$Lane_id[i]] <- TRUE
}
Nepal_PP <- PP_all[PP_is_Nepal_dict,]
no_Nepal_PP <- length(unique(Nepal_PP$Cluster))
no_Nepal_PP
head(Nepal_PP)
nrow(Nepal_PP)
Nepal_seq_clusters_dict <- Nepal_PP$Cluster
names(Nepal_seq_clusters_dict) <- Nepal_PP$Taxon
Nepal_meta_dataPP <- Nepal_meta_data[sort(Nepal_meta_IDtoInd[Nepal_PP$Taxon]),]
for (i in 2:nrow(Nepal_meta_dataPP)) {
if (Nepal_meta_dataPP$Phenotypic_serotype[i] == "") {
Nepal_meta_dataPP$Phenotypic_serotype[i] <- "NT"
}
}
rownames(Nepal_meta_dataPP) <- 1:nrow(Nepal_meta_dataPP)
Nepal_meta_IDtoIndPP <- 1:nrow(Nepal_meta_dataPP)
names(Nepal_meta_IDtoIndPP) <- Nepal_meta_dataPP$Lane_id
View(Nepal_meta_dataPP)
nrow(Nepal_meta_dataPP)
length(Nepal_meta_data$Lane_id)
length(unique(Nepal_meta_data$Lane_id))
tail(Nepal_PP)
View(Nepal_PP)
tail(PP_is_Nepal_dict)
tail(Navajo_PP)
head(PP_is_Nepal_dict)
metadata_has_PP <- rep(FALSE,nrow(Nepal_meta_data))
names(metadata_has_PP) <- Nepal_meta_data$Lane_id
for (i in 1:length(PP_all$Taxon)){
metadata_has_PP[PP_all$Taxon[i]] <- TRUE
}
head(metadata_has_PP)
Nepal_PP <- PP_all[(PP_is_Nepal_dict[PP_all] & metadata_has_PP[PP_all]),]
Nepal_PP <- PP_all[(PP_is_Nepal_dict[PP_all] && metadata_has_PP[PP_all]),]
(PP_is_Nepal_dict[PP_all] && metadata_has_PP[PP_all])
PP_is_Nepal_dict[1]
PP_is_Nepal_dict["28790_1#85 "]
PP_is_Nepal_dict["28790_1#85"]
Nepal_PP <- PP_all[(PP_is_Nepal_dict[PP_all$Taxon] && metadata_has_PP[PP_all$Taxon]),]
PP_is_Nepal_dict[PP_all$Taxon]
Nepal_metadataAndPP <- (PP_is_Nepal_dict[PP_all$Taxon] && metadata_has_PP[PP_all$Taxon])
Nepal_metadataAndPP <- (PP_is_Nepal_dict[PP_all$Taxon] & metadata_has_PP[PP_all$Taxon])
Nepal_metadataAndPP
Nepal_PP <- PP_all[PP_is_Nepal_dict[PP_all$Taxon],]
no_Nepal_PP <- length(unique(Nepal_PP$Cluster))
no_Nepal_PP
nrow(Nepal_PP)
head(PP_is_Nepal_dict[PP_all$Taxon])
head(PP_is_Nepal_dict)
PP_all <- read.csv(paste(path_to_data, "StrepPneumo_Nepal/GPS_PopPUNK/poppunk_clusters/poppunk_clusters_clusters.csv",sep = ""))
# remove appendix "_contigs_velvet"
remove_contigs_velvet <- function(str_with_app){
str_without_app <- strsplit(str_with_app, "_contigs_velvet", fixed = TRUE)[[1]][1]
str_without_app
}
PP_all$Taxon <- sapply(PP_all$Taxon, remove_contigs_velvet)
PP_taxon_ind_dict <- 1:nrow(PP_all)
names(PP_taxon_ind_dict) <- PP_all$Taxon
PP_is_Nepal_dict <- rep(FALSE,nrow(PP_all))
names(PP_is_Nepal_dict) <- PP_all$Taxon
for (i in 1:length(Nepal_meta_data$Lane_id)) {
PP_is_Nepal_dict[Nepal_meta_data$Lane_id[i]] <- TRUE
}
Nepal_PP <- PP_all[PP_is_Nepal_dict[PP_all$Taxon],]
no_Nepal_PP <- length(unique(Nepal_PP$Cluster))
no_Nepal_PP
nrow(Nepal_PP)
nrow(PP_all$Taxon)
nrow(PP_all)
nrow(Nepal_meta_data)
length(which(PP_is_Nepal_dict))
Nepal_PP <- PP_all[which(PP_is_Nepal_dict[PP_all$Taxon]),]
nrow(Nepal_PP)
length(which(PP_is_Nepal_dict[PP_all$Taxon]))
length(which(PP_is_Nepal_dict))
length(PP_all$Taxon)
length(unique(PP_all$Taxon))
View(PP_all)
PP_all$Taxon[duplicated(PP_all$Taxon)]
PP_all <- read.csv(paste(path_to_data, "StrepPneumo_Nepal/GPS_PopPUNK/poppunk_clusters/poppunk_clusters_clusters.csv",sep = ""))
# remove appendix "_contigs_velvet"
remove_contigs_velvet <- function(str_with_app){
str_without_app <- strsplit(str_with_app, "_contigs_velvet", fixed = TRUE)[[1]][1]
str_without_app
}
PP_all$Taxon <- sapply(PP_all$Taxon, remove_contigs_velvet)
duplicated(PP_all$Taxon)
PP_all <- PP_all[-duplicated(PP_all$Taxon),]
nrow(PP_all)
length(unique(PP_all$Taxon))
PP_all <- read.csv(paste(path_to_data, "StrepPneumo_Nepal/GPS_PopPUNK/poppunk_clusters/poppunk_clusters_clusters.csv",sep = ""))
# remove appendix "_contigs_velvet"
remove_contigs_velvet <- function(str_with_app){
str_without_app <- strsplit(str_with_app, "_contigs_velvet", fixed = TRUE)[[1]][1]
str_without_app
}
PP_all$Taxon <- sapply(PP_all$Taxon, remove_contigs_velvet)
-duplicated(PP_all$Taxon)
PP_all <- PP_all[!duplicated(PP_all$Taxon),]
length(unique(PP_all$Taxon))
length((PP_all$Taxon))
PP_taxon_ind_dict <- 1:nrow(PP_all)
names(PP_taxon_ind_dict) <- PP_all$Taxon
PP_is_Nepal_dict <- rep(FALSE,nrow(PP_all))
names(PP_is_Nepal_dict) <- PP_all$Taxon
for (i in 1:length(Nepal_meta_data$Lane_id)) {
PP_is_Nepal_dict[Nepal_meta_data$Lane_id[i]] <- TRUE
}
Nepal_PP <- PP_all[which(PP_is_Nepal_dict[PP_all$Taxon]),]
nrow(Nepal_PP)
no_Nepal_PP <- length(unique(Nepal_PP$Cluster))
no_Nepal_PP
Nepal_seq_clusters_dict <- Nepal_PP$Cluster
names(Nepal_seq_clusters_dict) <- Nepal_PP$Taxon
Nepal_meta_dataPP <- Nepal_meta_data[sort(Nepal_meta_IDtoInd[Nepal_PP$Taxon]),]
for (i in 2:nrow(Nepal_meta_dataPP)) {
if (Nepal_meta_dataPP$Phenotypic_serotype[i] == "") {
Nepal_meta_dataPP$Phenotypic_serotype[i] <- "NT"
}
}
rownames(Nepal_meta_dataPP) <- 1:nrow(Nepal_meta_dataPP)
Nepal_meta_IDtoIndPP <- 1:nrow(Nepal_meta_dataPP)
names(Nepal_meta_IDtoIndPP) <- Nepal_meta_dataPP$Lane_id
nrow(Nepal_meta_dataPP)
saveRDS(Nepal_meta_dataPP, "Nepal_meta_dataPP.rds")
# Add Serotype Information
Nepal_Serotype_dict <- Nepal_meta_dataPP$Phenotypic_serotype
names(Nepal_Serotype_dict) <- Nepal_meta_dataPP$Lane_id
Nepal_PP$Serotype <- Nepal_Serotype_dict[Nepal_PP$Taxon]
Nepal_meta_data$Phenotypic_serotype["48081_2#36"]
head(Nepal_meta_data$Phenotypic_serotype)
head(Nepal_meta_data$In_silico_serotype)
# Add Serotype Information
Nepal_Serotype_dict <- Nepal_meta_dataPP$In_silico_serotype
names(Nepal_Serotype_dict) <- Nepal_meta_dataPP$Lane_id
Nepal_PP$Serotype <- Nepal_Serotype_dict[Nepal_PP$Taxon]
Nepal_meta_dataPP$Phenotypic_serotype
Nepal_meta_dataPP$In_silico_serotype
unique(Nepal_meta_dataPP$In_silico_serotype)
length(which(Nepal_meta_dataPP$In_silico_serotype == "UNTYPABLE"))
length(which(Nepal_meta_dataPP$In_silico_serotype == "COVERAGE TOO LOW"))
length(which(Nepal_meta_dataPP$In_silico_serotype == "NT"))
View(Nepal_meta_dataPP)
View(Nepal_meta_dataPP)
length(which(Nepal_meta_dataPP$In_silico_serotype == "SWISS_NT"))
Nepal_meta_dataPP$Lane_id[which(Nepal_meta_dataPP$In_silico_serotype == "SWISS_NT")]
Nepal_PP[which(Nepal_PP$Taxon=="48525_1#50"),]
length(which(Nepal_meta_data$In_silico_serotype == "UNTYPABLE"))
length(which(Nepal_meta_data$In_silico_serotype == "COVERAGE TOO LOW"))
length(which(Nepal_meta_data$In_silico_serotype == "SWISS_NT"))
# make dictionary to know which ones to include for Nepal_PP and Nepal_meta_dataPP
Nepal_has_serotype <- rep(TRUE, nrow(Nepal_meta_data))
names(Nepal_has_serotype) <- Nepal_meta_data$Lane_id
Nepal_meta_data$Lane_id[which(Nepal_meta_data$In_silico_serotype == "SWISS_NT")]
Nepal_has_serotype[Nepal_meta_data$Lane_id[which(Nepal_meta_data$In_silico_serotype == "SWISS_NT")]]
Nepal_has_serotype[Nepal_meta_data$Lane_id[which(Nepal_meta_data$In_silico_serotype == "SWISS_NT")]] <- FALSE
Nepal_has_serotype[Nepal_meta_data$Lane_id[which(Nepal_meta_data$In_silico_serotype == "SWISS_NT")]]
# make dictionary to know which ones to include for Nepal_PP and Nepal_meta_dataPP
Nepal_has_serotype <- rep(TRUE, nrow(Nepal_meta_data))
names(Nepal_has_serotype) <- Nepal_meta_data$Lane_id
Nepal_has_serotype[Nepal_meta_data$Lane_id[which(Nepal_meta_data$In_silico_serotype == "UNTYPABLE")]] <- FALSE
Nepal_has_serotype[Nepal_meta_data$Lane_id[which(Nepal_meta_data$In_silico_serotype == "COVERAGE TOO LOW")]] <- FALSE
Nepal_has_serotype[Nepal_meta_data$Lane_id[which(Nepal_meta_data$In_silico_serotype == "SWISS_NT")]] <- FALSE
length(which(Nepal_has_serotype==FALSE))
163 + 29 + 26
PP_all <- read.csv(paste(path_to_data, "StrepPneumo_Nepal/GPS_PopPUNK/poppunk_clusters/poppunk_clusters_clusters.csv",sep = ""))
# remove appendix "_contigs_velvet"
remove_contigs_velvet <- function(str_with_app){
str_without_app <- strsplit(str_with_app, "_contigs_velvet", fixed = TRUE)[[1]][1]
str_without_app
}
PP_all$Taxon <- sapply(PP_all$Taxon, remove_contigs_velvet)
PP_all <- PP_all[!duplicated(PP_all$Taxon),]
PP_taxon_ind_dict <- 1:nrow(PP_all)
names(PP_taxon_ind_dict) <- PP_all$Taxon
PP_is_Nepal_dict <- rep(FALSE,nrow(PP_all))
names(PP_is_Nepal_dict) <- PP_all$Taxon
for (i in 1:length(Nepal_meta_data$Lane_id)) {
if(Nepal_has_serotype[i]){ # checks if we have serotype for this sequence and only includes it in PP dataset if yes
PP_is_Nepal_dict[Nepal_meta_data$Lane_id[i]] <- TRUE
}
}
Nepal_PP <- PP_all[which(PP_is_Nepal_dict[PP_all$Taxon]),]
no_Nepal_PP <- length(unique(Nepal_PP$Cluster))
no_Nepal_PP
nrow(Nepal_PP)
Nepal_seq_clusters_dict <- Nepal_PP$Cluster
names(Nepal_seq_clusters_dict) <- Nepal_PP$Taxon
View(Nepal_meta_data)
View(Nepal_meta_data)
unique(Nepal_meta_data$In_silico_serotype)
unique(Nepal_meta_data$Phenotypic_serotype)
length(which(Nepal_meta_data$Phenotypic_serotype=="_"))
length((Nepal_meta_data$Phenotypic_serotype))
length(which(Nepal_meta_data$Phenotypic_serotype=="NT" ))
Nepal_meta_data$Phenotypic_serotype[(which(Nepal_meta_data$Phenotypic_serotype=="_"))]
Nepal_meta_data$In_silico_serotype[(which(Nepal_meta_data$Phenotypic_serotype=="_"))]
# wait, I also have the phenotypic seroytype. I will use this one.
# and if it does not exist, use in silico and then see how many cases remain
Nepal_has_serotype2 <- rep(TRUE, nrow(Nepal_meta_data))
names(Nepal_has_serotype2) <- Nepal_meta_data$Lane_id
# wait, I also have the phenotypic seroytype. I will use this one.
# and if it does not exist, use in silico and then see how many cases remain
Nepal_has_serotype2 <- rep(FALSE, nrow(Nepal_meta_data))
names(Nepal_has_serotype2) <- Nepal_meta_data$Lane_id
which(Nepal_meta_data$Phenotypic_serotype != "_"
)
# wait, I also have the phenotypic seroytype. I will use this one.
# and if it does not exist, use in silico and then see how many cases remain
Nepal_has_serotype2 <- rep(FALSE, nrow(Nepal_meta_data))
names(Nepal_has_serotype2) <- Nepal_meta_data$Lane_id
Nepal_has_serotype2[Nepal_meta_data$Lane_id[which(Nepal_meta_data$Phenotypic_serotype != "_" & Nepal_meta_data$Phenotypic_serotype != "NT")]] <- TRUE
length(which(Nepal_has_serotype2==FALSE))
length(which(Nepal_meta_data$Phenotypic_serotype == "_"))
length(which(Nepal_meta_data$Phenotypic_serotype == "NT"))
108 + 1479
Nepal_has_serotype2[Nepal_meta_data$Lane_id[which(Nepal_meta_data$In_silico_serotype != "UNTYPABLE" & Nepal_meta_data$In_silico_serotype != "COVERAGE TOO LOW" & Nepal_meta_data$In_silico_serotype != "SWISS_NT")]] <- TRUE
length(which(Nepal_has_serotype2==FALSE))
163 + 29 + 26
# wait, I also have the phenotypic seroytype. I will use this one.
# and if it does not exist, use in silico and then see how many cases remain
Nepal_has_serotype <- rep(FALSE, nrow(Nepal_meta_data))
names(Nepal_has_serotype) <- Nepal_meta_data$Lane_id
Nepal_has_serotype[Nepal_meta_data$Lane_id[which(Nepal_meta_data$Phenotypic_serotype != "_" & Nepal_meta_data$Phenotypic_serotype != "NT")]] <- TRUE
Nepal_has_serotype[Nepal_meta_data$Lane_id[which(Nepal_meta_data$In_silico_serotype != "UNTYPABLE" & Nepal_meta_data$In_silico_serotype != "COVERAGE TOO LOW" & Nepal_meta_data$In_silico_serotype != "SWISS_NT")]] <- TRUE
# store values for those serotypes
Nepal_Serotype_dict <- rep(NA, nrow(Nepal_meta_data))
names(Nepal_Serotype_dict) <- Nepal_meta_data$Lane_id
Nepal_Serotype_dict[Nepal_meta_data$Lane_id[which(Nepal_meta_data$Phenotypic_serotype != "_" & Nepal_meta_data$Phenotypic_serotype != "NT")]] <- Nepal_meta_data$Phenotypic_serotype[which(Nepal_meta_data$Phenotypic_serotype != "_" & Nepal_meta_data$Phenotypic_serotype != "NT")]
Nepal_Serotype_dict[Nepal_meta_data$Lane_id[which(Nepal_meta_data$In_silico_serotype != "UNTYPABLE" & Nepal_meta_data$In_silico_serotype != "COVERAGE TOO LOW" & Nepal_meta_data$In_silico_serotype != "SWISS_NT")]] <- Nepal_meta_data$In_silico_serotype[which(Nepal_meta_data$In_silico_serotype != "UNTYPABLE" & Nepal_meta_data$In_silico_serotype != "COVERAGE TOO LOW" & Nepal_meta_data$In_silico_serotype != "SWISS_NT")]
unique(Nepal_Serotype_dict)
unique(Nepal_meta_data$In_silico_serotype)
# wait, I also have the phenotypic seroytype. I will use this one.
# and if it does not exist, use in silico and then see how many cases remain
Nepal_has_serotype <- rep(FALSE, nrow(Nepal_meta_data))
names(Nepal_has_serotype) <- Nepal_meta_data$Lane_id
Nepal_has_serotype[Nepal_meta_data$Lane_id[which(Nepal_meta_data$Phenotypic_serotype != "_" & Nepal_meta_data$Phenotypic_serotype != "NT")]] <- TRUE
Nepal_has_serotype[Nepal_meta_data$Lane_id[which(Nepal_meta_data$In_silico_serotype != "UNTYPABLE" & Nepal_meta_data$In_silico_serotype != "COVERAGE TOO LOW" & Nepal_meta_data$In_silico_serotype != "SWISS_NT" & Nepal_meta_data$In_silico_serotype != "ALTERNATIVE_ALIB_NT")]] <- TRUE
length(which(Nepal_has_serotype==FALSE))
length(which(Nepal_meta_data$In_silico_serotype == "ALTERNATIVE_ALIB_NT"))
# wait, I also have the phenotypic seroytype. I will use this one.
# and if it does not exist, use in silico and then see how many cases remain
Nepal_has_serotype <- rep(FALSE, nrow(Nepal_meta_data))
names(Nepal_has_serotype) <- Nepal_meta_data$Lane_id
Nepal_has_serotype[Nepal_meta_data$Lane_id[which(Nepal_meta_data$Phenotypic_serotype != "_" & Nepal_meta_data$Phenotypic_serotype != "NT")]] <- TRUE
Nepal_has_serotype[Nepal_meta_data$Lane_id[which(Nepal_meta_data$In_silico_serotype != "UNTYPABLE" & Nepal_meta_data$In_silico_serotype != "COVERAGE TOO LOW" & Nepal_meta_data$In_silico_serotype != "SWISS_NT" & Nepal_meta_data$In_silico_serotype != "ALTERNATIVE_ALIB_NT")]] <- TRUE
# store values for those serotypes
Nepal_Serotype_dict <- rep(NA, nrow(Nepal_meta_data))
names(Nepal_Serotype_dict) <- Nepal_meta_data$Lane_id
Nepal_Serotype_dict[Nepal_meta_data$Lane_id[which(Nepal_meta_data$Phenotypic_serotype != "_" & Nepal_meta_data$Phenotypic_serotype != "NT")]] <- Nepal_meta_data$Phenotypic_serotype[which(Nepal_meta_data$Phenotypic_serotype != "_" & Nepal_meta_data$Phenotypic_serotype != "NT")]
Nepal_Serotype_dict[Nepal_meta_data$Lane_id[which(Nepal_meta_data$In_silico_serotype != "UNTYPABLE" & Nepal_meta_data$In_silico_serotype != "COVERAGE TOO LOW" & Nepal_meta_data$In_silico_serotype != "SWISS_NT"  & Nepal_meta_data$In_silico_serotype != "ALTERNATIVE_ALIB_NT")]] <- Nepal_meta_data$In_silico_serotype[which(Nepal_meta_data$In_silico_serotype != "UNTYPABLE" & Nepal_meta_data$In_silico_serotype != "COVERAGE TOO LOW" & Nepal_meta_data$In_silico_serotype != "SWISS_NT" & Nepal_meta_data$In_silico_serotype != "ALTERNATIVE_ALIB_NT")]
length(which(Nepal_Serotype_dict==NA))
# store values for those serotypes
Nepal_Serotype_dict <- rep(NA, nrow(Nepal_meta_data))
names(Nepal_Serotype_dict) <- Nepal_meta_data$Lane_id
length(which(Nepal_Serotype_dict==NA))
length(is.na.data.frame(Nepal_Serotype_dict))
Nepal_Serotype_dict[Nepal_meta_data$Lane_id[which(Nepal_meta_data$Phenotypic_serotype != "_" & Nepal_meta_data$Phenotypic_serotype != "NT")]] <- Nepal_meta_data$Phenotypic_serotype[which(Nepal_meta_data$Phenotypic_serotype != "_" & Nepal_meta_data$Phenotypic_serotype != "NT")]
Nepal_Serotype_dict[Nepal_meta_data$Lane_id[which(Nepal_meta_data$In_silico_serotype != "UNTYPABLE" & Nepal_meta_data$In_silico_serotype != "COVERAGE TOO LOW" & Nepal_meta_data$In_silico_serotype != "SWISS_NT"  & Nepal_meta_data$In_silico_serotype != "ALTERNATIVE_ALIB_NT")]] <- Nepal_meta_data$In_silico_serotype[which(Nepal_meta_data$In_silico_serotype != "UNTYPABLE" & Nepal_meta_data$In_silico_serotype != "COVERAGE TOO LOW" & Nepal_meta_data$In_silico_serotype != "SWISS_NT" & Nepal_meta_data$In_silico_serotype != "ALTERNATIVE_ALIB_NT")]
length(is.na.data.frame(Nepal_Serotype_dict))
head(Nepal_Serotype_dict)
(is.na.data.frame(Nepal_Serotype_dict))
sum(is.na(Nepal_Serotype_dict))
PP_all <- read.csv(paste(path_to_data, "StrepPneumo_Nepal/GPS_PopPUNK/poppunk_clusters/poppunk_clusters_clusters.csv",sep = ""))
# remove appendix "_contigs_velvet"
remove_contigs_velvet <- function(str_with_app){
str_without_app <- strsplit(str_with_app, "_contigs_velvet", fixed = TRUE)[[1]][1]
str_without_app
}
PP_all$Taxon <- sapply(PP_all$Taxon, remove_contigs_velvet)
PP_all <- PP_all[!duplicated(PP_all$Taxon),]
PP_taxon_ind_dict <- 1:nrow(PP_all)
names(PP_taxon_ind_dict) <- PP_all$Taxon
PP_is_Nepal_dict <- rep(FALSE,nrow(PP_all))
names(PP_is_Nepal_dict) <- PP_all$Taxon
for (i in 1:length(Nepal_meta_data$Lane_id)) {
if(Nepal_has_serotype[i]){ # checks if we have serotype for this sequence and only includes it in PP dataset if yes
PP_is_Nepal_dict[Nepal_meta_data$Lane_id[i]] <- TRUE
}
}
Nepal_PP <- PP_all[which(PP_is_Nepal_dict[PP_all$Taxon]),]
no_Nepal_PP <- length(unique(Nepal_PP$Cluster))
no_Nepal_PP
nrow(Nepal_PP)
Nepal_seq_clusters_dict <- Nepal_PP$Cluster
names(Nepal_seq_clusters_dict) <- Nepal_PP$Taxon
Nepal_meta_dataPP <- Nepal_meta_data[sort(Nepal_meta_IDtoInd[Nepal_PP$Taxon]),]
Nepal_meta_dataPP <- Nepal_meta_data[sort(Nepal_meta_IDtoInd[Nepal_PP$Taxon]),1]
Nepal_meta_dataPP <- Nepal_meta_data[sort(Nepal_meta_IDtoInd[Nepal_PP$Taxon]),"Lane_id"]
colnames(Nepal_meta_dataPP) <- "Lane_id"
ncol(Nepal_meta_dataPP)
Nepal_meta_dataPP$Lane_id <- Nepal_meta_data[sort(Nepal_meta_IDtoInd[Nepal_PP$Taxon]),"Lane_id"]
Nepal_meta_dataPP <- Nepal_meta_data[sort(Nepal_meta_IDtoInd[Nepal_PP$Taxon]),"Lane_id"]
Nepal_meta_dataPP[1]
Nepal_meta_dataPP <- Nepal_meta_data[sort(Nepal_meta_IDtoInd[Nepal_PP$Taxon]),c("Lane_id", "Year")]
Nepal_meta_dataPP$Serotype <- Nepal_Serotype_dict[Nepal_meta_dataPP$Lane_id]
which(Nepal_meta_data$In_silico_serotype=="SEROGROUP 24")
which(Nepal_meta_data$Phenotypic_serotype=="SEROGROUP 24")
Nepal_meta_data$Phenotypic_serotype[which(Nepal_meta_data$In_silico_serotype=="SEROGROUP 24")]
# store values for those serotypes
Nepal_Serotype_dict <- rep(NA, nrow(Nepal_meta_data))
names(Nepal_Serotype_dict) <- Nepal_meta_data$Lane_id
Nepal_Serotype_dict[Nepal_meta_data$Lane_id[which(Nepal_meta_data$In_silico_serotype != "UNTYPABLE" & Nepal_meta_data$In_silico_serotype != "COVERAGE TOO LOW" & Nepal_meta_data$In_silico_serotype != "SWISS_NT"  & Nepal_meta_data$In_silico_serotype != "ALTERNATIVE_ALIB_NT")]] <- Nepal_meta_data$In_silico_serotype[which(Nepal_meta_data$In_silico_serotype != "UNTYPABLE" & Nepal_meta_data$In_silico_serotype != "COVERAGE TOO LOW" & Nepal_meta_data$In_silico_serotype != "SWISS_NT" & Nepal_meta_data$In_silico_serotype != "ALTERNATIVE_ALIB_NT")]
Nepal_Serotype_dict[Nepal_meta_data$Lane_id[which(Nepal_meta_data$Phenotypic_serotype != "_" & Nepal_meta_data$Phenotypic_serotype != "NT")]] <- Nepal_meta_data$Phenotypic_serotype[which(Nepal_meta_data$Phenotypic_serotype != "_" & Nepal_meta_data$Phenotypic_serotype != "NT")]
Nepal_meta_dataPP <- Nepal_meta_data[sort(Nepal_meta_IDtoInd[Nepal_PP$Taxon]),c("Lane_id", "Year")]
Nepal_meta_dataPP$Serotype <- Nepal_Serotype_dict[Nepal_meta_dataPP$Lane_id]
length(which(Nepal_meta_dataPP$Serotype == "Serogroup 24"))
length(which(Nepal_meta_dataPP$Serotype == "SEROGROUP 24"))
rownames(Nepal_meta_dataPP) <- 1:nrow(Nepal_meta_dataPP)
Nepal_meta_IDtoIndPP <- 1:nrow(Nepal_meta_dataPP)
names(Nepal_meta_IDtoIndPP) <- Nepal_meta_dataPP$Lane_id
saveRDS(Nepal_meta_dataPP, "Nepal_meta_dataPP.rds")
Nepal_PP$Serotype <- Nepal_Serotype_dict[Nepal_PP$Taxon]
View(Nepal_PP)
saveRDS(Nepal_PP,"Nepal_PP.rds")
### continue working here
Nepal_ggCaller <- read.csv(paste(path_to_data, "StrepPneumo_Nepal/GPS_ggCaller/gene_presence_absence.csv", sep = ""), header=FALSE)
# converting the gene presence absence matrix into a boolean df (0 = gene not present, 1 = gene present)
convert_to_bool <- function(x){
if (x=="") 0 else 1
}
Nepal_ggCaller_bool <- Nepal_ggCaller[,c(-2,-3)]
Nepal_ggCaller_bool[-1,-1] <- apply(Nepal_ggCaller_bool[-1,-1],c(1,2), convert_to_bool)
rm(Navajo_PPxSero_mcmc)
rm(UK_PPxSero_mcmc)
# converting the gene presence absence matrix into a boolean df (0 = gene not present, 1 = gene present)
convert_to_bool <- function(x){
if (x=="") 0 else 1
}
Nepal_ggCaller_bool <- Nepal_ggCaller[,c(-2,-3)]
Nepal_ggCaller_bool[-1,-1] <- apply(Nepal_ggCaller_bool[-1,-1],c(1,2), convert_to_bool)
rm(UK_PPxSero2vacc)
rm(Mass_PPxSero_mcmc)
Nepal_ggCaller_bool <- Nepal_ggCaller[,c(-2,-3)]
Nepal_ggCaller_bool[-1,-1] <- apply(Nepal_ggCaller_bool[-1,-1],c(1,2), convert_to_bool)
Nepal_ggCaller_bool[1,-1] <- sapply(Nepal_ggCaller_bool[1,-1], strsplit, split = ".contigs_velvet") # remove contigs appendix
colnames(Nepal_ggCaller_bool) <- Nepal_ggCaller_bool[1,]
# filter ggCaller results by the ones
Nepal_ggCallerPP_bool <- data.frame(matrix(0, nrow = nrow(Nepal_ggCaller_bool), ncol = length(Nepal_PP$Taxon)+1))
Nepal_ggCallerPP_bool[-1,-1] <- Nepal_ggCaller_bool[-1,c(Nepal_PP$Taxon)]
colnames(Nepal_ggCallerPP_bool) <- c("Gene",Nepal_PP$Taxon)
Nepal_ggCallerPP_bool[1,] <- c("Gene",Nepal_PP$Taxon)
Nepal_ggCallerPP_bool[,1] <- Nepal_ggCaller_bool[,1]
saveRDS(Nepal_ggCallerPP_bool, "Nepal_ggCaller_bool.rds")
