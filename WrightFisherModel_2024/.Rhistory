points(which(best_best_vec[order(ggC_delta_data2)]==1),sort(ggC_delta_data2)[which(best_best_vec[order(ggC_delta_data2)]==1)], col = "#56B4E9")
plot(sort(ggC_delta_data2),col = "#E69F00", type = "l")
points(which(best_best_vec[order(ggC_delta_data2)]==1),sort(ggC_delta_data2)[which(best_best_vec[order(ggC_delta_data2)]==1)], col = "#56B4E9")
plot(sort(ggC_delta_data2), type = "l")
points(which(best_best_vec[order(ggC_delta_data2)]==1),sort(ggC_delta_data2)[which(best_best_vec[order(ggC_delta_data2)]==1)], col = "#56B4E9")
plot(sort(ggC_delta_data3), type = "l")
points(which(best_best_vec[order(ggC_delta_data3)]==1),sort(ggC_delta_data3)[which(best_best_vec[order(ggC_delta_data3)]==1)], col = "red")
0.38 * 1774
abline(v=0.38 * 1774)
abline(v=0.3765 * 1774)
plot(sort(ggC_delta_data3), type = "l")
points(which(best_best_vec[order(ggC_delta_data3)]==1),sort(ggC_delta_data3)[which(best_best_vec[order(ggC_delta_data3)]==1)], col = "red")
abline(v=0.3765 * 1774)
plot(sort(ggC_delta_data2), type = "l")
points(which(best_best_vec[order(ggC_delta_data2)]==1),sort(ggC_delta_data2)[which(best_best_vec[order(ggC_delta_data2)]==1)], col = "red")
abline(v=0.3765 * 1774)
plot(sort(ggC_delta_data3),col = "#E69F00")
points(ggC_delta_data3[order(ggC_delta_data2)], col = "#56B4E9")
plot(sort(ggC_delta_data3),col = "#E69F00")
points(ggC_delta_data3[order(ggC_delta_data2)], col = "#56B4E9")
legend(0, 0.07, legend=c("Pre - Peri_Post", "Pre - Post"),
col=c("#E69F00", "#56B4E9"), lty=1:2, cex=0.8)
legend(0, 0.07, legend=c("Pre - Peri_Post", "Pre - Post"),
col=c("#E69F00", "#56B4E9"), lty=1, cex=0.8)
legend(0, 0.07, legend=c("Pre - Peri_Post", "Pre - Post"),
col=c("#E69F00", "#56B4E9"), lty=1, cex=1.2)
plot(sort(ggC_delta_data3),col = "#E69F00")
points(ggC_delta_data3[order(ggC_delta_data2)], col = "#56B4E9")
legend(0, 0.07, legend=c("Peri_Post - Pre", "Post - Pre"),
col=c("#E69F00", "#56B4E9"), lty=1, cex=1.2)
max(best_10_perc_vec_df$X1)
colMeans(best_10_perc_vec_df[which(best_10_perc_vec_df$X1>(max(best_10_perc_vec_df$X1) + (min(best_10_perc_vec_df$X1) - max(best_10_perc_vec_df$X1))/10)
)
)
colMeans(best_10_perc_vec_df[which(best_10_perc_vec_df$X1>(max(best_10_perc_vec_df$X1) + (min(best_10_perc_vec_df$X1) - max(best_10_perc_vec_df$X1))/10)),-1]
)
sum(best_best_vec)/length(best_best_vec)
results_path_25 <- "/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_04_25/"
ggCPP_det_mcmc2_4param <- readRDS(paste(results_path_25, "4param_ggCaller_PopPUNK_det_pmcmc_run2.rds",sep=""))
ggCPP_det_mcmc2_4param_coda <- coda::as.mcmc(cbind(ggCPP_det_mcmc2_4param$probabilities, ggCPP_det_mcmc2_4param$pars))
plot(ggCPP_det_mcmc2_4param_coda)
ggCPP_det_mcmc2_4param$probabilities[,2]
max(ggCPP_det_mcmc2_4param$probabilities[,2])
#FindGenes_sa2 <- optim(fn=fit_FindGenes_ggCPP, par=start_vect, gr=nextfun, method="SANN",
#                       control=list(maxit=10,fnscale=1,trace=10))
plot(rowSums(simAnn_results))
optim(fn=fit_FindGenes_ggCPP, par=best_best_vec, gr=nextfun, method="SANN",
control=list(maxit=1000,fnscale=1,trace=10))
### load model
WF <- odin.dust::odin_dust("NFDS_Model_FindGenes.R")
optim(fn=fit_FindGenes_ggCPP, par=best_best_vec, gr=nextfun, method="SANN",
control=list(maxit=1000,fnscale=1,trace=10))
fitting_closure_fl <- function(all_other_params, data1, data2){
null_fit_dfoptim_fl <- function(fit_params){
unique_genes <- setdiff(1:(nrow(ggCPP_intermed_gene_presence_absence_consensus)-1), names(group_gene_cl))
rnd_vect_full <- rep(0, (nrow(ggCPP_intermed_gene_presence_absence_consensus)-1))
rnd_vect_full[unique_genes] <- fit_params
rnd_vect_full[as.integer(names(group_gene_cl))] <- rnd_vect_full[unname(group_gene_cl)]
params$delta_bool = rnd_vect_full
WFmodel_ggCPP <- WF$new(pars = params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(WFmodel_ggCPP$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel_ggCPP$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
- combined_compare(x[,1,37],data1) - combined_compare(x[,1,73],data2)
}
}
fitting_closure_fl <- function(all_other_params, data1, data2){
null_fit_dfoptim_fl <- function(fit_params){
rnd_vect_full <- fit_params
params$delta_bool = rnd_vect_full
WFmodel_ggCPP <- WF$new(pars = params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(WFmodel_ggCPP$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel_ggCPP$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
- combined_compare(x[,1,37],data1) - combined_compare(x[,1,73],data2)
}
}
FindGenes_ggCPP_params <- list(dt = 1/36, species_no = PP_mass_clusters,  gene_no = nrow(ggCPP_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(PP_model_start_pop), Pop_eq = as.double(PP_model_start_pop), capacity = sum(PP_model_start_pop), Genotypes = ggCPP_intermed_gene_presence_absence_consensus_matrix, sigma_f = 0.3090376, sigma_w = 0, prop_f = 1, m = 0.03104461, migVec = PP_avg_cluster_freq, vaccTypes = PP_mass_VT, v = 0.15977862, vacc_time = 0)
fit_FindGenes_ggCPP <- fitting_closure(FindGenes_ggCPP_params, PP_mass_cluster_freq_2, PP_mass_cluster_freq_3)
FindGenes_sa <- optim_sa(fun = fit_FindGenes_ggCPP, start = best_best_vec, maximization = TRUE, trace = TRUE,lower=rep(0,length(start_vect)), upper=rep(1,length(start_vect)))
optim(fn=fit_FindGenes_ggCPP, par=best_best_vec, gr=nextfun, method="SANN",
control=list(maxit=1000,fnscale=1,trace=10))
FindGenes_ggCPP_params <- list(dt = 1/36, species_no = PP_mass_clusters,  gene_no = nrow(ggCPP_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(PP_model_start_pop), Pop_eq = as.double(PP_model_start_pop), capacity = sum(PP_model_start_pop), Genotypes = ggCPP_intermed_gene_presence_absence_consensus_matrix, sigma_f = 0.3090376, sigma_w = 0, prop_f = 1, m = 0.03104461, migVec = PP_avg_cluster_freq, vaccTypes = PP_mass_VT, v = 0.15977862, vacc_time = 0)
fit_FindGenes_ggCPP <- fitting_closure_fl(FindGenes_ggCPP_params, PP_mass_cluster_freq_2, PP_mass_cluster_freq_3)
optim(fn=fit_FindGenes_ggCPP, par=best_best_vec, gr=nextfun, method="SANN",
control=list(maxit=1000,fnscale=1,trace=10))
### Likelihood
ll_pois <- function(obs, model) {
exp_noise <- 1e6
if (is.na(obs)) {
# Creates vector of zeros in ll with same length, if no data
ll_obs <- numeric(length(model))
} else {
lambda <- model + rexp(n = length(model), rate = exp_noise)
ll_obs <- dpois(x = obs, lambda = lambda, log = TRUE)
}
ll_obs
}
combined_compare <- function(state, observed, pars = NULL) {
result <- 0
#data_size <- sum(mass_cluster_freq_1)
#model_size = 15000
data_size <- sum(observed)
model_size = sum(state)
for (i in 1:length(observed)){
result <- result + ll_pois(observed[i], state[i]/model_size * data_size)
}
result
}
FindGenes_ggCPP_params <- list(dt = 1/36, species_no = PP_mass_clusters,  gene_no = nrow(ggCPP_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(PP_model_start_pop), Pop_eq = as.double(PP_model_start_pop), capacity = sum(PP_model_start_pop), Genotypes = ggCPP_intermed_gene_presence_absence_consensus_matrix, sigma_f = 0.3090376, sigma_w = 0, prop_f = 1, m = 0.03104461, migVec = PP_avg_cluster_freq, vaccTypes = PP_mass_VT, v = 0.15977862, vacc_time = 0)
fit_FindGenes_ggCPP <- fitting_closure_fl(FindGenes_ggCPP_params, PP_mass_cluster_freq_2, PP_mass_cluster_freq_3)
optim(fn=fit_FindGenes_ggCPP, par=best_best_vec, gr=nextfun, method="SANN",
control=list(maxit=1000,fnscale=1,trace=10))
length(best_best_vec)
PopPUNK_clusters <- readRDS("PopPUNK_clusters.rds")
ggCPP_intermed_gene_presence_absence_consensus <- readRDS(file = "ggCPP_intermed_gene_presence_absence_consensus.rds")
ggCPP_intermed_gene_presence_absence_consensus_matrix <- sapply(ggCPP_intermed_gene_presence_absence_consensus[-1,-1],as.double)
PP_model_start_pop <- readRDS(file = "PP_model_start_pop.rds")
ggC_delta_ranking <- readRDS(file = "ggC_delta_ranking.rds")
PP_mass_cluster_freq_1 <- readRDS(file = "PP_mass_cluster_freq_1.rds")
PP_mass_cluster_freq_2 <- readRDS(file = "PP_mass_cluster_freq_2.rds")
PP_mass_cluster_freq_3 <- readRDS(file = "PP_mass_cluster_freq_3.rds")
PP_mass_VT <- readRDS(file = "PP_mass_VT.rds")
PP_mass_clusters <- length(unique(PopPUNK_clusters$Cluster))
PP_avg_cluster_freq <- rep(1/PP_mass_clusters, PP_mass_clusters)
fitting_closure_fl <- function(all_other_params, data1, data2){
null_fit_dfoptim_fl <- function(fit_params){
rnd_vect_full <- fit_params
params$delta_bool = rnd_vect_full
WFmodel_ggCPP <- WF$new(pars = params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(WFmodel_ggCPP$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel_ggCPP$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
- combined_compare(x[,1,37],data1) - combined_compare(x[,1,73],data2)
}
}
FindGenes_ggCPP_params <- list(dt = 1/36, species_no = PP_mass_clusters,  gene_no = nrow(ggCPP_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(PP_model_start_pop), Pop_eq = as.double(PP_model_start_pop), capacity = sum(PP_model_start_pop), Genotypes = ggCPP_intermed_gene_presence_absence_consensus_matrix, sigma_f = 0.3090376, sigma_w = 0, prop_f = 1, m = 0.03104461, migVec = PP_avg_cluster_freq, vaccTypes = PP_mass_VT, v = 0.15977862, vacc_time = 0)
fit_FindGenes_ggCPP <- fitting_closure_fl(FindGenes_ggCPP_params, PP_mass_cluster_freq_2, PP_mass_cluster_freq_3)
optim(fn=fit_FindGenes_ggCPP, par=best_best_vec, gr=nextfun, method="SANN",
control=list(maxit=1000,fnscale=1,trace=10))
FindGenes_sa <- optim_sa(fun = fit_FindGenes_ggCPP, start = best_best_vec, maximization = TRUE, trace = TRUE,lower=rep(0,length(start_vect)), upper=rep(1,length(start_vect)))
### Try finding optimal gene set using simulated annealing
library(optimization)
FindGenes_sa <- optim_sa(fun = fit_FindGenes_ggCPP, start = best_best_vec, maximization = TRUE, trace = TRUE,lower=rep(0,length(start_vect)), upper=rep(1,length(start_vect)))
nextfun <- function(x) rbinom(nrow(ggCPP_intermed_gene_presence_absence_consensus)-1  ,1,runif(1))
optim(fn=fit_FindGenes_ggCPP, par=best_best_vec, gr=nextfun, method="SANN",
control=list(maxit=1000,fnscale=1,trace=10))
rbinom(nrow(ggCPP_intermed_gene_presence_absence_consensus)-1  ,1,runif(1))
rbinom(nrow(ggCPP_intermed_gene_presence_absence_consensus)-1  ,1,runif(1))
rbinom(nrow(ggCPP_intermed_gene_presence_absence_consensus)-1  ,1,0.1)
nextfun <- function(x) rbinom(nrow(ggCPP_intermed_gene_presence_absence_consensus)-1  ,1,0.1)
optim(fn=fit_FindGenes_ggCPP, par=best_best_vec, gr=nextfun, method="SANN",
control=list(maxit=1000,fnscale=1,trace=10))
combined_compare(simMeanggCPP2,PP_mass_cluster_freq_2)
combined_compare(simMeanggCPP3,PP_mass_cluster_freq_3)
combined_compare(simMeanggCPP2,PP_mass_cluster_freq_2) + combined_compare(simMeanggCPP3,PP_mass_cluster_freq_3)
- combined_compare(x[,1,37],data1) - combined_compare(x[,1,73],data2)
- combined_compare(x[,1,37],PP_mass_cluster_freq_2) - combined_compare(x[,1,73],PP_mass_cluster_freq_3)
combined_compare(x[,1,37],PP_mass_cluster_freq_2)
combined_compare(x[,1,73],PP_mass_cluster_freq_3)
best_best_vec
FindGenes_sa3 <- optim(fn=fit_FindGenes_ggCPP, par=best_best_vec, gr=nextfun, method="SANN",
control=list(maxit=1000,fnscale=1,trace=10))
FindGenes_sa3$par
test_gene_vec(FindGenes_sa3$par)
test_gene_vec(best_best_vec)
FindGenes_sa3 <- optim(fn=fit_FindGenes_ggCPP, par=best_best_vec, gr=nextfun, method="SANN",
control=list(maxit=5000,fnscale=1,trace=10))
fitting_closure_fl <- function(all_other_params, data1, data2){
null_fit_dfoptim_fl <- function(fit_params){
rnd_vect_full <- fit_params
params$delta_bool = rnd_vect_full
WFmodel_ggCPP <- WF$new(pars = params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(WFmodel_ggCPP$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel_ggCPP$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
- combined_compare(x[,1,36],data1) - combined_compare(x[,1,72],data2)
}
}
FindGenes_ggCPP_params <- list(dt = 1/36, species_no = PP_mass_clusters,  gene_no = nrow(ggCPP_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(PP_model_start_pop), Pop_eq = as.double(PP_model_start_pop), capacity = sum(PP_model_start_pop), Genotypes = ggCPP_intermed_gene_presence_absence_consensus_matrix, sigma_f = 0.3090376, sigma_w = 0, prop_f = 1, m = 0.03104461, migVec = PP_avg_cluster_freq, vaccTypes = PP_mass_VT, v = 0.15977862, vacc_time = 0)
fit_FindGenes_ggCPP <- fitting_closure_fl(FindGenes_ggCPP_params, PP_mass_cluster_freq_2, PP_mass_cluster_freq_3)
nextfun <- function(x) rbinom(nrow(ggCPP_intermed_gene_presence_absence_consensus)-1  ,1,0.1)
FindGenes_sa3 <- optim(fn=fit_FindGenes_ggCPP, par=best_best_vec, gr=nextfun, method="SANN",
control=list(maxit=2000,fnscale=1,trace=10))
WFmodel_ggCPP$run(1)
WFmodel_ggCPP <- WF$new(pars = params_ggCPP,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
WFmodel_ggCPP$run(1)
WFmodel_ggCPP$run(36)
WFmodel_ggCPP$run(37)
WFmodel_ggCPP$run(72)
fitting_closure_fl <- function(all_other_params, data1, data2){
null_fit_dfoptim_fl <- function(fit_params){
rnd_vect_full <- fit_params
params$delta_bool = rnd_vect_full
WFmodel_ggCPP <- WF$new(pars = params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
#n_particles <- 10L
#n_times <- 73
#x <- array(NA, dim = c(WFmodel_ggCPP$info()$len, n_particles, n_times))
#for (t in seq_len(n_times)) {
#  x[ , , t] <- WFmodel_ggCPP$run(t)
#}
#time <- x[1, 1, ]
#x <- x[-1, , ]
simMeanggCPP2 <- rowMeans(WFmodel_ggCPP$run(36)[-1,])
simMeanggCPP3 <- rowMeans(WFmodel_ggCPP$run(72)[-1,])
- combined_compare(simMeanggCPP2,data1) - combined_compare(simMeanggCPP3,data2)
#- combined_compare(x[,1,37],data1) - combined_compare(x[,1,73],data2)
}
}
FindGenes_ggCPP_params <- list(dt = 1/36, species_no = PP_mass_clusters,  gene_no = nrow(ggCPP_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(PP_model_start_pop), Pop_eq = as.double(PP_model_start_pop), capacity = sum(PP_model_start_pop), Genotypes = ggCPP_intermed_gene_presence_absence_consensus_matrix, sigma_f = 0.3090376, sigma_w = 0, prop_f = 1, m = 0.03104461, migVec = PP_avg_cluster_freq, vaccTypes = PP_mass_VT, v = 0.15977862, vacc_time = 0)
fit_FindGenes_ggCPP <- fitting_closure_fl(FindGenes_ggCPP_params, PP_mass_cluster_freq_2, PP_mass_cluster_freq_3)
nextfun <- function(x) rbinom(nrow(ggCPP_intermed_gene_presence_absence_consensus)-1  ,1,0.1)
FindGenes_sa3 <- optim(fn=fit_FindGenes_ggCPP, par=best_best_vec, gr=nextfun, method="SANN",
control=list(maxit=2000,fnscale=1,trace=10))
merge_lists <- function(list1, list2){
out_len <- length(list1) + length(list2)
merged_list <- rep(0, out_len)
iter1 <- 1
iter2 <- 1
item_list1 <- list1[1]
item_list2 <- list2[1]
curr_len <- 0
while (curr_len < out_len) {
if(item_list1 <= item_list2){
merged_list[curr_len + 1] <- item_list1
iter1 <- iter1 + 1
item_list1 <- list1[iter1]
}
else{
merged_list[curr_len + 1] <- item_list2
iter2 <- iter2 + 1
item_list2 <- list2[iter2]
}
curr_len <- curr_len + 1
}
merged_list
}
merged_list(c(1,2,4),c(2,3,5))
merge_list(c(1,2,4),c(2,3,5))
merge_lists(c(1,2,4),c(2,3,5))
merge_lists <- function(list1, list2){
out_len <- length(list1) + length(list2)
merged_list <- rep(0, out_len)
iter1 <- 1
iter2 <- 1
item_list1 <- list1[1]
item_list2 <- list2[1]
print(item_list1)
print(item_list2)
curr_len <- 0
while (curr_len < out_len) {
if(item_list1 <= item_list2){
merged_list[curr_len + 1] <- item_list1
iter1 <- iter1 + 1
item_list1 <- list1[iter1]
}
else{
merged_list[curr_len + 1] <- item_list2
iter2 <- iter2 + 1
item_list2 <- list2[iter2]
}
curr_len <- curr_len + 1
}
merged_list
}
merge_lists(c(1,2,4),c(2,3,5))
c(2,3,5)[4]
merge_lists <- function(list1, list2){
out_len <- length(list1) + length(list2)
merged_list <- rep(0, out_len)
iter1 <- 1
iter2 <- 1
item_list1 <- list1[1]
item_list2 <- list2[1]
curr_len <- 0
while (curr_len < out_len) {
if(item_list1 <= item_list2 | iter2 > length(list2)){
merged_list[curr_len + 1] <- item_list1
iter1 <- iter1 + 1
item_list1 <- list1[iter1]
}
else{
merged_list[curr_len + 1] <- item_list2
iter2 <- iter2 + 1
item_list2 <- list2[iter2]
}
curr_len <- curr_len + 1
}
merged_list
}
merge_lists(c(1,2,4),c(2,3,5))
merge_lists <- function(list1, list2){
out_len <- length(list1) + length(list2)
merged_list <- rep(0, out_len)
iter1 <- 1
iter2 <- 1
item_list1 <- list1[1]
item_list2 <- list2[1]
curr_len <- 0
while (curr_len < out_len) {
if(item_list1 <= item_list2 || iter2 > length(list2)){
merged_list[curr_len + 1] <- item_list1
iter1 <- iter1 + 1
item_list1 <- list1[iter1]
}
else{
merged_list[curr_len + 1] <- item_list2
iter2 <- iter2 + 1
item_list2 <- list2[iter2]
}
curr_len <- curr_len + 1
}
merged_list
}
merge_lists(c(1,2,4),c(2,3,5))
is.na(c(1,2,4)[4])
merge_lists <- function(list1, list2){
)
merge_lists <- function(list1, list2){
out_len <- length(list1) + length(list2)
merged_list <- rep(0, out_len)
iter1 <- 1
iter2 <- 1
item_list1 <- list1[1]
item_list2 <- list2[1]
curr_len <- 0
while (curr_len < out_len) {
if(!is.na(item_list1) & item_list1 <= item_list2 || is.na(item_list2)){
merged_list[curr_len + 1] <- item_list1
iter1 <- iter1 + 1
item_list1 <- list1[iter1]
}
else{
merged_list[curr_len + 1] <- item_list2
iter2 <- iter2 + 1
item_list2 <- list2[iter2]
}
curr_len <- curr_len + 1
}
merged_list
}
merge_lists(c(1,2,4),c(2,3,5))
split(c(1,2,4),2)
install.packages("DescTools")
library(DescTools)
length(c(1,2,3))/2
ceil(length(c(1,2,3))/2)
ceiling(length(c(1,2,3))/2)
SplitAt(c(1,2,3),2)
SplitAt(c(1,2,3),2)[[1]]
merge_sort <- function(my_list){
# split my_list into left and right
split_list <- SplitAt(my_list, ceiling(length(my_list)/2))
left <- split_list[[1]]
right <- split_list[[2]]
if (length(left) > 1){
merge_sort(left)
}
if (length(right) > 1){
merge_sort(right)
}
merge_lists(left, right)
}
merge_sort(c(2,3,1,5,4,2))
### Closures
linear_regression_predict <- function(x, slope, intercept) {
intercept + x * slope
}
slope <- -2.0
intercept <- 3.0
model1 <- function(x) {linear_regression_predict(x, slope, intercept)}
predict_values <- c(-1.0, 0.0, 1.0, 5.0)
model1_predictions <- sapply(predict_values, model1)
model1_predictions
rosen <- function(x) {rosenbrock(1, 100, x[1], x[2])} # or we could write a <- 1; b <- 100 above
optim(start_value, rosen)
start_value <- c(-1.2, 1)
rosenbrock <- function(a, b, x, y) {
(a-x)^2 + b*(y-x^2)^2
}
rosen <- function(x) {rosenbrock(1, 100, x[1], x[2])} # or we could write a <- 1; b <- 100 above
optim(start_value, rosen)
# With the gradient
gradient <- function(a, b, x, y) {
ddx <- -2*a + 4*b*x^3 - 4*b*x*y + 2*x
ddy <- 2*b*(y-x^2)
c(ddx, ddy)
}
rosen_g <- function(x) {gradient(1, 100, x[1], x[2])}
optim(start_value, rosen, rosen_g, method = "BFGS", control = list(trace = 1)
merge_sort <- function(my_list){
merge_sort <- function(my_list){
# split my_list into left and right
split_list <- SplitAt(my_list, ceiling(length(my_list)/2))
left <- split_list[[1]]
right <- split_list[[2]]
if (length(left) > 1){
left <- merge_sort(left)
}
if (length(right) > 1){
right <- merge_sort(right)
}
merge_lists(left, right)
}
merge_sort(c(1,5,4,2,6,3))
merge_sort <- function(my_list){
# split my_list into left and right
split_list <- SplitAt(my_list, ceiling(length(my_list)/2))
left <- split_list[[1]]
right <- split_list[[2]]
print(left)
print(right)
if (length(left) > 1){
left <- merge_sort(left)
}
if (length(right) > 1){
right <- merge_sort(right)
}
merge_lists(left, right)
}
merge_sort(c(1,5,4,2,6,3))
merge_sort(c(5,4))
merge_sort <- function(my_list){
# split my_list into left and right
split_list <- SplitAt(my_list, ceiling(length(my_list)/2))
left <- split_list[[1]]
right <- split_list[[2]]
print(length(left))
print(length(right))
if (length(left) > 1){
left <- merge_sort(left)
}
if (length(right) > 1){
right <- merge_sort(right)
}
merge_lists(left, right)
}
merge_sort(c(5,4))
SplitAt(c(5,4), ceiling(length(c(5,4))/2))
ceiling(length(c(5,4))/2)
SplitAt(c(1,2,3),2)
SplitAt(c(1,2,3),1)
SplitAt(c(1,2,3),3)
SplitAt(c(1,2,3),pos = 3)
SplitAt(c(1,2,3,4),pos = 3)
SplitAt(c(1,2,3,4),pos = 2)
SplitAt(c(1,2),pos = 1)
SplitAt(c(1,2),pos = 2)
SplitAt(c(1,2,3),pos = 2)
floor(3/2)
merge_sort <- function(my_list){
# split my_list into left and right
split_list <- SplitAt(my_list, floor(length(my_list)/2) + 1)
left <- split_list[[1]]
right <- split_list[[2]]
print(length(left))
print(length(right))
if (length(left) > 1){
left <- merge_sort(left)
}
if (length(right) > 1){
right <- merge_sort(right)
}
merge_lists(left, right)
}
merge_sort(c(1,5,4,2,6,3))
# merge_sort(c(1,5,4,2,6,3))
merge_sort(c(10,25,400,20,6,13, 70, 20, 11))
