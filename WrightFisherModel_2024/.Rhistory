simMeanggCPP2 <- rowMeans(WFmodel_ggCPP$run(36)[-1,])
simMeanggCPP3 <- rowMeans(WFmodel_ggCPP$run(72)[-1,])
combined_compare(simMeanggCPP2,data1) + combined_compare(simMeanggCPP3,data2)
#- combined_compare(x[,1,37],data1) - combined_compare(x[,1,73],data2)
}
}
fitting_closure_max_decode3 <- function(all_other_params, data1, data2){
null_fit_dfoptim_fl <- function(fit_params){
fit_params <- decode3(fit_params)
rnd_vect_full <- fit_params
params$delta_bool = rnd_vect_full
WFmodel_ggCPP <- WF$new(pars = params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
#n_particles <- 10L
#n_times <- 73
#x <- array(NA, dim = c(WFmodel_ggCPP$info()$len, n_particles, n_times))
#for (t in seq_len(n_times)) {
#  x[ , , t] <- WFmodel_ggCPP$run(t)
#}
#time <- x[1, 1, ]
#x <- x[-1, , ]
simMeanggCPP2 <- rowMeans(WFmodel_ggCPP$run(36)[-1,])
simMeanggCPP3 <- rowMeans(WFmodel_ggCPP$run(72)[-1,])
combined_compare(simMeanggCPP2,data1) + combined_compare(simMeanggCPP3,data2)
#- combined_compare(x[,1,37],data1) - combined_compare(x[,1,73],data2)
}
}
ga_fit_FindGenes_ggCPP_dec3 <- fitting_closure_max_decode3(FindGenes_ggCPP_params, PP_mass_cluster_freq_2, PP_mass_cluster_freq_3)
gann <- ga(type = "real-valued", fitness = ga_fit_FindGenes_ggCPP_dec, lower = rep(1, round(0.1*length(best_best_vec))), upper = rep(length(best_best_vec),round(0.1*length(best_best_vec))),
seed = 123, elitism = 200, maxiter = 5, popSize = 400, run = 5, pcrossover = 0.8, pmutation = 0.5)
fitting_closure_max_decode3 <- function(all_other_params, data1, data2){
null_fit_dfoptim_fl <- function(fit_params){
fit_params <- decode3(fit_params)
rnd_vect_full <- fit_params
all_other_params$delta_bool = rnd_vect_full
WFmodel_ggCPP <- WF$new(pars = all_other_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
#n_particles <- 10L
#n_times <- 73
#x <- array(NA, dim = c(WFmodel_ggCPP$info()$len, n_particles, n_times))
#for (t in seq_len(n_times)) {
#  x[ , , t] <- WFmodel_ggCPP$run(t)
#}
#time <- x[1, 1, ]
#x <- x[-1, , ]
simMeanggCPP2 <- rowMeans(WFmodel_ggCPP$run(36)[-1,])
simMeanggCPP3 <- rowMeans(WFmodel_ggCPP$run(72)[-1,])
combined_compare(simMeanggCPP2,data1) + combined_compare(simMeanggCPP3,data2)
#- combined_compare(x[,1,37],data1) - combined_compare(x[,1,73],data2)
}
}
ga_fit_FindGenes_ggCPP_dec3 <- fitting_closure_max_decode3(FindGenes_ggCPP_params, PP_mass_cluster_freq_2, PP_mass_cluster_freq_3)
gann <- ga(type = "real-valued", fitness = ga_fit_FindGenes_ggCPP_dec, lower = rep(1, round(0.1*length(best_best_vec))), upper = rep(length(best_best_vec),round(0.1*length(best_best_vec))),
seed = 123, elitism = 200, maxiter = 5, popSize = 400, run = 5, pcrossover = 0.8, pmutation = 0.5)
fitting_closure_max_decode3 <- function(all_other_params, data1, data2){
null_fit_dfoptim_fl <- function(fit_params){
rnd_vect_full <- decode3(fit_params)
print(length(rnd_vect_full))
all_other_params$delta_bool = rnd_vect_full
WFmodel_ggCPP <- WF$new(pars = all_other_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
#n_particles <- 10L
#n_times <- 73
#x <- array(NA, dim = c(WFmodel_ggCPP$info()$len, n_particles, n_times))
#for (t in seq_len(n_times)) {
#  x[ , , t] <- WFmodel_ggCPP$run(t)
#}
#time <- x[1, 1, ]
#x <- x[-1, , ]
simMeanggCPP2 <- rowMeans(WFmodel_ggCPP$run(36)[-1,])
simMeanggCPP3 <- rowMeans(WFmodel_ggCPP$run(72)[-1,])
combined_compare(simMeanggCPP2,data1) + combined_compare(simMeanggCPP3,data2)
#- combined_compare(x[,1,37],data1) - combined_compare(x[,1,73],data2)
}
}
ga_fit_FindGenes_ggCPP_dec3 <- fitting_closure_max_decode3(FindGenes_ggCPP_params, PP_mass_cluster_freq_2, PP_mass_cluster_freq_3)
gann <- ga(type = "real-valued", fitness = ga_fit_FindGenes_ggCPP_dec, lower = rep(1, round(0.1*length(best_best_vec))), upper = rep(length(best_best_vec),round(0.1*length(best_best_vec))),
seed = 123, elitism = 200, maxiter = 5, popSize = 400, run = 5, pcrossover = 0.8, pmutation = 0.5)
length(rep(1, round(0.1*length(best_best_vec))))
gann <- ga(type = "real-valued", fitness = ga_fit_FindGenes_ggCPP_dec3, lower = rep(1, round(0.1*length(best_best_vec))), upper = rep(length(best_best_vec),round(0.1*length(best_best_vec))),
seed = 123, elitism = 200, maxiter = 5, popSize = 400, run = 5, pcrossover = 0.8, pmutation = 0.5)
fitting_closure_max_decode3 <- function(all_other_params, data1, data2){
null_fit_dfoptim_fl <- function(fit_params){
rnd_vect_full <- decode3(fit_params)
all_other_params$delta_bool = rnd_vect_full
WFmodel_ggCPP <- WF$new(pars = all_other_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
#n_particles <- 10L
#n_times <- 73
#x <- array(NA, dim = c(WFmodel_ggCPP$info()$len, n_particles, n_times))
#for (t in seq_len(n_times)) {
#  x[ , , t] <- WFmodel_ggCPP$run(t)
#}
#time <- x[1, 1, ]
#x <- x[-1, , ]
simMeanggCPP2 <- rowMeans(WFmodel_ggCPP$run(36)[-1,])
simMeanggCPP3 <- rowMeans(WFmodel_ggCPP$run(72)[-1,])
combined_compare(simMeanggCPP2,data1) + combined_compare(simMeanggCPP3,data2)
#- combined_compare(x[,1,37],data1) - combined_compare(x[,1,73],data2)
}
}
ga_fit_FindGenes_ggCPP_dec3 <- fitting_closure_max_decode3(FindGenes_ggCPP_params, PP_mass_cluster_freq_2, PP_mass_cluster_freq_3)
gann <- ga(type = "real-valued", fitness = ga_fit_FindGenes_ggCPP_dec3, lower = rep(1, round(0.1*length(best_best_vec))), upper = rep(length(best_best_vec),round(0.1*length(best_best_vec))),
seed = 123, elitism = 200, maxiter = 5, popSize = 400, run = 5, pcrossover = 0.8, pmutation = 0.5)
plot(gann)
summary(gann)
as.vector(t(apply(gann@solution, 1, decode3)))
gann <- ga(type = "real-valued", fitness = ga_fit_FindGenes_ggCPP_dec3, lower = rep(1, round(0.1*length(best_best_vec))), upper = rep(length(best_best_vec),round(0.1*length(best_best_vec))),
seed = 123, elitism = 50, maxiter = 5, popSize = 500, run = 5, pcrossover = 0.8, pmutation = 0.5)
plot(gann)
gann <- ga(type = "real-valued", fitness = ga_fit_FindGenes_ggCPP_dec3, lower = rep(1, round(0.1*length(best_best_vec))), upper = rep(length(best_best_vec),round(0.1*length(best_best_vec))),
seed = 123, elitism = 50, maxiter = 5, popSize = 500, run = 5, pcrossover = 0.8, pmutation = 0.1)
plot(gann)
summary(gann)
gareal_raMutation(gann,rep(1, round(0.1*length(best_best_vec))))
gareal_raMutation(gann,10)
gann
gareal_raMutation(gann,1)
gann@solution
gareal_raMutation(gann,1)
gareal_raMutation(gann,1)
gareal_raMutation(gann,2)
gareal_raMutation(gann,177)
gareal_raMutation
gareal_raMutation_R
gareal_raMutation_R()
gann <- ga(type = "real-valued", fitness = ga_fit_FindGenes_ggCPP_dec3, lower = rep(1, round(0.1*length(best_best_vec))), upper = rep(length(best_best_vec),round(0.1*length(best_best_vec))),
seed = 123, elitism = 50, maxiter = 5, popSize = 500, run = 5, pcrossover = 0.8, pmutation = 0.1, mutation = gareal_powMutation)
gann <- ga(type = "real-valued", fitness = ga_fit_FindGenes_ggCPP_dec3, lower = rep(1, round(0.1*length(best_best_vec))), upper = rep(length(best_best_vec),round(0.1*length(best_best_vec))),
seed = 123, elitism = 50, maxiter = 20, popSize = 300, run = 5, pcrossover = 0.8, pmutation = 0.3, mutation = gareal_powMutation)
gann <- ga(type = "real-valued", fitness = ga_fit_FindGenes_ggCPP_dec3, lower = rep(1, round(0.1*length(best_best_vec))), upper = rep(length(best_best_vec),round(0.1*length(best_best_vec))),
seed = 123, elitism = 50, maxiter = 20, popSize = 300, run = 20, pcrossover = 0.8, pmutation = 0.3, mutation = gareal_powMutation)
gann@population
plot(gann@population)
# implement my own mutation function?
# this is the implementation of
# gareal_raMutation_R <- function(object, parent)
#{
#  mutate <- parent <- as.vector(object@population[parent,])
#  n <- length(parent)
#  j <- sample(1:n, size = 1)
#  mutate[j] <- runif(1, object@lower[j], object@upper[j])
#  return(mutate)
#}
plot(1:177,gann@population)
# implement my own mutation function?
# this is the implementation of
# gareal_raMutation_R <- function(object, parent)
#{
#  mutate <- parent <- as.vector(object@population[parent,])
#  n <- length(parent)
#  j <- sample(1:n, size = 1)
#  mutate[j] <- runif(1, object@lower[j], object@upper[j])
#  return(mutate)
#}
plot(1:177,gann@population[1,])
# implement my own mutation function?
# this is the implementation of
# gareal_raMutation_R <- function(object, parent)
#{
#  mutate <- parent <- as.vector(object@population[parent,])
#  n <- length(parent)
#  j <- sample(1:n, size = 1)
#  mutate[j] <- runif(1, object@lower[j], object@upper[j])
#  return(mutate)
#}
plot(1:177,gann@population[1:300,])
# implement my own mutation function?
# this is the implementation of
# gareal_raMutation_R <- function(object, parent)
#{
#  mutate <- parent <- as.vector(object@population[parent,])
#  n <- length(parent)
#  j <- sample(1:n, size = 1)
#  mutate[j] <- runif(1, object@lower[j], object@upper[j])
#  return(mutate)
#}
plot(1:177,sort(gann@population[1:300,]))
# implement my own mutation function?
# this is the implementation of
# gareal_raMutation_R <- function(object, parent)
#{
#  mutate <- parent <- as.vector(object@population[parent,])
#  n <- length(parent)
#  j <- sample(1:n, size = 1)
#  mutate[j] <- runif(1, object@lower[j], object@upper[j])
#  return(mutate)
#}
plot(1:177,sort(gann@population[1,]))
points(sort(gann@population[2,]))
points(sort(gann@population[3,]))
# implement my own mutation function?
# this is the implementation of
# gareal_raMutation_R <- function(object, parent)
#{
#  mutate <- parent <- as.vector(object@population[parent,])
#  n <- length(parent)
#  j <- sample(1:n, size = 1)
#  mutate[j] <- runif(1, object@lower[j], object@upper[j])
#  return(mutate)
#}
plot(1:177,sort(gann@population[1,]))
points(sort(gann@population[2,]))
points(sort(gann@population[3,]))
plot(1:1774,as.vector(t(apply((gann@population[1,]), 1, decode3))))
plot(1:1774,as.vector(t(apply((gann@population), 1, decode3))))
plot(1:1774,as.vector(t(apply((gann@population), 2, decode3))))
gann@solution
decode3(gann@population[1,])
plot(1:1774,decode3(gann@population[1,]))
apply((gann@population), 1, decode3))
apply((gann@population), 1, decode3)
apply((gann@population), 2, decode3)
apply((gann@population), 1, decode3)
rowSums(apply((gann@population), 1, decode3))
plot(1:1774,colSums(apply((gann@population), 1, decode3)))
plot(1:1774,rowSums(apply((gann@population), 1, decode3)))
WF_nG_h_vP <- odin.dust::odin_dust("NFDS_Model.R")
Nepal_ggCaller_intermed_consensus_matrix <- sapply(Nepal_ggCaller_intermed_consensus[-1,-1],as.double)
Nepal_avg_cluster_freq <- rep(1/no_Nepal_PP, no_Nepal_PP)
fitted_params_Nepal <- list(dt = 1/12, species_no = no_Nepal_PP,  gene_no = nrow(Nepal_ggCaller_intermed_consensus)-1, Pop_ini = as.double(Nepal_model_start_pop), Pop_eq = as.double(Nepal_model_start_pop), capacity = sum(Nepal_model_start_pop), Genotypes = Nepal_ggCaller_intermed_consensus_matrix, sigma_f = -0.96064922, sigma_w = -1000, prop_f = 0.18276138, delta = Nepal_delta_ranking, m = -5.18194723 , migVec = Nepal_avg_cluster_freq, vaccTypes = Nepal_VT, v = 0.01538689, vacc_time = 9)
WFmodel_Nepal <- WF_nG_h_vP$new(pars = fitted_params_Nepal,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
source("CreateLollipopPlot.R")
simMeanggCPP2_Nepal <- rowMeans(WFmodel_Nepal$run(36)[-1,])
simMeanggCPP3_Nepal <- rowMeans(WFmodel_Nepal$run(72)[-1,])
nepal_cluster_freq_1 <- readRDS(file = "Nepal_cluster_freqs_1.rds")
nepal_cluster_freq_2 <- readRDS(file = "Nepal_cluster_freqs_2.rds")
nepal_cluster_freq_3 <- readRDS(file = "Nepal_cluster_freqs_3.rds")
nepal_cluster_freq_4 <- readRDS(file = "Nepal_cluster_freqs_4.rds")
nepal_cluster_freq_5 <- readRDS(file = "Nepal_cluster_freqs_5.rds")
nepal_cluster_freq_6 <- readRDS(file = "Nepal_cluster_freqs_6.rds")
nepal_cluster_freq_7 <- readRDS(file = "Nepal_cluster_freqs_7.rds")
nepal_cluster_freq_8 <- readRDS(file = "Nepal_cluster_freqs_8.rds")
nepal_cluster_freq_9 <- readRDS(file = "Nepal_cluster_freqs_9.rds")
nepal_cluster_freq_10 <- readRDS(file = "Nepal_cluster_freqs_10.rds")
nepal_cluster_freq_11 <- readRDS(file = "Nepal_cluster_freqs_11.rds")
nepal_cluster_freq_12 <- readRDS(file = "Nepal_cluster_freqs_12.rds")
nepal_cluster_freq_13 <- readRDS(file = "Nepal_cluster_freqs_13.rds")
WFmodel_Nepal <- WF_nG_h_vP$new(pars = fitted_params_Nepal,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
WFmodel_Nepal <- WF_nG_h_vP$new(pars = fitted_params_Nepal,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
rowMeans(WFmodel_Nepal$run(1)[-1,])
rowMeans(WFmodel_Nepal$run(2)[-1,])
WFmodel_Nepal <- WF_nG_h_vP$new(pars = fitted_params_Nepal,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
rowMeans(WFmodel_Nepal$run(0)[-1,])
simMeanggCPP2_Nepal <- rowMeans(WFmodel_Nepal$run(12)[-1,])
simMeanggCPP3_Nepal <- rowMeans(WFmodel_Nepal$run(24)[-1,])
simMeanggCPP4_Nepal <- rowMeans(WFmodel_Nepal$run(36)[-1,])
simMeanggCPP5_Nepal <- rowMeans(WFmodel_Nepal$run(48)[-1,])
simMeanggCPP6_Nepal <- rowMeans(WFmodel_Nepal$run(60)[-1,])
simMeanggCPP7_Nepal <- rowMeans(WFmodel_Nepal$run(72)[-1,])
simMeanggCPP8_Nepal <- rowMeans(WFmodel_Nepal$run(84)[-1,])
simMeanggCPP9_Nepal <- rowMeans(WFmodel_Nepal$run(96)[-1,])
simMeanggCPP10_Nepal <- rowMeans(WFmodel_Nepal$run(108)[-1,])
simMeanggCPP11_Nepal <- rowMeans(WFmodel_Nepal$run(120)[-1,])
simMeanggCPP12_Nepal <- rowMeans(WFmodel_Nepal$run(132)[-1,])
nepal_cluster_freq_1 <- readRDS(file = "Nepal_cluster_freqs_1.rds")
nepal_cluster_freq_2 <- readRDS(file = "Nepal_cluster_freqs_2.rds")
nepal_cluster_freq_3 <- readRDS(file = "Nepal_cluster_freqs_3.rds")
nepal_cluster_freq_4 <- readRDS(file = "Nepal_cluster_freqs_4.rds")
nepal_cluster_freq_5 <- readRDS(file = "Nepal_cluster_freqs_5.rds")
nepal_cluster_freq_6 <- readRDS(file = "Nepal_cluster_freqs_6.rds")
nepal_cluster_freq_7 <- readRDS(file = "Nepal_cluster_freqs_7.rds")
nepal_cluster_freq_8 <- readRDS(file = "Nepal_cluster_freqs_8.rds")
nepal_cluster_freq_9 <- readRDS(file = "Nepal_cluster_freqs_9.rds")
nepal_cluster_freq_10 <- readRDS(file = "Nepal_cluster_freqs_10.rds")
nepal_cluster_freq_11 <- readRDS(file = "Nepal_cluster_freqs_11.rds")
nepal_cluster_freq_12 <- readRDS(file = "Nepal_cluster_freqs_12.rds")
nepal_cluster_freq_13 <- readRDS(file = "Nepal_cluster_freqs_13.rds")
Nepal_VT <- readRDS(file = "Nepal_VT.rds")
View(Nepal_meta_dataPP)
PopPUNK_clusters$Serotype
View(PopPUNK_clusters)
View(Nepal_PP)
# Add Serotype Information
Nepal_Serotype_dict <- Nepal_meta_dataPP$Phenotypic_serotype
names(Nepal_Serotype_dict) <- Nepal_meta_dataPP$Taxon
Nepal_Serotype_dict
# Add Serotype Information
Nepal_Serotype_dict <- Nepal_meta_dataPP$Phenotypic_serotype
names(Nepal_Serotype_dict) <- Nepal_meta_dataPP$Taxon
head(Nepal_Serotype_dict)
names(Nepal_Serotype_dict)
names(Nepal_Serotype_dict) <- Nepal_meta_dataPP$Lane_id
Nepal_Serotype_dict
Nepal_PP$Serotype <- Nepal_Serotype_dict[Nepal_PP$Taxon]
saveRDS(Nepal_PP,"Nepal_PP.rds")
Nepal_PopPUNK <- readRDS("Nepal_PP.rds")
Nepal_PP_serotype_comp <- rep(0,nrow(Nepal_PopPUNK))
no_Nepal_PP <- length(unique(Nepal_PopPUNK$Cluster))
for (i in 1:no_Nepal_PP) {
Nepal_PP_serotype_comp[i] <- paste(unique(Nepal_PopPUNK$Serotype[which(Nepal_PopPUNK$Cluster==i)]), collapse = ", ")
}
Nepal_PP_serotype_comp
no_Nepal_PP
Nepal_PP_serotype_comp <- rep(0,no_Nepal_PP)
length(Nepal_PP_serotype_comp)
for (i in 1:no_Nepal_PP) {
Nepal_PP_serotype_comp[i] <- paste(unique(Nepal_PopPUNK$Serotype[which(Nepal_PopPUNK$Cluster==i)]), collapse = ", ")
}
length(Nepal_PP_serotype_comp)
Nepal_PP_serotype_comp
lollipop_cluster_freqs_VTandNVT_labelSero(year = "2", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_2/sum(nepal_cluster_freq_2), model_name_1 ="Model", model1 = simMeanggCPP2_Nepal/sum(simMeanggCPP2_Nepal), Nepal_VT, SeroLabel = Nepal_PP_serotype_comp)
nepal_cluster_freq_2
nepal_cluster_freq_3
nepal_cluster_freq_13
lollipop_cluster_freqs_VTandNVT_labelSero_flipped(year = "2", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_2/sum(nepal_cluster_freq_2), model_name_1 ="Model", model1 = simMeanggCPP2_Nepal/sum(simMeanggCPP2_Nepal), Nepal_VT, SeroLabel = Nepal_PP_serotype_comp)
length(which(Nepal_PopPUNK$Cluster==1))
for (i in 1:no_Nepal_PP) {
Nepal_PP_cluster_freq[i] <- length(which(Nepal_PopPUNK$Cluster==i))
}
Nepal_PP_cluster_freq <- rep(0,no_Nepal_PP)
Nepal_PP_cluster_freq <- rep(0,no_Nepal_PP)
Nepal_PP_cluster_freq <- rep(0,no_Nepal_PP)
for (i in 1:no_Nepal_PP) {
Nepal_PP_cluster_freq[i] <- length(which(Nepal_PopPUNK$Cluster==i))
}
Nepal_PP_cluster_freq
# exclude those from the plot that only occur once
Nepal_PP_cluster_freq_larger1 <- rep(0,no_Nepal_PP)
Nepal_PP_cluster_freq_larger1[Nepal_PP_cluster_freq>1] <- 1
Nepal_PP_cluster_freq_larger1
lollipop_cluster_freqs_VTandNVT_labelSero_flipped(year = "2", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_2[Nepal_PP_cluster_freq>1]/sum(nepal_cluster_freq_2[Nepal_PP_cluster_freq>1]), model_name_1 ="Model", model1 = simMeanggCPP2_Nepal[Nepal_PP_cluster_freq>1]/sum(simMeanggCPP2_Nepal[Nepal_PP_cluster_freq>1]), Nepal_VT, SeroLabel = Nepal_PP_serotype_comp)
nepal_cluster_freq_2[Nepal_PP_cluster_freq>1]
which(Nepal_PP_cluster_freq>1)
lollipop_cluster_freqs_VTandNVT_labelSero_flipped(year = "2", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_2[which(Nepal_PP_cluster_freq>1)]/sum(nepal_cluster_freq_2[which(Nepal_PP_cluster_freq>1)]), model_name_1 ="Model", model1 = simMeanggCPP2_Nepal[which(Nepal_PP_cluster_freq>1)]/sum(simMeanggCPP2_Nepal[which(Nepal_PP_cluster_freq>1)]), Nepal_VT, SeroLabel = Nepal_PP_serotype_comp)
lollipop_cluster_freqs_VTandNVT_labelSero_flipped(year = "2", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_2[which(Nepal_PP_cluster_freq>1)]/sum(nepal_cluster_freq_2[which(Nepal_PP_cluster_freq>1)]), model_name_1 ="Model", model1 = simMeanggCPP2_Nepal[which(Nepal_PP_cluster_freq>1)]/sum(simMeanggCPP2_Nepal[which(Nepal_PP_cluster_freq>1)]), Nepal_VT[which(Nepal_PP_cluster_freq>1)], SeroLabel = Nepal_PP_serotype_comp[which(Nepal_PP_cluster_freq>1)])
nepal_cluster_freq_2
nepal_cluster_freq_2/sum(nepal_cluster_freq_2)
lollipop_cluster_freqs_VTandNVT_labelSero_flipped(year = "2", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_3[which(Nepal_PP_cluster_freq>1)]/sum(nepal_cluster_freq_3[which(Nepal_PP_cluster_freq>1)]), model_name_1 ="Model", model1 = simMeanggCPP3_Nepal[which(Nepal_PP_cluster_freq>1)]/sum(simMeanggCPP3_Nepal[which(Nepal_PP_cluster_freq>1)]), Nepal_VT[which(Nepal_PP_cluster_freq>1)], SeroLabel = Nepal_PP_serotype_comp[which(Nepal_PP_cluster_freq>1)])
sum(nepal_cluster_freq_1)
sum(nepal_cluster_freq_2)
sum(nepal_cluster_freq_3)
sum(nepal_cluster_freq_4)
sum(nepal_cluster_freq_5)
lollipop_cluster_freqs_VTandNVT_labelSero_flipped(year = "2", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]/sum(nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]), model_name_1 ="Model", model1 = simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]/sum(simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]), Nepal_VT[which(Nepal_PP_cluster_freq>1)], SeroLabel = Nepal_PP_serotype_comp[which(Nepal_PP_cluster_freq>1)])
lollipop_cluster_freqs_VTandNVT_labelSero(year = "2", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]/sum(nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]), model_name_1 ="Model", model1 = simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]/sum(simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]), Nepal_VT[which(Nepal_PP_cluster_freq>1)], SeroLabel = Nepal_PP_serotype_comp[which(Nepal_PP_cluster_freq>1)])
source("CreateLollipopPlot.R")
lollipop_cluster_freqs_VTandNVT_labelSero_flipped(year = "2", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]/sum(nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]), model_name_1 ="Model", model1 = simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]/sum(simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]), Nepal_VT[which(Nepal_PP_cluster_freq>1)], SeroLabel = Nepal_PP_serotype_comp[which(Nepal_PP_cluster_freq>1)])
source("CreateLollipopPlot.R")
lollipop_cluster_freqs_VTandNVT_labelSero_flipped(year = "2", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]/sum(nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]), model_name_1 ="Model", model1 = simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]/sum(simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]), Nepal_VT[which(Nepal_PP_cluster_freq>1)], SeroLabel = Nepal_PP_serotype_comp[which(Nepal_PP_cluster_freq>1)])
source("CreateLollipopPlot.R")
lollipop_cluster_freqs_VTandNVT_labelSero_flipped(year = "2", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]/sum(nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]), model_name_1 ="Model", model1 = simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]/sum(simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]), Nepal_VT[which(Nepal_PP_cluster_freq>1)], SeroLabel = Nepal_PP_serotype_comp[which(Nepal_PP_cluster_freq>1)])
source("CreateLollipopPlot.R")
lollipop_cluster_freqs_VTandNVT_labelSero_flipped(year = "2", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]/sum(nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]), model_name_1 ="Model", model1 = simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]/sum(simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]), Nepal_VT[which(Nepal_PP_cluster_freq>1)], SeroLabel = Nepal_PP_serotype_comp[which(Nepal_PP_cluster_freq>1)])
lollipop_cluster_freqs_VTandNVT_labelSero(year = "2", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]/sum(nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]), model_name_1 ="Model", model1 = simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]/sum(simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]), Nepal_VT[which(Nepal_PP_cluster_freq>1)], SeroLabel = Nepal_PP_serotype_comp[which(Nepal_PP_cluster_freq>1)])
source("CreateLollipopPlot.R")
lollipop_cluster_freqs_VTandNVT_labelSero_flipped(year = "2", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]/sum(nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]), model_name_1 ="Model", model1 = simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]/sum(simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]), Nepal_VT[which(Nepal_PP_cluster_freq>1)], SeroLabel = Nepal_PP_serotype_comp[which(Nepal_PP_cluster_freq>1)])
source("CreateLollipopPlot.R")
lollipop_cluster_freqs_VTandNVT_labelSero_flipped(year = "2", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]/sum(nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]), model_name_1 ="Model", model1 = simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]/sum(simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]), Nepal_VT[which(Nepal_PP_cluster_freq>1)], SeroLabel = Nepal_PP_serotype_comp[which(Nepal_PP_cluster_freq>1)])
source("CreateLollipopPlot.R")
lollipop_cluster_freqs_VTandNVT_labelSero_flipped(year = "2", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]/sum(nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]), model_name_1 ="Model", model1 = simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]/sum(simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]), Nepal_VT[which(Nepal_PP_cluster_freq>1)], SeroLabel = Nepal_PP_serotype_comp[which(Nepal_PP_cluster_freq>1)])
source("CreateLollipopPlot.R")
lollipop_cluster_freqs_VTandNVT_labelSero_flipped(year = "2", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]/sum(nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]), model_name_1 ="Model", model1 = simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]/sum(simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]), Nepal_VT[which(Nepal_PP_cluster_freq>1)], SeroLabel = Nepal_PP_serotype_comp[which(Nepal_PP_cluster_freq>1)])
source("CreateLollipopPlot.R")
lollipop_cluster_freqs_VTandNVT_labelSero_flipped(year = "2", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]/sum(nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]), model_name_1 ="Model", model1 = simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]/sum(simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]), Nepal_VT[which(Nepal_PP_cluster_freq>1)], SeroLabel = Nepal_PP_serotype_comp[which(Nepal_PP_cluster_freq>1)])
source("CreateLollipopPlot.R")
lollipop_cluster_freqs_VTandNVT_labelSero_flipped(year = "2", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]/sum(nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]), model_name_1 ="Model", model1 = simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]/sum(simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]), Nepal_VT[which(Nepal_PP_cluster_freq>1)], SeroLabel = Nepal_PP_serotype_comp[which(Nepal_PP_cluster_freq>1)])
grid.arrange(lollipop_plot_1 + scale_y_continuous(limits = c(NA,0.2))  + scale_x_continuous(breaks = 1:length(data1), labels = 1:length(data1), sec.axis = dup_axis(name = "Serotypes", labels = SeroLabel))+ theme(plot.margin = unit(c(.5,0.5,1,0.5), "cm"), axis.text.x.top = element_text(angle = 90, vjust = 0.5, hjust=1)), ncol = 1, nrow=1, top = textGrob(plot_title,gp=gpar(fontsize=20,font=3)))
source("CreateLollipopPlot.R")
lollipop_cluster_freqs_VTandNVT_labelSero_flipped(year = "2", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]/sum(nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]), model_name_1 ="Model", model1 = simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]/sum(simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]), Nepal_VT[which(Nepal_PP_cluster_freq>1)], SeroLabel = Nepal_PP_serotype_comp[which(Nepal_PP_cluster_freq>1)])
Nepal_time_points
sum(nepal_cluster_freq_6)
sum(nepal_cluster_freq_7)
sum(nepal_cluster_freq_8)
sum(nepal_cluster_freq_9)
lollipop_cluster_freqs_VTandNVT_labelSero_flipped(year = "2011", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_7[which(Nepal_PP_cluster_freq>1)]/sum(nepal_cluster_freq_7[which(Nepal_PP_cluster_freq>1)]), model_name_1 ="Model", model1 = simMeanggCPP7_Nepal[which(Nepal_PP_cluster_freq>1)]/sum(simMeanggCPP7_Nepal[which(Nepal_PP_cluster_freq>1)]), Nepal_VT[which(Nepal_PP_cluster_freq>1)], SeroLabel = Nepal_PP_serotype_comp[which(Nepal_PP_cluster_freq>1)])
lollipop_cluster_freqs_VTandNVT_labelSero_flipped(year = "2013", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_9[which(Nepal_PP_cluster_freq>1)]/sum(nepal_cluster_freq_9[which(Nepal_PP_cluster_freq>1)]), model_name_1 ="Model", model1 = simMeanggCPP9_Nepal[which(Nepal_PP_cluster_freq>1)]/sum(simMeanggCPP9_Nepal[which(Nepal_PP_cluster_freq>1)]), Nepal_VT[which(Nepal_PP_cluster_freq>1)], SeroLabel = Nepal_PP_serotype_comp[which(Nepal_PP_cluster_freq>1)])
sum(nepal_cluster_freq_10)
sum(nepal_cluster_freq_11)
sum(nepal_cluster_freq_12)
sum(nepal_cluster_freq_13)
lollipop_cluster_freqs_VTandNVT_labelSero_flipped(year = "2017", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_12[which(Nepal_PP_cluster_freq>1)]/sum(nepal_cluster_freq_12[which(Nepal_PP_cluster_freq>1)]), model_name_1 ="Model", model1 = simMeanggCPP12_Nepal[which(Nepal_PP_cluster_freq>1)]/sum(simMeanggCPP12_Nepal[which(Nepal_PP_cluster_freq>1)]), Nepal_VT[which(Nepal_PP_cluster_freq>1)], SeroLabel = Nepal_PP_serotype_comp[which(Nepal_PP_cluster_freq>1)])
lollipop_cluster_freqs_VTandNVT_labelSero_flipped(year = "2018", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_13[which(Nepal_PP_cluster_freq>1)]/sum(nepal_cluster_freq_13[which(Nepal_PP_cluster_freq>1)]), model_name_1 ="Model", model1 = simMeanggCPP13_Nepal[which(Nepal_PP_cluster_freq>1)]/sum(simMeanggCPP13_Nepal[which(Nepal_PP_cluster_freq>1)]), Nepal_VT[which(Nepal_PP_cluster_freq>1)], SeroLabel = Nepal_PP_serotype_comp[which(Nepal_PP_cluster_freq>1)])
simMeanggCPP13_Nepal <- rowMeans(WFmodel_Nepal$run(144)[-1,])
lollipop_cluster_freqs_VTandNVT_labelSero_flipped(year = "2018", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_13[which(Nepal_PP_cluster_freq>1)]/sum(nepal_cluster_freq_13[which(Nepal_PP_cluster_freq>1)]), model_name_1 ="Model", model1 = simMeanggCPP13_Nepal[which(Nepal_PP_cluster_freq>1)]/sum(simMeanggCPP13_Nepal[which(Nepal_PP_cluster_freq>1)]), Nepal_VT[which(Nepal_PP_cluster_freq>1)], SeroLabel = Nepal_PP_serotype_comp[which(Nepal_PP_cluster_freq>1)])
source("CreateLollipopPlot.R")
lollipop_cluster_freqs_VTandNVT_labelSero_flipped(year = "2009", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]/sum(nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]), model_name_1 ="Model", model1 = simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]/sum(simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]), Nepal_VT[which(Nepal_PP_cluster_freq>1)], SeroLabel = Nepal_PP_serotype_comp[which(Nepal_PP_cluster_freq>1)])
source("CreateLollipopPlot.R")
lollipop_cluster_freqs_VTandNVT_labelSero_flipped(year = "2009", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]/sum(nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]), model_name_1 ="Model", model1 = simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]/sum(simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]), Nepal_VT[which(Nepal_PP_cluster_freq>1)], SeroLabel = Nepal_PP_serotype_comp[which(Nepal_PP_cluster_freq>1)])
lollipop_cluster_freqs_VTandNVT_labelSero_flipped(year = "2011", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_7[which(Nepal_PP_cluster_freq>1)]/sum(nepal_cluster_freq_7[which(Nepal_PP_cluster_freq>1)]), model_name_1 ="Model", model1 = simMeanggCPP7_Nepal[which(Nepal_PP_cluster_freq>1)]/sum(simMeanggCPP7_Nepal[which(Nepal_PP_cluster_freq>1)]), Nepal_VT[which(Nepal_PP_cluster_freq>1)], SeroLabel = Nepal_PP_serotype_comp[which(Nepal_PP_cluster_freq>1)])
lollipop_cluster_freqs_VTandNVT_labelSero_flipped(year = "2013", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_9[which(Nepal_PP_cluster_freq>1)]/sum(nepal_cluster_freq_9[which(Nepal_PP_cluster_freq>1)]), model_name_1 ="Model", model1 = simMeanggCPP9_Nepal[which(Nepal_PP_cluster_freq>1)]/sum(simMeanggCPP9_Nepal[which(Nepal_PP_cluster_freq>1)]), Nepal_VT[which(Nepal_PP_cluster_freq>1)], SeroLabel = Nepal_PP_serotype_comp[which(Nepal_PP_cluster_freq>1)])
lollipop_cluster_freqs_VTandNVT_labelSero_flipped(year = "2017", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_12[which(Nepal_PP_cluster_freq>1)]/sum(nepal_cluster_freq_12[which(Nepal_PP_cluster_freq>1)]), model_name_1 ="Model", model1 = simMeanggCPP12_Nepal[which(Nepal_PP_cluster_freq>1)]/sum(simMeanggCPP12_Nepal[which(Nepal_PP_cluster_freq>1)]), Nepal_VT[which(Nepal_PP_cluster_freq>1)], SeroLabel = Nepal_PP_serotype_comp[which(Nepal_PP_cluster_freq>1)])
lollipop_cluster_freqs_VTandNVT_labelSero_flipped(year = "2018", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_13[which(Nepal_PP_cluster_freq>1)]/sum(nepal_cluster_freq_13[which(Nepal_PP_cluster_freq>1)]), model_name_1 ="Model", model1 = simMeanggCPP13_Nepal[which(Nepal_PP_cluster_freq>1)]/sum(simMeanggCPP13_Nepal[which(Nepal_PP_cluster_freq>1)]), Nepal_VT[which(Nepal_PP_cluster_freq>1)], SeroLabel = Nepal_PP_serotype_comp[which(Nepal_PP_cluster_freq>1)])
lollipop_cluster_freqs_VTandNVT_labelSero_flipped(year = "2009", plot_title = "PopPUNK and ggCaller", data1 = nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]/sum(nepal_cluster_freq_5[which(Nepal_PP_cluster_freq>1)]), model_name_1 ="Model", model1 = simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]/sum(simMeanggCPP5_Nepal[which(Nepal_PP_cluster_freq>1)]), Nepal_VT[which(Nepal_PP_cluster_freq>1)], SeroLabel = Nepal_PP_serotype_comp[which(Nepal_PP_cluster_freq>1)])
plot(1:1774,rowSums(apply((gann@population), 1, decode3)))
plot(gann)
Cluster_ga <- readRDS("FindGenesGA_results.rds")
Cluster_ga <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_05_22/FindGenesGA_results.rds")
plot(Cluster_ga)
Cluster_ga@population
plot(1:1774,rowSums(Cluster_ga@population))
dim(Cluster_ga@population)
length(rowSums(Cluster_ga@population))
plot(1:1774,colSums(Cluster_ga@population))
plot(1:1774,colSums(Cluster_ga@population)/800)
Cluster_ga@population[1,]
plot(1:1774,colMeans(Cluster_ga@population))
boxplot(Cluster_ga@population[,1],
ylab="Steps",
xlab="")
boxplot(Cluster_ga@population,
ylab="Steps",
xlab="")
plot(1:1774,(Cluster_ga@population[1,]))
sd(Cluster_ga@population[1,])
ga_sd <- rep(0, 1774)
ga_sd <- sapply(Cluster_ga@population,sd)
ga_sd <- sapply(Cluster_ga@population[,1:1774],sd)
ga_sd <- apply(Cluster_ga@population,2,sd)
ga_sd
plot(1:1774,             # Draw mean values
colMeans(Cluster_ga@population),
xlab = "Groups",
ylab = "Mean & Standard Deviation",
xaxt = "n",
ylim = c(min(colMeans(Cluster_ga@population) - ga_sd),
max((colMeans(Cluster_ga@population) + ga_sd))))
segments(x0 = 1:1774,    # Add standard deviations
y0 = colMeans(Cluster_ga@population) - ga_sd,
x1 = 1:1774,
y1 = colMeans(Cluster_ga@population) + ga_sd)
plot(1:1774,             # Draw mean values
colMeans(Cluster_ga@population),
xlab = "Genes",
ylab = "Mean & Standard Deviation",
xaxt = "n",
ylim = c(min(colMeans(Cluster_ga@population) - ga_sd),
max((colMeans(Cluster_ga@population) + ga_sd))))
segments(x0 = 1:1774,    # Add standard deviations
y0 = colMeans(Cluster_ga@population) - ga_sd,
x1 = 1:1774,
y1 = colMeans(Cluster_ga@population) + ga_sd)
axis(side = 1,                                 # Add x-axis labels
at = 1:1774,
labels = 1:1774)
plot(1:1774,             # Draw mean values
colMeans(Cluster_ga@population),
xlab = "Genes",
ylab = "Mean & Standard Deviation",
xaxt = "n",
ylim = c(min(colMeans(Cluster_ga@population) - ga_sd),
max((colMeans(Cluster_ga@population) + ga_sd))))
segments(x0 = 1:1774,    # Add standard deviations
y0 = colMeans(Cluster_ga@population) - ga_sd,
x1 = 1:1774,
y1 = colMeans(Cluster_ga@population) + ga_sd)
plot(Cluster_ga)
plot(1:1774,decode3(gann@population[1,]))
plot(gann)
plot(1:1774,rowSums(apply((gann@population), 1, decode3)))
plot(1:1774,rowMeans(apply((gann@population), 1, decode3)))
local_ga_sd <- rep(0,1774)
apply(apply((gann@population), 1, decode3),2,sd)
length(apply(apply((gann@population), 1, decode3),2,sd))
length(apply(apply((gann@population), 1, decode3),1,sd))
local_ga_sd <- apply(apply((gann@population), 1, decode3),1,sd)
dim(apply((gann@population), 1, decode3))
dim(apply(Cluster_ga@population,2,sd))
dim(Cluster_ga@population)
plot(1:1774,             # Draw mean values
rowMeans(apply((gann@population), 1, decode3)),
xlab = "Genes",
ylab = "Mean & Standard Deviation",
xaxt = "n",
ylim = c(min(rowMeans(apply((gann@population), 1, decode3)) - local_ga_sd),
max(rowMeans(apply((gann@population), 1, decode3)) + local_ga_sd)))
segments(x0 = 1:1774,    # Add standard deviations
y0 = rowMeans(apply((gann@population), 1, decode3)) - local_ga_sd,
x1 = 1:1774,
y1 = rowMeans(apply((gann@population), 1, decode3)) + local_ga_sd)
results_path_24 <- "/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2024_05_24/"
Nepal_1stfit <- readRDS(paste(results_path_24,"Nepal_ggCaller_PopPUNK_det_pmcmc_run2.rds",sep = ""))
coda::effectiveSize(Nepal_1stfit)
Nepal_mcmc2 <- coda::as.mcmc(cbind(Nepal_1stfit$probabilities, Nepal_1stfit$pars))
coda::effectiveSize(Nepal_mcmc2)
Nepal_mcmc2
dim(Nepal_mcmc2)
summary(coda::as.mcmc(Nepal_mcmc2))
exp(-9.643e-01)
exp(-5.493e+00)
-2.338e+03
1.536e-02
.Library
install.packages("~/Downloads/libSBML_5.18.0.tar.gz", repos = NULL, type = "source")
