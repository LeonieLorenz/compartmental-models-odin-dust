scale_color_manual(values = c("#E69F00","#56B4E9","#CC79A7"),
guide  = guide_legend(),
name   = "Group") +
coord_flip()+
#theme_ipsum() +
theme(legend.position = c(.8,.8),legend.text = element_text(size = 20),legend.title = element_text(size = 20)) +
ggtitle(year) +
ylab("Frequency") +
xlab("Clusters") +
theme(axis.title  = element_text(size = 20), axis.text = element_text(size = 20), plot.title = element_text(size = 25,hjust = 0.5))  +
ylim(0, max(max(lollipop_data_1$model_1)))
grid.arrange(lollipop_plot_1 + scale_y_continuous(limits = c(NA,0.2)) + theme(plot.margin = unit(c(.5,0.5,1,0.5), "cm"),axis.text.y = element_blank()), ncol = 1, nrow=1, top = textGrob(plot_title,gp=gpar(fontsize=20,font=3)))
}
# Plot NVTs
lollipop_cluster_freqs_3points(year = "2001", plot_title = "Non-Vaccine Types, manual Seq Clusters",data1 = mass_cluster_freq_1[which(mass_VT==0)]/sum(mass_cluster_freq_1), model_name_1 = "COGtriangles",model1 = model1_NVT/sum(model_val1), model_name_2 = "ggCaller", model2 = ggC_model1_NVT/sum(ggC_model_val1))
library(ggplot2)
library(gridExtra)
library(grid)
lollipop_cluster_freqs_3points <- function(year = "year unknown", plot_title = "Generic Plot Title",data1, model_name_1 ="Model 1", model1, model_name_2 ="Model 2", model2){
lollipop_data_1 <- data.frame(
x=1:length(data1),
model_1=model1,
data_1=as.numeric(data1),
model_2 = model2
)
# Change baseline
lollipop_plot_1 <- ggplot(lollipop_data_1) +
geom_segment( aes(x=x, xend=x, y=model_1, yend=data_1), color="grey") +
geom_segment( aes(x=x, xend=x, y=model_2, yend=data_1), color="grey") +
geom_point( aes(x=x, y=model_1, color=model_name_1), size=5, shape = 1) +
geom_point( aes(x=x, y=data_1, color="Data"), size=5, shape = 1) +
geom_point(aes(x=x, y=model_2, color=model_name_2), size=5, shape = 1) +
scale_color_manual(values = c("#E69F00","#56B4E9","#CC79A7"),
guide  = guide_legend(),
name   = "Group") +
coord_flip()+
#theme_ipsum() +
theme(legend.position = c(.8,.8),legend.text = element_text(size = 20),legend.title = element_text(size = 20)) +
ggtitle(year) +
ylab("Frequency") +
xlab("Clusters") +
theme(axis.title  = element_text(size = 20), axis.text = element_text(size = 20), plot.title = element_text(size = 25,hjust = 0.5))  +
ylim(0, max(max(lollipop_data_1$model_1)))
grid.arrange(lollipop_plot_1 + scale_y_continuous(limits = c(NA,0.2)) + theme(plot.margin = unit(c(.5,0.5,1,0.5), "cm"),axis.text.y = element_blank()), ncol = 1, nrow=1, top = textGrob(plot_title,gp=gpar(fontsize=20,font=3)))
}
# Plot NVTs
lollipop_cluster_freqs_3points(year = "2001", plot_title = "Non-Vaccine Types, manual Seq Clusters",data1 = mass_cluster_freq_1[which(mass_VT==0)]/sum(mass_cluster_freq_1), model_name_1 = "COGtriangles",model1 = model1_NVT/sum(model_val1), model_name_2 = "ggCaller", model2 = ggC_model1_NVT/sum(ggC_model_val1))
lollipop_cluster_freqs_3points <- function(year = "year unknown", plot_title = "Generic Plot Title",data1, model_name_1 ="Model 1", model1, model_name_2 ="Model 2", model2){
lollipop_data_1 <- data.frame(
x=1:length(data1),
model_1=model1,
data_1=as.numeric(data1),
model_2 = model2
)
# Change baseline
lollipop_plot_1 <- ggplot(lollipop_data_1) +
geom_segment( aes(x=x, xend=x, y=model_1, yend=data_1), color="grey") +
geom_segment( aes(x=x, xend=x, y=model_2, yend=data_1), color="grey") +
geom_point( aes(x=x, y=model_1, color=model_name_1), size=5, shape = 1, stroke = 2) +
geom_point( aes(x=x, y=data_1, color="Data"), size=5, shape = 1) +
geom_point(aes(x=x, y=model_2, color=model_name_2), size=5, shape = 1) +
scale_color_manual(values = c("#E69F00","#56B4E9","#CC79A7"),
guide  = guide_legend(),
name   = "Group") +
coord_flip()+
#theme_ipsum() +
theme(legend.position = c(.8,.8),legend.text = element_text(size = 20),legend.title = element_text(size = 20)) +
ggtitle(year) +
ylab("Frequency") +
xlab("Clusters") +
theme(axis.title  = element_text(size = 20), axis.text = element_text(size = 20), plot.title = element_text(size = 25,hjust = 0.5))  +
ylim(0, max(max(lollipop_data_1$model_1)))
grid.arrange(lollipop_plot_1 + scale_y_continuous(limits = c(NA,0.2)) + theme(plot.margin = unit(c(.5,0.5,1,0.5), "cm"),axis.text.y = element_blank()), ncol = 1, nrow=1, top = textGrob(plot_title,gp=gpar(fontsize=20,font=3)))
}
# Plot NVTs
lollipop_cluster_freqs_3points(year = "2001", plot_title = "Non-Vaccine Types, manual Seq Clusters",data1 = mass_cluster_freq_1[which(mass_VT==0)]/sum(mass_cluster_freq_1), model_name_1 = "COGtriangles",model1 = model1_NVT/sum(model_val1), model_name_2 = "ggCaller", model2 = ggC_model1_NVT/sum(ggC_model_val1))
lollipop_cluster_freqs_3points <- function(year = "year unknown", plot_title = "Generic Plot Title",data1, model_name_1 ="Model 1", model1, model_name_2 ="Model 2", model2){
lollipop_data_1 <- data.frame(
x=1:length(data1),
model_1=model1,
data_1=as.numeric(data1),
model_2 = model2
)
# Change baseline
lollipop_plot_1 <- ggplot(lollipop_data_1) +
geom_segment( aes(x=x, xend=x, y=model_1, yend=data_1), color="grey") +
geom_segment( aes(x=x, xend=x, y=model_2, yend=data_1), color="grey") +
geom_point( aes(x=x, y=model_1, color=model_name_1), size=5, shape = 1, stroke = 2) +
geom_point( aes(x=x, y=data_1, color="Data"), size=5, shape = 1, stroke = 2) +
geom_point(aes(x=x, y=model_2, color=model_name_2), size=5, shape = 1, stroke = 2) +
scale_color_manual(values = c("#E69F00","#56B4E9","#CC79A7"),
guide  = guide_legend(),
name   = "Group") +
coord_flip()+
#theme_ipsum() +
theme(legend.position = c(.8,.8),legend.text = element_text(size = 20),legend.title = element_text(size = 20)) +
ggtitle(year) +
ylab("Frequency") +
xlab("Clusters") +
theme(axis.title  = element_text(size = 20), axis.text = element_text(size = 20), plot.title = element_text(size = 25,hjust = 0.5))  +
ylim(0, max(max(lollipop_data_1$model_1)))
grid.arrange(lollipop_plot_1 + scale_y_continuous(limits = c(NA,0.2)) + theme(plot.margin = unit(c(.5,0.5,1,0.5), "cm"),axis.text.y = element_blank()), ncol = 1, nrow=1, top = textGrob(plot_title,gp=gpar(fontsize=20,font=3)))
}
# Plot NVTs
lollipop_cluster_freqs_3points(year = "2001", plot_title = "Non-Vaccine Types, manual Seq Clusters",data1 = mass_cluster_freq_1[which(mass_VT==0)]/sum(mass_cluster_freq_1), model_name_1 = "COGtriangles",model1 = model1_NVT/sum(model_val1), model_name_2 = "ggCaller", model2 = ggC_model1_NVT/sum(ggC_model_val1))
lollipop_cluster_freqs_3points <- function(year = "year unknown", plot_title = "Generic Plot Title",data1, model_name_1 ="Model 1", model1, model_name_2 ="Model 2", model2){
lollipop_data_1 <- data.frame(
x=1:length(data1),
model_1=model1,
data_1=as.numeric(data1),
model_2 = model2
)
# Change baseline
lollipop_plot_1 <- ggplot(lollipop_data_1) +
geom_segment( aes(x=x, xend=x, y=model_1, yend=data_1), color="grey") +
geom_segment( aes(x=x, xend=x, y=model_2, yend=data_1), color="grey") +
geom_point( aes(x=x, y=model_1, color=model_name_1), size=5, shape = 1, stroke = 2, alpha = 0.7) +
geom_point( aes(x=x, y=data_1, color="Data"), size=5, shape = 1, stroke = 2, alpha = 0.7) +
geom_point(aes(x=x, y=model_2, color=model_name_2), size=5, shape = 1, stroke = 2, alpha = 0.7) +
scale_color_manual(values = c("#E69F00","#56B4E9","#CC79A7"),
guide  = guide_legend(),
name   = "Group") +
coord_flip()+
#theme_ipsum() +
theme(legend.position = c(.8,.8),legend.text = element_text(size = 20),legend.title = element_text(size = 20)) +
ggtitle(year) +
ylab("Frequency") +
xlab("Clusters") +
theme(axis.title  = element_text(size = 20), axis.text = element_text(size = 20), plot.title = element_text(size = 25,hjust = 0.5))  +
ylim(0, max(max(lollipop_data_1$model_1)))
grid.arrange(lollipop_plot_1 + scale_y_continuous(limits = c(NA,0.2)) + theme(plot.margin = unit(c(.5,0.5,1,0.5), "cm"),axis.text.y = element_blank()), ncol = 1, nrow=1, top = textGrob(plot_title,gp=gpar(fontsize=20,font=3)))
}
# Plot NVTs
lollipop_cluster_freqs_3points(year = "2001", plot_title = "Non-Vaccine Types, manual Seq Clusters",data1 = mass_cluster_freq_1[which(mass_VT==0)]/sum(mass_cluster_freq_1), model_name_1 = "COGtriangles",model1 = model1_NVT/sum(model_val1), model_name_2 = "ggCaller", model2 = ggC_model1_NVT/sum(ggC_model_val1))
lollipop_cluster_freqs_3points(year = "2004",plot_title = "Non-Vaccine Types, manual Seq Clusters",data1 = mass_cluster_freq_2[which(mass_VT==0)]/sum(mass_cluster_freq_2), model_name_1 = "COGtriangles", model1 = model2_NVT/sum(model_val2), model_name_2 = "ggCaller", model2 = ggC_model2_NVT/sum(ggC_model_val2))
lollipop_cluster_freqs_3points <- function(year = "year unknown", plot_title = "Generic Plot Title",data1, model_name_1 ="Model 1", model1, model_name_2 ="Model 2", model2){
lollipop_data_1 <- data.frame(
x=1:length(data1),
model_1=model1,
data_1=as.numeric(data1),
model_2 = model2
)
# Change baseline
lollipop_plot_1 <- ggplot(lollipop_data_1) +
geom_segment( aes(x=x, xend=x, y=model_1, yend=data_1), color="grey") +
geom_segment( aes(x=x, xend=x, y=model_2, yend=data_1), color="grey") +
geom_point( aes(x=x, y=model_1, color=model_name_1), size=5, shape = 1, stroke = 2, alpha = 0.7) +
geom_point( aes(x=x, y=data_1, color="Data"), size=5, shape = 1, stroke = 2, alpha = 0.7) +
geom_point(aes(x=x, y=model_2, color=model_name_2), size=5, shape = 1, stroke = 2, alpha = 0.7) +
#geom_point( aes(x=x, y=model_1, color=model_name_1), size=5, alpha = 0.7) +
#geom_point( aes(x=x, y=data_1, color="Data"), size=5, alpha = 0.7) +
#geom_point(aes(x=x, y=model_2, color=model_name_2), size=5, alpha = 0.7) +
scale_color_manual(values = c("#E69F00","#56B4E9","#CC79A7"),
guide  = guide_legend(),
name   = "Group") +
coord_flip()+
#theme_ipsum() +
theme(legend.position = c(.8,.8),legend.text = element_text(size = 20),legend.title = element_text(size = 20)) +
ggtitle(year) +
ylab("Frequency") +
xlab("Clusters") +
theme(axis.title  = element_text(size = 20), axis.text = element_text(size = 20), plot.title = element_text(size = 25,hjust = 0.5))  +
ylim(0, max(max(lollipop_data_1$model_1)))
grid.arrange(lollipop_plot_1 + scale_y_continuous(limits = c(NA,0.2)) + theme(plot.margin = unit(c(.5,0.5,1,0.5), "cm"),axis.text.y = element_blank()), ncol = 1, nrow=1, top = textGrob(plot_title,gp=gpar(fontsize=20,font=3)))
}
# Plot NVTs
lollipop_cluster_freqs_3points(year = "2001", plot_title = "Non-Vaccine Types, manual Seq Clusters",data1 = mass_cluster_freq_1[which(mass_VT==0)]/sum(mass_cluster_freq_1), model_name_1 = "COGtriangles",model1 = model1_NVT/sum(model_val1), model_name_2 = "ggCaller", model2 = ggC_model1_NVT/sum(ggC_model_val1))
lollipop_cluster_freqs_3points(year = "2004",plot_title = "Non-Vaccine Types, manual Seq Clusters",data1 = mass_cluster_freq_2[which(mass_VT==0)]/sum(mass_cluster_freq_2), model_name_1 = "COGtriangles", model1 = model2_NVT/sum(model_val2), model_name_2 = "ggCaller", model2 = ggC_model2_NVT/sum(ggC_model_val2))
lollipop_cluster_freqs_3points(year = "2007",plot_title = "Non-Vaccine Types, manual Seq Clusters",data1 = mass_cluster_freq_3[which(mass_VT==0)]/sum(mass_cluster_freq_3), model_name_1 = "COGtriangles", model1 = model3_NVT/sum(model_val3), model_name_2 = "ggCaller", model2 = ggC_model3_NVT/sum(ggC_model_val3))
# Plot VTs
lollipop_cluster_freqs_3points(year = "2001", plot_title = "Vaccine Types, manual Seq Clusters",data1 = mass_cluster_freq_1[which(mass_VT==1)]/sum(mass_cluster_freq_1), model_name_1 = "COGtriangles",model1 = model1_VT/sum(model_val1), model_name_2 = "ggCaller", model2 = ggC_model1_VT/sum(ggC_model_val1))
lollipop_cluster_freqs_3points(year = "2004",plot_title = "Vaccine Types, manual Seq Clusters",data1 = mass_cluster_freq_2[which(mass_VT==1)]/sum(mass_cluster_freq_2), model_name_1 = "COGtriangles", model1 = model2_VT/sum(model_val2), model_name_2 = "ggCaller", model2 = ggC_model2_VT/sum(ggC_model_val2))
lollipop_cluster_freqs_3points(year = "2007",plot_title = "Vaccine Types, manual Seq Clusters",data1 = mass_cluster_freq_3[which(mass_VT==1)]/sum(mass_cluster_freq_3), model_name_1 = "COGtriangles", model1 = model3_VT/sum(model_val3), model_name_2 = "ggCaller", model2 = ggC_model3_VT/sum(ggC_model_val3))
# Plot NVTs
lollipop_cluster_freqs_3points(year = "2001", plot_title = "Non-Vaccine Types, PopPUNK Clusters",data1 = PP_mass_cluster_freq_1[which(PP_mass_VT==0)]/sum(PP_mass_cluster_freq_1), model_name_1 = "COGtriangles",model1 = PP_model1_NVT/sum(PP_model_val1), model_name_2 = "ggCaller", model2 = ggCPP_model1_NVT/sum(ggCPP_model_val1))
lollipop_cluster_freqs_3points(year = "2004",plot_title = "Non-Vaccine Types, PopPUNK  Clusters",data1 = PP_mass_cluster_freq_2[which(PP_mass_VT==0)]/sum(PP_mass_cluster_freq_2), model_name_1 = "COGtriangles", model1 = PP_model2_NVT/sum(PP_model_val2), model_name_2 = "ggCaller", model2 = ggCPP_model2_NVT/sum(ggCPP_model_val2))
lollipop_cluster_freqs_3points(year = "2007",plot_title = "Non-Vaccine Types, PopPUNK  Clusters",data1 = PP_mass_cluster_freq_2[which(PP_mass_VT==0)]/sum(PP_mass_cluster_freq_2), model_name_1 = "COGtriangles", model1 = PP_model3_NVT/sum(PP_model_val3), model_name_2 = "ggCaller", model2 = ggCPP_model3_NVT/sum(ggCPP_model_val3))
# Plot VTs
lollipop_cluster_freqs_3points(year = "2001", plot_title = "Vaccine Types, PopPUNK Clusters",data1 = PP_mass_cluster_freq_1[which(PP_mass_VT==1)]/sum(PP_mass_cluster_freq_1), model_name_1 = "COGtriangles",model1 = PP_model1_VT/sum(PP_model_val1), model_name_2 = "ggCaller", model2 = ggCPP_model1_VT/sum(ggCPP_model_val1))
lollipop_cluster_freqs_3points(year = "2004",plot_title = "Vaccine Types, PopPUNK Clusters",data1 = PP_mass_cluster_freq_2[which(PP_mass_VT==1)]/sum(PP_mass_cluster_freq_2), model_name_1 = "COGtriangles", model1 = PP_model2_VT/sum(PP_model_val2), model_name_2 = "ggCaller", model2 = ggCPP_model2_VT/sum(ggCPP_model_val2))
lollipop_cluster_freqs_3points(year = "2007",plot_title = "Vaccine Types, PopPUNK Clusters",data1 = PP_mass_cluster_freq_2[which(PP_mass_VT==1)]/sum(PP_mass_cluster_freq_2), model_name_1 = "COGtriangles", model1 = PP_model3_VT/sum(PP_model_val3), model_name_2 = "ggCaller", model2 = ggCPP_model3_VT/sum(ggCPP_model_val3))
# maybe come up with an idea of how to plot this
# but the first impression is that serotype and cluster definitions are quite different
all_colors <- colors(TRUE)
my_colors <- all_colors[1:length(unique(Mass_Samples_accCodes$Serotype))]
my_colors
# maybe come up with an idea of how to plot this
# but the first impression is that serotype and cluster definitions are quite different
all_colors <- colors(FALSE)
my_colors <- all_colors[1:length(unique(Mass_Samples_accCodes$Serotype))]
my_colors
install.packages("RColorBrewer")
# maybe come up with an idea of how to plot this
# but the first impression is that serotype and cluster definitions are quite different
library(RColorBrewer)
brewer.pal(7, "BrBG")
my_colors <- brewer.pal(length(unique(Mass_Samples_accCodes$Serotype))], "BrBG")
my_colors <- brewer.pal(length(unique(Mass_Samples_accCodes$Serotype)), "BrBG")
my_colors
# maybe come up with an idea of how to plot this
# but the first impression is that serotype and cluster definitions are quite different
install.packages("Polychrome")
# maybe come up with an idea of how to plot this
# but the first impression is that serotype and cluster definitions are quite different
# install.packages("Polychrome")
library(Polychrome)
# build-in color palette
Glasbey = glasbey.colors(32)
swatch(Glasbey)
#swatch(Glasbey)
names(Glasbey) <- unique(Mass_Samples_accCodes$Serotype)
df_cluster_serotype <- data.frame(matrix(0, nrow = length(unique(Mass_Samples_accCodes$SequenceCluster)), ncol = length(unique(Mass_Samples_accCodes$Serotype))))
serotype_dict <- 1:length(unique(Mass_Samples_accCodes$Serotype))
names(serotype_dict) <- unique(Mass_Samples_accCodes$Serotype)
Mass_Samples_accCodes[Mass_Samples_accCodes$SequenceCluster==1,]$Serotype
df_cluster_serotype <- data.frame(matrix(0, nrow = length(unique(Mass_Samples_accCodes$SequenceCluster)), ncol = length(unique(Mass_Samples_accCodes$Serotype))))
serotype_dict <- 1:length(unique(Mass_Samples_accCodes$Serotype))
names(serotype_dict) <- unique(Mass_Samples_accCodes$Serotype)
for (i in 1:length(unique(Mass_Samples_accCodes$SequenceCluster))) {
serotypes_in_clust <- Mass_Samples_accCodes[Mass_Samples_accCodes$SequenceCluster==i-1,]$Serotype
for (j in serotypes_in_clust) {
df_cluster_serotype[i, serotype_dict[j]] <- df_cluster_serotype[i, serotype_dict[j]] + 1
}
}
View(df_cluster_serotype)
ggplot(Mass_Samples_accCodes, aes(fill=Serotype, y=1, x=SequenceCluster)) +
geom_bar(position='stack', stat='identity')
library(ggplot2)
ggplot(Mass_Samples_accCodes, aes(fill=Serotype, y=1, x=SequenceCluster)) +
geom_bar(position='stack', stat='identity')
ggplot(Mass_Samples_accCodes, aes(fill=SequenceCluster, y=1, x=Serotype)) +
geom_bar(position='stack', stat='identity')
ggplot(Mass_Samples_accCodes, aes(fill=Serotype, y=1, x=SequenceCluster)) +
geom_bar(position='stack', stat='identity')
ggplot(Mass_Samples_accCodes, aes(fill=SequenceCluster, y=1, x=Serotype)) +
geom_bar(position='stack', stat='identity')
#Compute consensus genomes for sequence clusters
Mass_serotypes_dict <- Mass_Samples_accCodes$Serotype
names(Mass_serotypes_dict) <- Mass_Samples_accCodes$`Isolate Name`
Mass_serotypes_dict
View(intermed_gene_presence_absence)
Mass_serotypes_dict[unlist(intermed_gene_presence_absence[1,-1])]==unique(Mass_Samples_accCodes$Serotype)[1]
Sero_intermed_gene_presence_absence_consensus <- data.frame(matrix(0, nrow = sum(cog_filter)+1, ncol = length(unique(Mass_Samples_accCodes$Serotype))+1))
Sero_intermed_gene_presence_absence_consensus[1,-1] <- unique(Mass_Samples_accCodes$Serotype)
Sero_intermed_gene_presence_absence_consensus_2001 <- data.frame(matrix(0, nrow = sum(cog_filter)+1, ncol = length(unique(Mass_Samples_accCodes$Serotype))+1))
Sero_intermed_gene_presence_absence_consensus_2001[1,-1] <- unique(Mass_Samples_accCodes$Serotype)
Sero_intermed_gene_presence_absence_consensus_2004 <- data.frame(matrix(0, nrow = sum(cog_filter)+1, ncol = length(unique(Mass_Samples_accCodes$Serotype))+1))
Sero_intermed_gene_presence_absence_consensus_2004[1,-1] <- unique(Mass_Samples_accCodes$Serotype)
Sero_intermed_gene_presence_absence_consensus_2007 <- data.frame(matrix(0, nrow = sum(cog_filter)+1, ncol = length(unique(Mass_Samples_accCodes$Serotype))+1))
Sero_intermed_gene_presence_absence_consensus_2007[1,-1] <- unique(Mass_Samples_accCodes$Serotype)
cons_genomes <- function(x){
as.double(ceiling(median(as.integer(x))))
}
for (i in 1:length(unique(Mass_Samples_accCodes$Serotype))) {
Sero_intermed_gene_presence_absence_consensus[-1,i+1] <- apply(as.matrix(intermed_gene_presence_absence[-1,c(FALSE,Mass_serotypes_dict[unlist(intermed_gene_presence_absence[1,-1])]==unique(Mass_Samples_accCodes$Serotype)[i])]), 1, cons_genomes)
Sero_intermed_gene_presence_absence_consensus_2001[-1,i+1] <- apply(as.matrix(intermed_gene_presence_absence_2001[-1,c(FALSE,Mass_serotypes_dict[unlist(intermed_gene_presence_absence_2001[1,-1])]==unique(Mass_Samples_accCodes$Serotype)[i])]), 1, cons_genomes)
Sero_intermed_gene_presence_absence_consensus_2004[-1,i+1] <- apply(as.matrix(intermed_gene_presence_absence_2004[-1,c(FALSE,Mass_serotypes_dict[unlist(intermed_gene_presence_absence_2004[1,-1])]==unique(Mass_Samples_accCodes$Serotype)[i])]), 1, cons_genomes)
Sero_intermed_gene_presence_absence_consensus_2007[-1,i+1] <- apply(as.matrix(intermed_gene_presence_absence_2007[-1,c(FALSE,Mass_serotypes_dict[unlist(intermed_gene_presence_absence_2007[1,-1])]==unique(Mass_Samples_accCodes$Serotype)[i])]), 1, cons_genomes)
}
Sero_intermed_gene_presence_absence_consensus[-1,1] <- intermed_gene_presence_absence[-1,1]
Sero_intermed_gene_presence_absence_consensus_2001[-1,1] <- intermed_gene_presence_absence[-1,1]
Sero_intermed_gene_presence_absence_consensus_2004[-1,1] <- intermed_gene_presence_absence[-1,1]
Sero_intermed_gene_presence_absence_consensus_2007[-1,1] <- intermed_gene_presence_absence[-1,1]
View(Sero_intermed_gene_presence_absence_consensus)
#save intermed gene presence absence matrices
saveRDS(Sero_intermed_gene_presence_absence_consensus, file = "Sero_intermed_gene_presence_absence_consensus.rds")
saveRDS(Sero_intermed_gene_presence_absence_consensus_2001, file = "Sero_intermed_gene_presence_absence_consensus_2001.rds")
saveRDS(Sero_intermed_gene_presence_absence_consensus_2004, file = "Sero_intermed_gene_presence_absence_consensus_2004.rds")
saveRDS(Sero_intermed_gene_presence_absence_consensus_2007, file = "Sero_intermed_gene_presence_absence_consensus_2007.rds")
# calculate Vaccine Type consensus for clusters
mass_VT <- rep(0, length(unique(Mass_Samples_accCodes$Serotype)))
for (i in 1:length(unique(Mass_Samples_accCodes$Serotype))){
Sero_mass_VT[i] <- ceiling(median(as.integer(Mass_Samples_accCodes[Mass_Samples_accCodes$Serotype == unique(Mass_Samples_accCodes$Serotype)[i],"Vaccine Type"]=="VT")))
}
# calculate Vaccine Type consensus for clusters
Sero_mass_VT <- rep(0, length(unique(Mass_Samples_accCodes$Serotype)))
for (i in 1:length(unique(Mass_Samples_accCodes$Serotype))){
Sero_mass_VT[i] <- ceiling(median(as.integer(Mass_Samples_accCodes[Mass_Samples_accCodes$Serotype == unique(Mass_Samples_accCodes$Serotype)[i],"Vaccine Type"]=="VT")))
}
Sero_mass_VT
# calculate Vaccine Type consensus for clusters
Sero_mass_VT <- rep(0, length(unique(Mass_Samples_accCodes$Serotype)))
for (i in 1:length(unique(Mass_Samples_accCodes$Serotype))){
Sero_mass_VT[i] <- ceiling(mean(as.integer(Mass_Samples_accCodes[Mass_Samples_accCodes$Serotype == unique(Mass_Samples_accCodes$Serotype)[i],"Vaccine Type"]=="VT")))
}
Sero_mass_VT
for (i in 1:length(unique(Mass_Samples_accCodes$Serotype))){
Sero_mass_VT[i] <- ceiling(median(as.integer(Mass_Samples_accCodes[Mass_Samples_accCodes$Serotype == unique(Mass_Samples_accCodes$Serotype)[i],"Vaccine Type"]=="VT")))
}
#save VTs
saveRDS(Sero_mass_VT, file = "Sero_mass_VT.rds")
#calculate the frequency of the sequence clusters and year
Sero_freq_1 <- rep(0,length(unique(Mass_Samples_accCodes$Serotype)))
Sero_freq_2 <- rep(0,length(unique(Mass_Samples_accCodes$Serotype)))
Sero_freq_3 <- rep(0,length(unique(Mass_Samples_accCodes$Serotype)))
for (i in 1:length(unique(Mass_Samples_accCodes$Serotype))){
Sero_freq_1[i] <- length(which(Mass_Samples_accCodes[which(Mass_Samples_accCodes$Serotype==unique(Mass_Samples_accCodes$Serotype)[i]),]$"Year of Isolation"==2001))
Sero_freq_2[i] <- length(which(Mass_Samples_accCodes[which(Mass_Samples_accCodes$Serotype==unique(Mass_Samples_accCodes$Serotype)[i]),]$"Year of Isolation"==2004))
Sero_freq_3[i] <- length(which(Mass_Samples_accCodes[which(Mass_Samples_accCodes$Serotype==unique(Mass_Samples_accCodes$Serotype)[i]),]$"Year of Isolation"==2007))
}
Sero_freq_1
Sero_freq_2
Sero_freq_3
#save sequence cluster frequencies
saveRDS(Sero_freq_1, file = "Sero_freq_1.rds")
saveRDS(Sero_freq_2, file = "Sero_freq_2.rds")
saveRDS(Sero_freq_3, file = "Sero_freq_3.rds")
### create initial population that is based on the 2001 data set but not an exact sampling from it
# but a Poisson process
Sero_expand_factor <- 15000 / sum(Sero_freq_1)
exp_noise <- 10
Sero_model_start_pop <- (sapply((Sero_freq_1 + rexp(n = length(Sero_freq_1), rate = exp_noise)) * expand_factor, rpois, n=1))
Sero_model_start_pop <- (sapply((Sero_freq_1 + rexp(n = length(Sero_freq_1), rate = exp_noise)) * Sero_expand_factor, rpois, n=1))
# visual check for the "sampling"
plot(Sero_freq_1/sum(Sero_freq_1))
points(Sero_model_start_pop/sum(Sero_model_start_pop), col = "red")
saveRDS(Sero_model_start_pop, file = "Sero_model_start_pop")
saveRDS(Sero_model_start_pop, file = "Sero_model_start_pop.rds")
saveRDS(Sero_model_start_pop, file = "Sero_model_start_pop.rds")
#Mass_Samples_accCodes <- readRDS(file = "Mass_Samples_accCodes.rds")
Sero_intermed_gene_presence_absence_consensus <- readRDS(file = "Sero_intermed_gene_presence_absence_consensus.rds")
Sero_intermed_gene_presence_absence_consensus_matrix <- sapply(Sero_intermed_gene_presence_absence_consensus[-1,-1],as.double)
Sero_model_start_pop <- readRDS(file = "Sero_model_start_pop.rds")
#delta_ranking <- readRDS(file = "delta_ranking.rds")
Sero_freq_1 <- readRDS(file = "Sero_freq_1.rds")
Sero_freq_2<- readRDS(file = "Sero_freq_2.rds")
Sero_freq_3 <- readRDS(file = "Sero_freq_3.rds")
Sero_mass_VT <- readRDS(file = "Sero_mass_VT.rds")
mass_serotypes <- length(unique(Mass_Samples_accCodes$Serotype))
avg_sero_freq <- rep(1/mass_serotypes, mass_serotypes)
params_n_vP <- list(dt = 1/36, species_no = mass_serotypes,  gene_no = nrow(Sero_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(Sero_model_start_pop), Pop_eq = as.double(Sero_model_start_pop), capacity = sum(Sero_model_start_pop), Genotypes = Sero_intermed_gene_presence_absence_consensus_matrix, sigma_f = 0.2193191513, sigma_w = 0.0007111157, prop_f = 0.3735531590, delta = delta_ranking, m = 0.0052207254, migVec = avg_sero_freq, vaccTypes = Sero_mass_VT, v = 0.1321567425, vacc_time = 0)
sero_fit_dfoptim <- function(params){
all_params <- list(dt = 1/36, species_no = mass_serotypes,  gene_no = nrow(Sero_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(Sero_model_start_pop), Pop_eq = as.double(Sero_model_start_pop), capacity = sum(Sero_model_start_pop), Genotypes = Sero_intermed_gene_presence_absence_consensus_matrix, sigma_f = params[1], sigma_w = params[2], prop_f = params[3], delta = delta_ranking, m = params[4], migVec = avg_sero_freq, vaccTypes = Sero_mass_VT, v = params[5], vacc_time = 0)
WFmodel <- WF_nG_h_vP$new(pars = all_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(WFmodel$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
combined_compare(x[,1,37],Sero_freq_2) + combined_compare(x[,1,73],Sero_freq_3)
#sum((x[,1,37]/sum(x[,1,37]) - (mass_cluster_freq_2/sum(mass_cluster_freq_2)))^2) + sum((x[,1,73]/sum(x[,1,73]) - (mass_cluster_freq_3/sum(mass_cluster_freq_3)))^2)
#sum(abs(x[,1,37]/sum(x[,1,37]) - (mass_cluster_freq_2/sum(mass_cluster_freq_2)))) + sum(abs(x[,1,73]/sum(x[,1,73]) - (mass_cluster_freq_3/sum(mass_cluster_freq_3))))
}
optim_fit <- nmkb(c(0.15, 0.05, 0.25, 0.03, 0.05), sero_fit_dfoptim, lower=c(0,0,0,0,0), upper=c(1,1,1,1,1), control = c(maximize = TRUE))
# install.packages("drat") # -- if you don't have drat installed
# drat:::add("ncov-ic")
# install.packages("odin.dust")
library(odin.dust)
#install.packages("mcstate")
library(mcstate)
# Package for derivative-free fitting in R:
library(dfoptim)
optim_fit <- nmkb(c(0.15, 0.05, 0.25, 0.03, 0.05), sero_fit_dfoptim, lower=c(0,0,0,0,0), upper=c(1,1,1,1,1), control = c(maximize = TRUE))
WF_nG_h_vP <- odin.dust::odin_dust("NFDS_Model.R")
# copy of WrightFisherModel/WrightFisher_newData_nGenotypes_haploid_PopsizeVariablePois.R
optim_fit <- nmkb(c(0.15, 0.05, 0.25, 0.03, 0.05), sero_fit_dfoptim, lower=c(0,0,0,0,0), upper=c(1,1,1,1,1), control = c(maximize = TRUE))
#$par
#[1] 0.326448072 0.001129911 0.384818488 0.011920907 0.187427953
#$value
#[1] -193.3568
optim_fit
#save model start population
#saveRDS(PopPUNK_clusters, file = "PopPUNK_clusters.rds")
PopPUNK_clusters <- readRDS(file = "PopPUNK_clusters.rds")
View(PopPUNK_clusters)
View(ggC_intermed_gene_presence_absence)
#Compute consensus genomes for sequence clusters
#SeroggC_Mass_seq_clusters_dict <- PopPUNK_clusters$Cluster
#names(ggCPP_Mass_seq_clusters_dict) <- PopPUNK_clusters$Taxon
ggCsero_intermed_gene_presence_absence_consensus <- data.frame(matrix(0, nrow = sum(ggC_filter)+1, ncol = length(unique(Mass_Samples_accCodes$Serotype))+1))
ggCsero_intermed_gene_presence_absence_consensus[1,-1] <-unique(Mass_Samples_accCodes$Serotype)
ggCsero_intermed_gene_presence_absence_consensus_2001 <- data.frame(matrix(0, nrow = sum(ggC_filter)+1, ncol = length(unique(Mass_Samples_accCodes$Serotype))+1))
ggCsero_intermed_gene_presence_absence_consensus_2001[1,-1] <- unique(Mass_Samples_accCodes$Serotype)
ggCsero_intermed_gene_presence_absence_consensus_2004 <- data.frame(matrix(0, nrow = sum(ggC_filter)+1, ncol = length(unique(Mass_Samples_accCodes$Serotype))+1))
ggCsero_intermed_gene_presence_absence_consensus_2004[1,-1] <- unique(Mass_Samples_accCodes$Serotype)
ggCsero_intermed_gene_presence_absence_consensus_2007 <- data.frame(matrix(0, nrow = sum(ggC_filter)+1, ncol = length(unique(Mass_Samples_accCodes$Serotype))+1))
ggCsero_intermed_gene_presence_absence_consensus_2007[1,-1] <- unique(Mass_Samples_accCodes$Serotype)
cons_genomes <- function(x){
as.double(ceiling(median(as.integer(x))))
}
for (i in unique(PopPUNK_clusters$Cluster)) {
ggCsero_intermed_gene_presence_absence_consensus[-1,i+1] <- apply(as.matrix(ggC_intermed_gene_presence_absence[-1,c(FALSE,Mass_serotypes_dict[unlist(ggC_intermed_gene_presence_absence[1,-1])]==i)]), 1, cons_genomes)
ggCsero_intermed_gene_presence_absence_consensus_2001[-1,i+1] <- apply(as.matrix(ggC_intermed_gene_presence_absence_2001[-1,c(FALSE,Mass_serotypes_dict[unlist(ggC_intermed_gene_presence_absence_2001[1,-1])]==i)]), 1, cons_genomes)
ggCsero_intermed_gene_presence_absence_consensus_2004[-1,i+1] <- apply(as.matrix(ggC_intermed_gene_presence_absence_2004[-1,c(FALSE,Mass_serotypes_dict[unlist(ggC_intermed_gene_presence_absence_2004[1,-1])]==i)]), 1, cons_genomes)
ggCsero_intermed_gene_presence_absence_consensus_2007[-1,i+1] <- apply(as.matrix(ggC_intermed_gene_presence_absence_2007[-1,c(FALSE,Mass_serotypes_dict[unlist(ggC_intermed_gene_presence_absence_2007[1,-1])]==i)]), 1, cons_genomes)
}
for (i in 1:length(unique(Mass_Samples_accCodes$Serotype))) {
ggCsero_intermed_gene_presence_absence_consensus[-1,i+1] <- apply(as.matrix(ggC_intermed_gene_presence_absence[-1,c(FALSE,Mass_serotypes_dict[unlist(ggC_intermed_gene_presence_absence[1,-1])]==unique(Mass_Samples_accCodes$Serotype)[i])]), 1, cons_genomes)
ggCsero_intermed_gene_presence_absence_consensus_2001[-1,i+1] <- apply(as.matrix(ggC_intermed_gene_presence_absence_2001[-1,c(FALSE,Mass_serotypes_dict[unlist(ggC_intermed_gene_presence_absence_2001[1,-1])]==unique(Mass_Samples_accCodes$Serotype)[i])]), 1, cons_genomes)
ggCsero_intermed_gene_presence_absence_consensus_2004[-1,i+1] <- apply(as.matrix(ggC_intermed_gene_presence_absence_2004[-1,c(FALSE,Mass_serotypes_dict[unlist(ggC_intermed_gene_presence_absence_2004[1,-1])]==unique(Mass_Samples_accCodes$Serotype)[i])]), 1, cons_genomes)
ggCsero_intermed_gene_presence_absence_consensus_2007[-1,i+1] <- apply(as.matrix(ggC_intermed_gene_presence_absence_2007[-1,c(FALSE,Mass_serotypes_dict[unlist(ggC_intermed_gene_presence_absence_2007[1,-1])]==unique(Mass_Samples_accCodes$Serotype)[i])]), 1, cons_genomes)
}
unique(Mass_Samples_accCodes$Serotype)[1]
Mass_serotypes_dict[unlist(ggC_intermed_gene_presence_absence[1,-1])]
#Compute consensus genomes for sequence clusters
#SeroggC_Mass_seq_clusters_dict <- PopPUNK_clusters$Cluster
#names(ggCPP_Mass_seq_clusters_dict) <- PopPUNK_clusters$Taxon
ggCsero_intermed_gene_presence_absence_consensus <- data.frame(matrix(0, nrow = sum(ggC_filter)+1, ncol = length(unique(Mass_Samples_accCodes$Serotype))+1))
ggCsero_intermed_gene_presence_absence_consensus[1,-1] <-unique(Mass_Samples_accCodes$Serotype)
ggCsero_intermed_gene_presence_absence_consensus_2001 <- data.frame(matrix(0, nrow = sum(ggC_filter)+1, ncol = length(unique(Mass_Samples_accCodes$Serotype))+1))
ggCsero_intermed_gene_presence_absence_consensus_2001[1,-1] <- unique(Mass_Samples_accCodes$Serotype)
ggCsero_intermed_gene_presence_absence_consensus_2004 <- data.frame(matrix(0, nrow = sum(ggC_filter)+1, ncol = length(unique(Mass_Samples_accCodes$Serotype))+1))
ggCsero_intermed_gene_presence_absence_consensus_2004[1,-1] <- unique(Mass_Samples_accCodes$Serotype)
ggCsero_intermed_gene_presence_absence_consensus_2007 <- data.frame(matrix(0, nrow = sum(ggC_filter)+1, ncol = length(unique(Mass_Samples_accCodes$Serotype))+1))
ggCsero_intermed_gene_presence_absence_consensus_2007[1,-1] <- unique(Mass_Samples_accCodes$Serotype)
cons_genomes <- function(x){
as.double(ceiling(median(as.integer(x))))
}
for (i in 1:length(unique(Mass_Samples_accCodes$Serotype))) {
ggCsero_intermed_gene_presence_absence_consensus[-1,i+1] <- apply(as.matrix(ggC_intermed_gene_presence_absence[-1,c(FALSE,Mass_serotypes_dict[AccNoToIsolate_dict[filenameToAccNo_dict[unlist(ggC_intermed_gene_presence_absence[1,-1])]]]==unique(Mass_Samples_accCodes$Serotype)[i])]), 1, cons_genomes)
ggCsero_intermed_gene_presence_absence_consensus_2001[-1,i+1] <- apply(as.matrix(ggC_intermed_gene_presence_absence_2001[-1,c(FALSE,Mass_serotypes_dict[AccNoToIsolate_dict[filenameToAccNo_dict[unlist(ggC_intermed_gene_presence_absence[1,-1])]]]==unique(Mass_Samples_accCodes$Serotype)[i])]), 1, cons_genomes)
ggCsero_intermed_gene_presence_absence_consensus_2004[-1,i+1] <- apply(as.matrix(ggC_intermed_gene_presence_absence_2004[-1,c(FALSE,Mass_serotypes_dict[AccNoToIsolate_dict[filenameToAccNo_dict[unlist(ggC_intermed_gene_presence_absence[1,-1])]]]==unique(Mass_Samples_accCodes$Serotype)[i])]), 1, cons_genomes)
ggCsero_intermed_gene_presence_absence_consensus_2007[-1,i+1] <- apply(as.matrix(ggC_intermed_gene_presence_absence_2007[-1,c(FALSE,Mass_serotypes_dict[AccNoToIsolate_dict[filenameToAccNo_dict[unlist(ggC_intermed_gene_presence_absence[1,-1])]]]==unique(Mass_Samples_accCodes$Serotype)[i])]), 1, cons_genomes)
}
Mass_serotypes_dict[AccNoToIsolate_dict[filenameToAccNo_dict[unlist(ggC_intermed_gene_presence_absence[1,-1])]]]
unique(Mass_Samples_accCodes$Serotype)[i]
unique(Mass_Samples_accCodes$Serotype)[1]
Mass_serotypes_dict[AccNoToIsolate_dict[filenameToAccNo_dict[unlist(ggC_intermed_gene_presence_absence[1,-1])]]]==unique(Mass_Samples_accCodes$Serotype)[1]
ggC_intermed_gene_presence_absence[-1,c(FALSE,Mass_serotypes_dict[AccNoToIsolate_dict[filenameToAccNo_dict[unlist(ggC_intermed_gene_presence_absence[1,-1])]]]==unique(Mass_Samples_accCodes$Serotype)[1])]
for (i in 1:length(unique(Mass_Samples_accCodes$Serotype))) {
ggCsero_intermed_gene_presence_absence_consensus[-1,i+1] <- apply(as.matrix(ggC_intermed_gene_presence_absence[-1,c(FALSE,Mass_serotypes_dict[AccNoToIsolate_dict[filenameToAccNo_dict[unlist(ggC_intermed_gene_presence_absence[1,-1])]]]==unique(Mass_Samples_accCodes$Serotype)[i])]), 1, cons_genomes)
ggCsero_intermed_gene_presence_absence_consensus_2001[-1,i+1] <- apply(as.matrix(ggC_intermed_gene_presence_absence_2001[-1,c(FALSE,Mass_serotypes_dict[AccNoToIsolate_dict[filenameToAccNo_dict[unlist(ggC_intermed_gene_presence_absence[1,-1])]]]==unique(Mass_Samples_accCodes$Serotype)[i])]), 1, cons_genomes)
ggCsero_intermed_gene_presence_absence_consensus_2004[-1,i+1] <- apply(as.matrix(ggC_intermed_gene_presence_absence_2004[-1,c(FALSE,Mass_serotypes_dict[AccNoToIsolate_dict[filenameToAccNo_dict[unlist(ggC_intermed_gene_presence_absence[1,-1])]]]==unique(Mass_Samples_accCodes$Serotype)[i])]), 1, cons_genomes)
ggCsero_intermed_gene_presence_absence_consensus_2007[-1,i+1] <- apply(as.matrix(ggC_intermed_gene_presence_absence_2007[-1,c(FALSE,Mass_serotypes_dict[AccNoToIsolate_dict[filenameToAccNo_dict[unlist(ggC_intermed_gene_presence_absence[1,-1])]]]==unique(Mass_Samples_accCodes$Serotype)[i])]), 1, cons_genomes)
}
ggC_intermed_gene_presence_absence_2001[-1,c(FALSE,Mass_serotypes_dict[AccNoToIsolate_dict[filenameToAccNo_dict[unlist(ggC_intermed_gene_presence_absence[1,-1])]]]==unique(Mass_Samples_accCodes$Serotype)[1])]
ggC_intermed_gene_presence_absence_2001[-1,c(FALSE,Mass_serotypes_dict[AccNoToIsolate_dict[filenameToAccNo_dict[unlist(ggC_intermed_gene_presence_absence[1,-1])]]]==unique(Mass_Samples_accCodes$Serotype)[2])]
ggC_intermed_gene_presence_absence_2001[-1,c(FALSE,Mass_serotypes_dict[AccNoToIsolate_dict[filenameToAccNo_dict[unlist(ggC_intermed_gene_presence_absence[1,-1])]]]==unique(Mass_Samples_accCodes$Serotype)[3])]
ggC_intermed_gene_presence_absence_2001[-1,c(FALSE,Mass_serotypes_dict[AccNoToIsolate_dict[filenameToAccNo_dict[unlist(ggC_intermed_gene_presence_absence[1,-1])]]]==unique(Mass_Samples_accCodes$Serotype)[4])]
ggC_intermed_gene_presence_absence_2001[-1,c(FALSE,Mass_serotypes_dict[AccNoToIsolate_dict[filenameToAccNo_dict[unlist(ggC_intermed_gene_presence_absence[1,-1])]]]==unique(Mass_Samples_accCodes$Serotype)[5])]
ggC_intermed_gene_presence_absence_2001[-1,c(FALSE,Mass_serotypes_dict[AccNoToIsolate_dict[filenameToAccNo_dict[unlist(ggC_intermed_gene_presence_absence[1,-1])]]]==unique(Mass_Samples_accCodes$Serotype)[6])]
ggC_intermed_gene_presence_absence_2001[-1,c(FALSE,Mass_serotypes_dict[AccNoToIsolate_dict[filenameToAccNo_dict[unlist(ggC_intermed_gene_presence_absence[1,-1])]]]==unique(Mass_Samples_accCodes$Serotype)[7])]
ggC_intermed_gene_presence_absence_2001[-1,c(FALSE,Mass_serotypes_dict[AccNoToIsolate_dict[filenameToAccNo_dict[unlist(ggC_intermed_gene_presence_absence[1,-1])]]]==unique(Mass_Samples_accCodes$Serotype)[20])]
for (i in 1:length(unique(Mass_Samples_accCodes$Serotype))) {
ggCsero_intermed_gene_presence_absence_consensus[-1,i+1] <- apply(as.matrix(ggC_intermed_gene_presence_absence[-1,c(FALSE,Mass_serotypes_dict[AccNoToIsolate_dict[filenameToAccNo_dict[unlist(ggC_intermed_gene_presence_absence[1,-1])]]]==unique(Mass_Samples_accCodes$Serotype)[i])]), 1, cons_genomes)
ggCsero_intermed_gene_presence_absence_consensus_2001[-1,i+1] <- apply(as.matrix(ggC_intermed_gene_presence_absence_2001[-1,c(FALSE,Mass_serotypes_dict[AccNoToIsolate_dict[filenameToAccNo_dict[unlist(ggC_intermed_gene_presence_absence_2001[1,-1])]]]==unique(Mass_Samples_accCodes$Serotype)[i])]), 1, cons_genomes)
ggCsero_intermed_gene_presence_absence_consensus_2004[-1,i+1] <- apply(as.matrix(ggC_intermed_gene_presence_absence_2004[-1,c(FALSE,Mass_serotypes_dict[AccNoToIsolate_dict[filenameToAccNo_dict[unlist(ggC_intermed_gene_presence_absence_2004[1,-1])]]]==unique(Mass_Samples_accCodes$Serotype)[i])]), 1, cons_genomes)
ggCsero_intermed_gene_presence_absence_consensus_2007[-1,i+1] <- apply(as.matrix(ggC_intermed_gene_presence_absence_2007[-1,c(FALSE,Mass_serotypes_dict[AccNoToIsolate_dict[filenameToAccNo_dict[unlist(ggC_intermed_gene_presence_absence_2007[1,-1])]]]==unique(Mass_Samples_accCodes$Serotype)[i])]), 1, cons_genomes)
}
ggCsero_intermed_gene_presence_absence_consensus[-1,1] <- ggC_intermed_gene_presence_absence[-1,1]
ggCsero_intermed_gene_presence_absence_consensus_2001[-1,1] <- ggC_intermed_gene_presence_absence[-1,1]
ggCsero_intermed_gene_presence_absence_consensus_2004[-1,1] <- ggC_intermed_gene_presence_absence[-1,1]
ggCsero_intermed_gene_presence_absence_consensus_2007[-1,1] <- ggC_intermed_gene_presence_absence[-1,1]
#Mass_Samples_accCodes <- readRDS(file = "Mass_Samples_accCodes.rds")
ggCsero_intermed_gene_presence_absence_consensus <- readRDS(file = "ggCsero_intermed_gene_presence_absence_consensus.rds")
View(ggCsero_intermed_gene_presence_absence_consensus)
saveRDS(ggCsero_intermed_gene_presence_absence_consensus, file = "ggCsero_intermed_gene_presence_absence_consensus.rds")
saveRDS(ggCsero_intermed_gene_presence_absence_consensus_2001, file = "ggCsero_intermed_gene_presence_absence_consensus_2001.rds")
saveRDS(ggCsero_intermed_gene_presence_absence_consensus_2004, file = "ggCsero_intermed_gene_presence_absence_consensus_2004.rds")
saveRDS(ggCsero_intermed_gene_presence_absence_consensus_2007, file = "ggCsero_intermed_gene_presence_absence_consensus_2007.rds")
#Mass_Samples_accCodes <- readRDS(file = "Mass_Samples_accCodes.rds")
ggCsero_intermed_gene_presence_absence_consensus <- readRDS(file = "ggCsero_intermed_gene_presence_absence_consensus.rds")
ggCsero_intermed_gene_presence_absence_consensus_matrix <- sapply(ggCsero_intermed_gene_presence_absence_consensus[-1,-1],as.double)
ggC_delta_ranking <- readRDS(file = "ggC_delta_ranking.rds")
#Mass_Samples_accCodes <- readRDS(file = "Mass_Samples_accCodes.rds")
ggCsero_intermed_gene_presence_absence_consensus <- readRDS(file = "ggCsero_intermed_gene_presence_absence_consensus.rds")
ggCsero_intermed_gene_presence_absence_consensus_matrix <- sapply(ggCsero_intermed_gene_presence_absence_consensus[-1,-1],as.double)
Sero_model_start_pop <- readRDS(file = "Sero_model_start_pop.rds")
#delta_ranking <- readRDS(file = "delta_ranking.rds")
#Sero_freq_1 <- readRDS(file = "Sero_freq_1.rds")
#Sero_freq_2<- readRDS(file = "Sero_freq_2.rds")
#Sero_freq_3 <- readRDS(file = "Sero_freq_3.rds")
#Sero_mass_VT <- readRDS(file = "Sero_mass_VT.rds")
ggCsero_params_n_vP <- list(dt = 1/36, species_no = mass_serotypes,  gene_no = nrow(ggCsero_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(Sero_model_start_pop), Pop_eq = as.double(Sero_model_start_pop), capacity = sum(Sero_model_start_pop), Genotypes = ggCsero_intermed_gene_presence_absence_consensus_matrix, sigma_f = 0.2193191513, sigma_w = 0.0007111157, prop_f = 0.3735531590, delta = ggC_delta_ranking, m = 0.0052207254, migVec = avg_sero_freq, vaccTypes = Sero_mass_VT, v = 0.1321567425, vacc_time = 0)
ggCsero_fit_dfoptim <- function(params){
all_params <- list(dt = 1/36, species_no = mass_serotypes,  gene_no = nrow(ggCsero_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(Sero_model_start_pop), Pop_eq = as.double(Sero_model_start_pop), capacity = sum(Sero_model_start_pop), Genotypes = ggCsero_intermed_gene_presence_absence_consensus_matrix, sigma_f = params[1], sigma_w = params[2], prop_f = params[3], delta = ggC_delta_ranking, m = params[4], migVec = avg_sero_freq, vaccTypes = Sero_mass_VT, v = params[5], vacc_time = 0)
WFmodel <- WF_ggC$new(pars = all_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(WFmodel$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
combined_compare(x[,1,37],Sero_freq_2) + combined_compare(x[,1,73],Sero_freq_3)
#sum((x[,1,37]/sum(x[,1,37]) - (mass_cluster_freq_2/sum(mass_cluster_freq_2)))^2) + sum((x[,1,73]/sum(x[,1,73]) - (mass_cluster_freq_3/sum(mass_cluster_freq_3)))^2)
#sum(abs(x[,1,37]/sum(x[,1,37]) - (mass_cluster_freq_2/sum(mass_cluster_freq_2)))) + sum(abs(x[,1,73]/sum(x[,1,73]) - (mass_cluster_freq_3/sum(mass_cluster_freq_3))))
}
ggCsero_optim_fit <- nmkb(c(0.15, 0.05, 0.25, 0.03, 0.05), ggCsero_fit_dfoptim, lower=c(0,0,0,0,0), upper=c(1,1,1,1,1), control = c(maximize = TRUE))
ggCsero_fit_dfoptim <- function(params){
all_params <- list(dt = 1/36, species_no = mass_serotypes,  gene_no = nrow(ggCsero_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(Sero_model_start_pop), Pop_eq = as.double(Sero_model_start_pop), capacity = sum(Sero_model_start_pop), Genotypes = ggCsero_intermed_gene_presence_absence_consensus_matrix, sigma_f = params[1], sigma_w = params[2], prop_f = params[3], delta = ggC_delta_ranking, m = params[4], migVec = avg_sero_freq, vaccTypes = Sero_mass_VT, v = params[5], vacc_time = 0)
WFmodel <- WF_nG_h_vP$new(pars = all_params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_particles <- 10L
n_times <- 73
x <- array(NA, dim = c(WFmodel$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
combined_compare(x[,1,37],Sero_freq_2) + combined_compare(x[,1,73],Sero_freq_3)
#sum((x[,1,37]/sum(x[,1,37]) - (mass_cluster_freq_2/sum(mass_cluster_freq_2)))^2) + sum((x[,1,73]/sum(x[,1,73]) - (mass_cluster_freq_3/sum(mass_cluster_freq_3)))^2)
#sum(abs(x[,1,37]/sum(x[,1,37]) - (mass_cluster_freq_2/sum(mass_cluster_freq_2)))) + sum(abs(x[,1,73]/sum(x[,1,73]) - (mass_cluster_freq_3/sum(mass_cluster_freq_3))))
}
ggCsero_optim_fit <- nmkb(c(0.15, 0.05, 0.25, 0.03, 0.05), ggCsero_fit_dfoptim, lower=c(0,0,0,0,0), upper=c(1,1,1,1,1), control = c(maximize = TRUE))
ggCsero_optim_fit
