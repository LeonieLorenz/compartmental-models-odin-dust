geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#E69F00","#D55E00", "#CC79A7")) +
scale_x_continuous("Strains", breaks = (1:length(frequent_clusters)),labels = as.character(frequent_clusters))
grid.arrange(p_data,p_model, ncol=1)
p_data <- ggplot(data=barplot_df, aes(x=cluster, y=data, fill=time)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#E69F00","#D55E00", "#CC79A7")) +
scale_x_continuous("Strains", breaks = (1:length(frequent_clusters)),labels = as.character(frequent_clusters))
grid.arrange(p_data,p_model, ncol=1)
p_model <- ggplot(data=barplot_df, aes(x=cluster, y=model, fill=time)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#E69F00","#D55E00", "#CC79A7")) +
scale_x_continuous("Strains", breaks = (1:length(frequent_clusters)),labels = as.character(frequent_clusters)) +
scale_y_continuous(name="Frequency in model", limits=c(0, 0.2))
p_data <- ggplot(data=barplot_df, aes(x=cluster, y=data, fill=time)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#E69F00","#D55E00", "#CC79A7")) +
scale_x_continuous("Strains", breaks = (1:length(frequent_clusters)),labels = as.character(frequent_clusters))  +
scale_y_continuous(name="Frequency in data", limits=c(0, 0.2))
grid.arrange(p_data,p_model, ncol=1)
p_model <- ggplot(data=barplot_df, aes(x=cluster, y=model, fill=time)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#E69F00","#D55E00", "#CC79A7")) +
scale_x_continuous("Strains", breaks = (1:length(frequent_clusters)),labels = as.character(frequent_clusters)) +
scale_y_continuous(name="Frequency in model", limits=c(0, 0.175))
p_data <- ggplot(data=barplot_df, aes(x=cluster, y=data, fill=time)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#E69F00","#D55E00", "#CC79A7")) +
scale_x_continuous("Strains", breaks = (1:length(frequent_clusters)),labels = as.character(frequent_clusters))  +
scale_y_continuous(name="Frequency in data", limits=c(0, 0.175))
grid.arrange(p_data,p_model, ncol=1)
p_model <- ggplot(data=barplot_df, aes(x=cluster, y=model, fill=time)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#E69F00","#D55E00", "#CC79A7")) +
scale_x_continuous("Strains", breaks = (1:length(frequent_clusters)),labels = as.character(frequent_clusters)) +
scale_y_continuous(name="Frequency in model", limits=c(0, 0.175)) +
theme(panel.grid.minor.x = element_line(color = 2,
size = 0.25,
linetype = 1))
p_data <- ggplot(data=barplot_df, aes(x=cluster, y=data, fill=time)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#E69F00","#D55E00", "#CC79A7")) +
scale_x_continuous("Strains", breaks = (1:length(frequent_clusters)),labels = as.character(frequent_clusters))  +
scale_y_continuous(name="Frequency in data", limits=c(0, 0.175))
p_model <- ggplot(data=barplot_df, aes(x=cluster, y=model, fill=time)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#E69F00","#D55E00", "#CC79A7")) +
scale_x_continuous("Strains", breaks = (1:length(frequent_clusters)),labels = as.character(frequent_clusters)) +
scale_y_continuous(name="Frequency in model", limits=c(0, 0.175)) +
theme(panel.grid.minor.x = linewidth(color = 2,
size = 0.25,
linetype = 1))
p_model <- ggplot(data=barplot_df, aes(x=cluster, y=model, fill=time)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#E69F00","#D55E00", "#CC79A7")) +
scale_x_continuous("Strains", breaks = as.character(1:length(frequent_clusters)),labels = as.character(frequent_clusters)) +
scale_y_continuous(name="Frequency in model", limits=c(0, 0.175))
p_data <- ggplot(data=barplot_df, aes(x=cluster, y=data, fill=time)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#E69F00","#D55E00", "#CC79A7")) +
scale_x_continuous("Strains", breaks = (1:length(frequent_clusters)),labels = as.character(frequent_clusters))  +
scale_y_continuous(name="Frequency in data", limits=c(0, 0.175))
grid.arrange(p_data,p_model, ncol=1)
p_model <- ggplot(data=barplot_df, aes(x=cluster, y=model, fill=time)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#E69F00","#D55E00", "#CC79A7")) +
scale_x_continuous("Strains", breaks = (1:length(frequent_clusters)),labels = as.character(frequent_clusters)) +
scale_y_continuous(name="Frequency in model", limits=c(0, 0.175))
p_data <- ggplot(data=barplot_df, aes(x=cluster, y=data, fill=time)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#E69F00","#D55E00", "#CC79A7")) +
scale_x_continuous("Strains", breaks = (1:length(frequent_clusters)),labels = as.character(frequent_clusters))  +
scale_y_continuous(name="Frequency in data", limits=c(0, 0.175))
grid.arrange(p_data,p_model, ncol=1)
p_model <- ggplot(data=barplot_df, aes(x=cluster, y=model, fill=time)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#E69F00","#D55E00", "#CC79A7")) +
scale_x_continuous("Strains", breaks = (1:length(frequent_clusters)),labels = as.character(frequent_clusters)) +
scale_y_continuous(name="Frequency in model", limits=c(0, 0.175)) +
geom_vline(xintercept = 1.5)
p_data <- ggplot(data=barplot_df, aes(x=cluster, y=data, fill=time)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#E69F00","#D55E00", "#CC79A7")) +
scale_x_continuous("Strains", breaks = (1:length(frequent_clusters)),labels = as.character(frequent_clusters))  +
scale_y_continuous(name="Frequency in data", limits=c(0, 0.175))
grid.arrange(p_data,p_model, ncol=1)
p_model <- ggplot(data=barplot_df, aes(x=cluster, y=model, fill=time)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#E69F00","#D55E00", "#CC79A7")) +
scale_x_continuous("Strains", breaks = (1:length(frequent_clusters)),labels = as.character(frequent_clusters)) +
scale_y_continuous(name="Frequency in model", limits=c(0, 0.175)) +
geom_vline(xintercept = 1.5, col = "red")
p_data <- ggplot(data=barplot_df, aes(x=cluster, y=data, fill=time)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#E69F00","#D55E00", "#CC79A7")) +
scale_x_continuous("Strains", breaks = (1:length(frequent_clusters)),labels = as.character(frequent_clusters))  +
scale_y_continuous(name="Frequency in data", limits=c(0, 0.175))
grid.arrange(p_data,p_model, ncol=1)
seq(from=.5, to=length(frequent_clusters)+.5, by = 1)
p_model <- ggplot(data=barplot_df, aes(x=cluster, y=model, fill=time)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#E69F00","#D55E00", "#CC79A7")) +
scale_x_continuous("Strains", breaks = (1:length(frequent_clusters)),labels = as.character(frequent_clusters)) +
scale_y_continuous(name="Frequency in model", limits=c(0, 0.175)) +
geom_vline(xintercept = seq(from=.5, to=length(frequent_clusters)+.5, by = 1), col = "red")
p_data <- ggplot(data=barplot_df, aes(x=cluster, y=data, fill=time)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#E69F00","#D55E00", "#CC79A7")) +
scale_x_continuous("Strains", breaks = (1:length(frequent_clusters)),labels = as.character(frequent_clusters))  +
scale_y_continuous(name="Frequency in data", limits=c(0, 0.175))
grid.arrange(p_data,p_model, ncol=1)
p_model <- ggplot(data=barplot_df, aes(x=cluster, y=model, fill=time)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#E69F00","#D55E00", "#CC79A7")) +
scale_x_continuous("Strains", breaks = (1:length(frequent_clusters)),labels = as.character(frequent_clusters)) +
scale_y_continuous(name="Frequency in model", limits=c(0, 0.175)) +
geom_vline(xintercept = seq(from=.5, to=length(frequent_clusters)+.5, by = 1), col = "grey")
p_data <- ggplot(data=barplot_df, aes(x=cluster, y=data, fill=time)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#E69F00","#D55E00", "#CC79A7")) +
scale_x_continuous("Strains", breaks = (1:length(frequent_clusters)),labels = as.character(frequent_clusters))  +
scale_y_continuous(name="Frequency in data", limits=c(0, 0.175))
library(gridExtra)
grid.arrange(p_data,p_model, ncol=1)
p_data <- ggplot(data=barplot_df, aes(x=cluster, y=data, fill=time)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#E69F00","#D55E00", "#CC79A7")) +
scale_x_continuous("Strains", breaks = (1:length(frequent_clusters)),labels = as.character(frequent_clusters))  +
scale_y_continuous(name="Frequency in data", limits=c(0, 0.175)) +
geom_vline(xintercept = seq(from=.5, to=length(frequent_clusters)+.5, by = 1), col = "grey")
grid.arrange(p_data,p_model, ncol=1)
p_model <- ggplot(data=barplot_df, aes(x=cluster, y=model, fill=time)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#E69F00","#D55E00", "#CC79A7")) +
scale_x_continuous("Strains", breaks = (1:length(frequent_clusters)),labels = as.character(frequent_clusters)) +
scale_y_continuous(name="Frequency in model", limits=c(0, 0.175)) +
geom_vline(xintercept = seq(from=.5, to=length(frequent_clusters)+.5, by = 1), col = "grey") +
theme(text = element_text(size = 20))
grid.arrange(p_data,p_model, ncol=1)
p_data <- ggplot(data=barplot_df, aes(x=cluster, y=data, fill=time)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#E69F00","#D55E00", "#CC79A7")) +
scale_x_continuous("Strains", breaks = (1:length(frequent_clusters)),labels = as.character(frequent_clusters))  +
scale_y_continuous(name="Frequency in data", limits=c(0, 0.175)) +
geom_vline(xintercept = seq(from=.5, to=length(frequent_clusters)+.5, by = 1), col = "grey") +
theme(text = element_text(size = 20))
grid.arrange(p_data,p_model, ncol=1)
mmseq_results_MassNavajo <- read.delim("~/Documents/PhD_Project/Data/Mapping_ggCaller/MMseqs2_results/mmseq_results_MassNavajo.m8", header=FALSE)
gene_presence_absence <- read.csv("~/Documents/PhD_Project/Data/Massachusetts_ggcaller/run_withFuncAnn/ggCaller_output/gene_presence_absence.csv")
View(gene_presence_absence)
### try mapping annotation instead
mass_gene_presence_absence <- read.csv("~/Documents/PhD_Project/Data/Massachusetts_ggcaller/run_withFuncAnn/ggCaller_output/gene_presence_absence.csv")
gene_presence_absence <- read.csv("~/Documents/PhD_Project/Data/StrepPneumo_NavajoNew/ggCaller_output/gene_presence_absence.csv")
View(gene_presence_absence)
navajo_gene_presence_absence <- read.csv("~/Documents/PhD_Project/Data/StrepPneumo_NavajoNew/ggCaller_output/gene_presence_absence.csv")
head(mass_gene_presence_absence[,1])
head(names(mass_gene_presence_absence))
head(mass_gene_presence_absence[,3])
head(navajo_gene_presence_absence[,3])
mass_gene_anno_dict <- mass_gene_presence_absence$Gene
names(mass_gene_anno_dict) <- mass_gene_presence_absence$Annotation
navajo_anno_gene_dict <- navajo_gene_presence_absence$Annotation
names(navajo_anno_gene_dict) <- navajo_gene_presence_absence$Gene
navajo_anno_gene_dict[1]
mass_gene_anno_dict[navajo_anno_gene_dict[1]]
mass_gene_anno_dict[navajo_anno_gene_dict[2]]
mass_gene_anno_dict[navajo_anno_gene_dict[3]]
mass_gene_anno_dict[navajo_anno_gene_dict[4]]
mass_gene_anno_dict[navajo_anno_gene_dict[4]]
mass_gene_anno_dict[navajo_anno_gene_dict[4]]
navajo_gene_anno_dict[mass_anno_gene_dict[4]]
navajo_anno_gene_dict[mass_gene_anno_dict[4]]
navajo_anno_gene_dict[mass_gene_anno_dict[4]]
navajo_anno_gene_dict[mass_gene_anno_dict[2]]
View(mass_gene_presence_absence)
mass_gene_presence_absence[1,3]
mass_gene_presence_absence[2,3]
strsplit(mass_gene_presence_absence[2,3],"SPARC")
strsplit(mass_gene_presence_absence[2,3],"SPARC")[[1]][length(strsplit(mass_gene_presence_absence[2,3],"SPARC")[[1]])]
strsplit(mass_gene_presence_absence[2,3],"SPARC")[[1]][length(strsplit(mass_gene_presence_absence[2,3],"SPARC")[[1]])]
strsplit(mass_gene_presence_absence[3,3],"SPARC")[[1]][length(strsplit(mass_gene_presence_absence[2,3],"SPARC")[[1]])]
strsplit(mass_gene_presence_absence[3,3],"SPARC")[[1]][length(strsplit(mass_gene_presence_absence[3,3],"SPARC")[[1]])]
strsplit(mass_gene_presence_absence[14,3],"SPARC")[[1]][length(strsplit(mass_gene_presence_absence[14,3],"SPARC")[[1]])]
test <- "NA"
if(test){
print("hello")
}
if(! is.na(test)){
print("hello")
}
test <- NA
if(! is.na(test)){
print("hello")
}
mass_gene_anno_dict <- c()
strsplit(mass_gene_presence_absence[1,3],"SPARC")[[1]][length(strsplit(mass_gene_presence_absence[1,3],"SPARC1\_")[[1]])]
strsplit(mass_gene_presence_absence[1,3],"SPARC")[[1]][length(strsplit(mass_gene_presence_absence[1,3],"SPARC1\\_")[[1]])]
strsplit(mass_gene_presence_absence[1,3],"SPARC\\_")[[1]][length(strsplit(mass_gene_presence_absence[1,3],"SPARC1\\_")[[1]])]
strsplit(mass_gene_presence_absence[1,3],"SPARC1\\_")[[1]][length(strsplit(mass_gene_presence_absence[1,3],"SPARC1\\_")[[1]])]
mass_gene_anno_dict <- c()
for (i in 1:nrow(mass_gene_presence_absence)) {
anno <- strsplit(mass_gene_presence_absence[i,3],"SPARC1\\_")[[1]][length(strsplit(mass_gene_presence_absence[i,3],"SPARC1\\_")[[1]])]
if(! is.na(anno)){
mass_gene_anno_dict[anno] <- mass_gene_presence_absence[i,1]
}
}
head(mass_gene_anno_dict)
length(mass_gene_anno_dict)
nrow(mass_gene_presence_absence)
navajo_anno_gene_dict <- c()
navajo_anno_gene_dict <- c()
for(i in 1:nrow(navajo_gene_presence_absence)){
anno <- strsplit(navajo_anno_gene_dict[i,3],"SPARC1\\_")[[1]][length(strsplit(navajo_anno_gene_dict[i,3],"SPARC1\\_")[[1]])]
if(! is.na(anno)){
mass_gene_anno_dict[mass_gene_presence_absence[i,1]] <- anno
}
}
View(navajo_gene_presence_absence)
navajo_anno_gene_dict <- c()
for(i in 1:nrow(navajo_gene_presence_absence)){
anno <- strsplit(navajo_gene_presence_absence[i,3],"SPARC1\\_")[[1]][length(strsplit(navajo_gene_presence_absence[i,3],"SPARC1\\_")[[1]])]
if(! is.na(anno)){
mass_gene_anno_dict[mass_gene_presence_absence[i,1]] <- anno
}
}
nrow(navajo_gene_presence_absence)
length(mass_gene_anno_dict)
mass_gene_anno_dict <- c()
for (i in 1:nrow(mass_gene_presence_absence)) {
anno <- strsplit(mass_gene_presence_absence[i,3],"SPARC1\\_")[[1]][length(strsplit(mass_gene_presence_absence[i,3],"SPARC1\\_")[[1]])]
if(! is.na(anno)){
mass_gene_anno_dict[anno] <- mass_gene_presence_absence[i,1]
}
}
navajo_anno_gene_dict <- c()
for(i in 1:nrow(navajo_gene_presence_absence)){
anno <- strsplit(navajo_gene_presence_absence[i,3],"SPARC1\\_")[[1]][length(strsplit(navajo_gene_presence_absence[i,3],"SPARC1\\_")[[1]])]
if(! is.na(anno)){
navajo_anno_gene_dict[mass_gene_presence_absence[i,1]] <- anno
}
}
nrow(mass_gene_presence_absence)
length(mass_gene_anno_dict)
nrow(navajo_gene_presence_absence)
length(navajo_anno_gene_dict)
navajo_anno_gene_dict[1]
mass_gene_anno_dict[navajo_anno_gene_dict[1]]
Navajo_matching_Mass <- data.frame(NA)
Navajo_matching_Mass$Navajo <- navajo_anno_gene_dict
Navajo_matching_Mass <- data.frame(NA, nrow = length(navajo_anno_gene_dict))
Navajo_matching_Mass$Navajo <- navajo_anno_gene_dict
unname(navajo_anno_gene_dict)
Navajo_matching_Mass$Navajo <- unname(navajo_anno_gene_dict)
Navajo_matching_Mass <- data.frame(NA, nrow = length(navajo_anno_gene_dict), ncol = 2)
Navajo_matching_Mass <- data.frame(NA, nrow = length(navajo_anno_gene_dict), ncol = 2)
colnames(Navajo_matching_Mass) <- c("Navajo", "Matching Mass")
Navajo_matching_Mass$Navajo <- unname(navajo_anno_gene_dict)
Navajo_matching_Mass <- data.frame(NA, nrow = length(navajo_anno_gene_dict), ncol = 2)
colnames(Navajo_matching_Mass) <- c("Navajo", "MatchingMass")
View(Navajo_matching_Mass)
Navajo_matching_Mass <- data.frame(NA, nrow = length(navajo_anno_gene_dict), ncol = 2)
colnames(Navajo_matching_Mass) <- c("Navajo", "MatchingMass")
head(Navajo_matching_Mass)
Navajo_matching_Mass <- data.frame(NA, nrow = length(navajo_anno_gene_dict), ncol = 2)
head(Navajo_matching_Mass)
Navajo_matching_Mass <- data.frame(data = NA, nrow = length(navajo_anno_gene_dict), ncol = 2)
head(Navajo_matching_Mass)
Navajo_matching_Mass <- data.frame(matrix(NA, nrow = length(navajo_anno_gene_dict), ncol = 2))
head(Navajo_matching_Mass)
colnames(Navajo_matching_Mass) <- c("Navajo", "MatchingMass")
Navajo_matching_Mass$  <- unname(navajo_anno_gene_dict)
Navajo_matching_Mass$Navajo <- unname(navajo_anno_gene_dict)
for (i in 1:nrow(Navajo_matching_Mass)) {
Navajo_matching_Mass$MatchingMass[i] <- mass_gene_anno_dict[navajo_anno_gene_dict[i]]
}
missing_match_count <- 0
Navajo_matching_Mass <- data.frame(matrix(NA, nrow = length(navajo_anno_gene_dict), ncol = 2))
colnames(Navajo_matching_Mass) <- c("Navajo", "MatchingMass")
Navajo_matching_Mass$Navajo <- unname(navajo_anno_gene_dict)
missing_match_count <- 0
for (i in 1:nrow(Navajo_matching_Mass)) {
matching_mass <- mass_gene_anno_dict[navajo_anno_gene_dict[i]]
Navajo_matching_Mass$MatchingMass[i] <- matching_mass
if(is.na(matching_mass)){
missing_match_count <- missing_match_count +1
}
}
missing_match_count
unique(unname(navajo_anno_gene_dict))
length(unique(unname(navajo_anno_gene_dict)))
length((unname(navajo_anno_gene_dict)))
unique(mass_gene_presence_absence[,1])
length(unique(mass_gene_presence_absence[,1]))
length(unique(mass_gene_presence_absence[,3]))
length(unique(navajo_gene_presence_absence[,1]))
length(unique(navajo_gene_presence_absence[,3]))
mass_anno_gene_dict <- c()
for (i in 1:nrow(mass_gene_presence_absence)) {
anno <- strsplit(mass_gene_presence_absence[i,3],"SPARC1\\_")[[1]][length(strsplit(mass_gene_presence_absence[i,3],"SPARC1\\_")[[1]])]
if(! is.na(anno)){
mass_anno_gene_dict[mass_gene_presence_absence[i,1]] <- anno
}
}
length(mass_anno_gene_dict)
4938/5256
5024/5712
5024 -222
4802/5712
head(mass_gene_anno_dict)
mass_gene_anno_dict["CL11"]
length(unname(navajo_anno_gene_dict))
head(unname(navajo_anno_gene_dict))
length(unname(mass_anno_gene_dict))
length(unique(unname(mass_anno_gene_dict)))
length(unique(unname(navajo_anno_gene_dict)))
3511/5712
587/(587+1167)
path_to_data <- "~/Documents/PhD_Project/Data/"
Nepal_meta_data <- read.csv(paste(path_to_data, "StrepPneumo_Nepal/GPS_data/gps1+gps2_metadata_results_leonie.csv",sep = ""))
View(Nepal_meta_data)
View(Nepal_meta_data)
Nepal_time_points <- sort(unique(Nepal_meta_data$Year))
Nepal_time_points
Nepal_SeqYear_dict <- Nepal_meta_data$Year
names(Nepal_SeqYear_dict) <- Nepal_meta_data$Lane_id
Nepal_SeqYear_dict
Nepal_meta_IDtoInd <- 1:nrow(Nepal_meta_data)
names(Nepal_meta_IDtoInd) <- Nepal_meta_data$Lane_id
seq_no_per_year <- rep(0, length(Nepal_time_points))
names(seq_no_per_year) <- Nepal_time_points
for (i in 1:length(Nepal_time_points)) {
seq_no_per_year[i] <- length(which(Nepal_meta_data$Year==Nepal_time_points[i]))
}
barplot(seq_no_per_year, xlab = "Sequencing Years", ylim = c(0, 250), ylab = "Sequence Counts")
barplot(seq_no_per_year, xlab = "Sequencing Years", ylim = c(0, 400), ylab = "Sequence Counts")
barplot(seq_no_per_year, xlab = "Sequencing Years", ylim = c(0, 800), ylab = "Sequence Counts")
barplot(seq_no_per_year, xlab = "Sequencing Years", ylim = c(0, 1000), ylab = "Sequence Counts")
barplot(seq_no_per_year, xlab = "Sequencing Years", ylim = c(0, 1200), ylab = "Sequence Counts")
# PCV10 was introduced in 2015
# number of sequences fluctuates a lot from year to year. take just 2009, 2012, 2014, 2017, 2018, 2019?
# or summaries the years somehow?
#Nepal_time_points_selected <- Nepal_time_points[c(5,7,9,12,13)]
# No, I want all the years
Nepal_time_points_selected <- Nepal_time_points
Nepal_time_points_preVac <- Nepal_time_points[1:10]
Nepal_time_points_preVac
Nepal_time_points_selected
min(Nepal_time_points)
max(Nepal_time_points)
# PCV10 was introduced in 2015
# number of sequences fluctuates a lot from year to year. take just 2009, 2012, 2014, 2017, 2018, 2019?
# or summaries the years somehow?
#Nepal_time_points_selected <- Nepal_time_points[c(5,7,9,12,13)]
# No, I want all the years
#Nepal_time_points_selected <- Nepal_time_points
#Nepal_time_points_preVac <- Nepal_time_points[1:10]
Nepal_time_points_selected <- min(Nepal_time_points):max(Nepal_time_points)
Nepal_time_points_preVac <- Nepal_time_points_selected[1:11]
Nepal_time_points_preVac
PP_all <- read.csv(paste(path_to_data, "StrepPneumo_Nepal/GPS_PopPUNK/poppunk_clusters/poppunk_clusters_clusters.csv",sep = ""))
# since Nepal was in the database, I had to run PopPUNK with --write-references
# so now I need to filter this dataset to only have the real Nepal sequences
PP_taxon_ind_dict <- 1:nrow(PP_all)
names(PP_taxon_ind_dict) <- PP_all$Taxon
PP_is_Nepal_dict <- rep(FALSE,nrow(PP_all))
names(PP_is_Nepal_dict) <- PP_all$Taxon
for (i in 1:length(Nepal_meta_data$Lane_id)) {
PP_is_Nepal_dict[Nepal_meta_data$Lane_id[i]] <- TRUE
}
Nepal_PP <- PP_all[PP_is_Nepal_dict,]
no_Nepal_PP <- length(unique(Nepal_PP$Cluster))
no_Nepal_PP
Nepal_PP
head(Nepal_meta_data$Lane_id)
head(PP_all$Taxon)
strsplit("28790_1#85_contigs_velvet", "_contigs_velvet", fixed = TRUE)
strsplit("28790_1#85", "_contigs_velvet", fixed = TRUE)
strsplit("28790_1#85", "_contigs_velvet", fixed = TRUE)[[1]][1]
strsplit("28790_1#85_contigs_velvet", "_contigs_velvet", fixed = TRUE)[[1]][1]
# remove appendix "_contigs_velvet"
remove_contigs_velvet <- function(str_with_app){
str_without_app <- strsplit(str_with_app, "_contigs_velvet", fixed = TRUE)[[1]][1]
str_without_app
}
PP_all$Taxon <- apply(PP_all$Taxon, remove_contigs_velvet)
PP_all$Taxon <- apply(PP_all$Taxon, 1, remove_contigs_velvet)
PP_all$Taxon <- sapply(PP_all$Taxon, remove_contigs_velvet)
PP_all$Taxon
head(PP_all$Taxon)
PP_taxon_ind_dict <- 1:nrow(PP_all)
names(PP_taxon_ind_dict) <- PP_all$Taxon
PP_is_Nepal_dict <- rep(FALSE,nrow(PP_all))
names(PP_is_Nepal_dict) <- PP_all$Taxon
for (i in 1:length(Nepal_meta_data$Lane_id)) {
PP_is_Nepal_dict[Nepal_meta_data$Lane_id[i]] <- TRUE
}
Nepal_PP <- PP_all[PP_is_Nepal_dict,]
no_Nepal_PP <- length(unique(Nepal_PP$Cluster))
no_Nepal_PP
head(Nepal_PP)
nrow(Nepal_PP)
Nepal_seq_clusters_dict <- Nepal_PP$Cluster
names(Nepal_seq_clusters_dict) <- Nepal_PP$Taxon
Nepal_meta_dataPP <- Nepal_meta_data[sort(Nepal_meta_IDtoInd[Nepal_PP$Taxon]),]
for (i in 2:nrow(Nepal_meta_dataPP)) {
if (Nepal_meta_dataPP$Phenotypic_serotype[i] == "") {
Nepal_meta_dataPP$Phenotypic_serotype[i] <- "NT"
}
}
rownames(Nepal_meta_dataPP) <- 1:nrow(Nepal_meta_dataPP)
Nepal_meta_IDtoIndPP <- 1:nrow(Nepal_meta_dataPP)
names(Nepal_meta_IDtoIndPP) <- Nepal_meta_dataPP$Lane_id
View(Nepal_meta_dataPP)
nrow(Nepal_meta_dataPP)
length(Nepal_meta_data$Lane_id)
length(unique(Nepal_meta_data$Lane_id))
tail(Nepal_PP)
View(Nepal_PP)
tail(PP_is_Nepal_dict)
tail(Navajo_PP)
head(PP_is_Nepal_dict)
metadata_has_PP <- rep(FALSE,nrow(Nepal_meta_data))
names(metadata_has_PP) <- Nepal_meta_data$Lane_id
for (i in 1:length(PP_all$Taxon)){
metadata_has_PP[PP_all$Taxon[i]] <- TRUE
}
head(metadata_has_PP)
Nepal_PP <- PP_all[(PP_is_Nepal_dict[PP_all] & metadata_has_PP[PP_all]),]
Nepal_PP <- PP_all[(PP_is_Nepal_dict[PP_all] && metadata_has_PP[PP_all]),]
(PP_is_Nepal_dict[PP_all] && metadata_has_PP[PP_all])
PP_is_Nepal_dict[1]
PP_is_Nepal_dict["28790_1#85 "]
PP_is_Nepal_dict["28790_1#85"]
Nepal_PP <- PP_all[(PP_is_Nepal_dict[PP_all$Taxon] && metadata_has_PP[PP_all$Taxon]),]
PP_is_Nepal_dict[PP_all$Taxon]
Nepal_metadataAndPP <- (PP_is_Nepal_dict[PP_all$Taxon] && metadata_has_PP[PP_all$Taxon])
Nepal_metadataAndPP <- (PP_is_Nepal_dict[PP_all$Taxon] & metadata_has_PP[PP_all$Taxon])
Nepal_metadataAndPP
Nepal_PP <- PP_all[PP_is_Nepal_dict[PP_all$Taxon],]
no_Nepal_PP <- length(unique(Nepal_PP$Cluster))
no_Nepal_PP
nrow(Nepal_PP)
head(PP_is_Nepal_dict[PP_all$Taxon])
head(PP_is_Nepal_dict)
PP_all <- read.csv(paste(path_to_data, "StrepPneumo_Nepal/GPS_PopPUNK/poppunk_clusters/poppunk_clusters_clusters.csv",sep = ""))
# remove appendix "_contigs_velvet"
remove_contigs_velvet <- function(str_with_app){
str_without_app <- strsplit(str_with_app, "_contigs_velvet", fixed = TRUE)[[1]][1]
str_without_app
}
PP_all$Taxon <- sapply(PP_all$Taxon, remove_contigs_velvet)
PP_taxon_ind_dict <- 1:nrow(PP_all)
names(PP_taxon_ind_dict) <- PP_all$Taxon
PP_is_Nepal_dict <- rep(FALSE,nrow(PP_all))
names(PP_is_Nepal_dict) <- PP_all$Taxon
for (i in 1:length(Nepal_meta_data$Lane_id)) {
PP_is_Nepal_dict[Nepal_meta_data$Lane_id[i]] <- TRUE
}
Nepal_PP <- PP_all[PP_is_Nepal_dict[PP_all$Taxon],]
no_Nepal_PP <- length(unique(Nepal_PP$Cluster))
no_Nepal_PP
nrow(Nepal_PP)
nrow(PP_all$Taxon)
nrow(PP_all)
nrow(Nepal_meta_data)
length(which(PP_is_Nepal_dict))
Nepal_PP <- PP_all[which(PP_is_Nepal_dict[PP_all$Taxon]),]
nrow(Nepal_PP)
length(which(PP_is_Nepal_dict[PP_all$Taxon]))
length(which(PP_is_Nepal_dict))
length(PP_all$Taxon)
length(unique(PP_all$Taxon))
View(PP_all)
PP_all$Taxon[duplicated(PP_all$Taxon)]
PP_all <- read.csv(paste(path_to_data, "StrepPneumo_Nepal/GPS_PopPUNK/poppunk_clusters/poppunk_clusters_clusters.csv",sep = ""))
# remove appendix "_contigs_velvet"
remove_contigs_velvet <- function(str_with_app){
str_without_app <- strsplit(str_with_app, "_contigs_velvet", fixed = TRUE)[[1]][1]
str_without_app
}
PP_all$Taxon <- sapply(PP_all$Taxon, remove_contigs_velvet)
duplicated(PP_all$Taxon)
PP_all <- PP_all[-duplicated(PP_all$Taxon),]
nrow(PP_all)
length(unique(PP_all$Taxon))
PP_all <- read.csv(paste(path_to_data, "StrepPneumo_Nepal/GPS_PopPUNK/poppunk_clusters/poppunk_clusters_clusters.csv",sep = ""))
# remove appendix "_contigs_velvet"
remove_contigs_velvet <- function(str_with_app){
str_without_app <- strsplit(str_with_app, "_contigs_velvet", fixed = TRUE)[[1]][1]
str_without_app
}
PP_all$Taxon <- sapply(PP_all$Taxon, remove_contigs_velvet)
-duplicated(PP_all$Taxon)
PP_all <- PP_all[!duplicated(PP_all$Taxon),]
length(unique(PP_all$Taxon))
length((PP_all$Taxon))
PP_taxon_ind_dict <- 1:nrow(PP_all)
names(PP_taxon_ind_dict) <- PP_all$Taxon
PP_is_Nepal_dict <- rep(FALSE,nrow(PP_all))
names(PP_is_Nepal_dict) <- PP_all$Taxon
for (i in 1:length(Nepal_meta_data$Lane_id)) {
PP_is_Nepal_dict[Nepal_meta_data$Lane_id[i]] <- TRUE
}
Nepal_PP <- PP_all[which(PP_is_Nepal_dict[PP_all$Taxon]),]
nrow(Nepal_PP)
no_Nepal_PP <- length(unique(Nepal_PP$Cluster))
no_Nepal_PP
Nepal_seq_clusters_dict <- Nepal_PP$Cluster
names(Nepal_seq_clusters_dict) <- Nepal_PP$Taxon
Nepal_meta_dataPP <- Nepal_meta_data[sort(Nepal_meta_IDtoInd[Nepal_PP$Taxon]),]
for (i in 2:nrow(Nepal_meta_dataPP)) {
if (Nepal_meta_dataPP$Phenotypic_serotype[i] == "") {
Nepal_meta_dataPP$Phenotypic_serotype[i] <- "NT"
}
}
rownames(Nepal_meta_dataPP) <- 1:nrow(Nepal_meta_dataPP)
Nepal_meta_IDtoIndPP <- 1:nrow(Nepal_meta_dataPP)
names(Nepal_meta_IDtoIndPP) <- Nepal_meta_dataPP$Lane_id
nrow(Nepal_meta_dataPP)
saveRDS(Nepal_meta_dataPP, "Nepal_meta_dataPP.rds")
# Add Serotype Information
Nepal_Serotype_dict <- Nepal_meta_dataPP$Phenotypic_serotype
names(Nepal_Serotype_dict) <- Nepal_meta_dataPP$Lane_id
Nepal_PP$Serotype <- Nepal_Serotype_dict[Nepal_PP$Taxon]
Nepal_meta_data$Phenotypic_serotype["48081_2#36"]
head(Nepal_meta_data$Phenotypic_serotype)
head(Nepal_meta_data$In_silico_serotype)
# Add Serotype Information
Nepal_Serotype_dict <- Nepal_meta_dataPP$In_silico_serotype
names(Nepal_Serotype_dict) <- Nepal_meta_dataPP$Lane_id
Nepal_PP$Serotype <- Nepal_Serotype_dict[Nepal_PP$Taxon]
Nepal_meta_dataPP$Phenotypic_serotype
Nepal_meta_dataPP$In_silico_serotype
unique(Nepal_meta_dataPP$In_silico_serotype)
length(which(Nepal_meta_dataPP$In_silico_serotype == "UNTYPABLE"))
length(which(Nepal_meta_dataPP$In_silico_serotype == "COVERAGE TOO LOW"))
