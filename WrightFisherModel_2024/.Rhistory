WFmodel_ggCPP$run(37)
WFmodel_ggCPP$run(72)
fitting_closure_fl <- function(all_other_params, data1, data2){
null_fit_dfoptim_fl <- function(fit_params){
rnd_vect_full <- fit_params
params$delta_bool = rnd_vect_full
WFmodel_ggCPP <- WF$new(pars = params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
#n_particles <- 10L
#n_times <- 73
#x <- array(NA, dim = c(WFmodel_ggCPP$info()$len, n_particles, n_times))
#for (t in seq_len(n_times)) {
#  x[ , , t] <- WFmodel_ggCPP$run(t)
#}
#time <- x[1, 1, ]
#x <- x[-1, , ]
simMeanggCPP2 <- rowMeans(WFmodel_ggCPP$run(36)[-1,])
simMeanggCPP3 <- rowMeans(WFmodel_ggCPP$run(72)[-1,])
- combined_compare(simMeanggCPP2,data1) - combined_compare(simMeanggCPP3,data2)
#- combined_compare(x[,1,37],data1) - combined_compare(x[,1,73],data2)
}
}
FindGenes_ggCPP_params <- list(dt = 1/36, species_no = PP_mass_clusters,  gene_no = nrow(ggCPP_intermed_gene_presence_absence_consensus)-1, Pop_ini = as.double(PP_model_start_pop), Pop_eq = as.double(PP_model_start_pop), capacity = sum(PP_model_start_pop), Genotypes = ggCPP_intermed_gene_presence_absence_consensus_matrix, sigma_f = 0.3090376, sigma_w = 0, prop_f = 1, m = 0.03104461, migVec = PP_avg_cluster_freq, vaccTypes = PP_mass_VT, v = 0.15977862, vacc_time = 0)
fit_FindGenes_ggCPP <- fitting_closure_fl(FindGenes_ggCPP_params, PP_mass_cluster_freq_2, PP_mass_cluster_freq_3)
nextfun <- function(x) rbinom(nrow(ggCPP_intermed_gene_presence_absence_consensus)-1  ,1,0.1)
FindGenes_sa3 <- optim(fn=fit_FindGenes_ggCPP, par=best_best_vec, gr=nextfun, method="SANN",
control=list(maxit=2000,fnscale=1,trace=10))
merge_lists <- function(list1, list2){
out_len <- length(list1) + length(list2)
merged_list <- rep(0, out_len)
iter1 <- 1
iter2 <- 1
item_list1 <- list1[1]
item_list2 <- list2[1]
curr_len <- 0
while (curr_len < out_len) {
if(item_list1 <= item_list2){
merged_list[curr_len + 1] <- item_list1
iter1 <- iter1 + 1
item_list1 <- list1[iter1]
}
else{
merged_list[curr_len + 1] <- item_list2
iter2 <- iter2 + 1
item_list2 <- list2[iter2]
}
curr_len <- curr_len + 1
}
merged_list
}
merged_list(c(1,2,4),c(2,3,5))
merge_list(c(1,2,4),c(2,3,5))
merge_lists(c(1,2,4),c(2,3,5))
merge_lists <- function(list1, list2){
out_len <- length(list1) + length(list2)
merged_list <- rep(0, out_len)
iter1 <- 1
iter2 <- 1
item_list1 <- list1[1]
item_list2 <- list2[1]
print(item_list1)
print(item_list2)
curr_len <- 0
while (curr_len < out_len) {
if(item_list1 <= item_list2){
merged_list[curr_len + 1] <- item_list1
iter1 <- iter1 + 1
item_list1 <- list1[iter1]
}
else{
merged_list[curr_len + 1] <- item_list2
iter2 <- iter2 + 1
item_list2 <- list2[iter2]
}
curr_len <- curr_len + 1
}
merged_list
}
merge_lists(c(1,2,4),c(2,3,5))
c(2,3,5)[4]
merge_lists <- function(list1, list2){
out_len <- length(list1) + length(list2)
merged_list <- rep(0, out_len)
iter1 <- 1
iter2 <- 1
item_list1 <- list1[1]
item_list2 <- list2[1]
curr_len <- 0
while (curr_len < out_len) {
if(item_list1 <= item_list2 | iter2 > length(list2)){
merged_list[curr_len + 1] <- item_list1
iter1 <- iter1 + 1
item_list1 <- list1[iter1]
}
else{
merged_list[curr_len + 1] <- item_list2
iter2 <- iter2 + 1
item_list2 <- list2[iter2]
}
curr_len <- curr_len + 1
}
merged_list
}
merge_lists(c(1,2,4),c(2,3,5))
merge_lists <- function(list1, list2){
out_len <- length(list1) + length(list2)
merged_list <- rep(0, out_len)
iter1 <- 1
iter2 <- 1
item_list1 <- list1[1]
item_list2 <- list2[1]
curr_len <- 0
while (curr_len < out_len) {
if(item_list1 <= item_list2 || iter2 > length(list2)){
merged_list[curr_len + 1] <- item_list1
iter1 <- iter1 + 1
item_list1 <- list1[iter1]
}
else{
merged_list[curr_len + 1] <- item_list2
iter2 <- iter2 + 1
item_list2 <- list2[iter2]
}
curr_len <- curr_len + 1
}
merged_list
}
merge_lists(c(1,2,4),c(2,3,5))
is.na(c(1,2,4)[4])
merge_lists <- function(list1, list2){
)
merge_lists <- function(list1, list2){
out_len <- length(list1) + length(list2)
merged_list <- rep(0, out_len)
iter1 <- 1
iter2 <- 1
item_list1 <- list1[1]
item_list2 <- list2[1]
curr_len <- 0
while (curr_len < out_len) {
if(!is.na(item_list1) & item_list1 <= item_list2 || is.na(item_list2)){
merged_list[curr_len + 1] <- item_list1
iter1 <- iter1 + 1
item_list1 <- list1[iter1]
}
else{
merged_list[curr_len + 1] <- item_list2
iter2 <- iter2 + 1
item_list2 <- list2[iter2]
}
curr_len <- curr_len + 1
}
merged_list
}
merge_lists(c(1,2,4),c(2,3,5))
split(c(1,2,4),2)
install.packages("DescTools")
library(DescTools)
length(c(1,2,3))/2
ceil(length(c(1,2,3))/2)
ceiling(length(c(1,2,3))/2)
SplitAt(c(1,2,3),2)
SplitAt(c(1,2,3),2)[[1]]
merge_sort <- function(my_list){
# split my_list into left and right
split_list <- SplitAt(my_list, ceiling(length(my_list)/2))
left <- split_list[[1]]
right <- split_list[[2]]
if (length(left) > 1){
merge_sort(left)
}
if (length(right) > 1){
merge_sort(right)
}
merge_lists(left, right)
}
merge_sort(c(2,3,1,5,4,2))
### Closures
linear_regression_predict <- function(x, slope, intercept) {
intercept + x * slope
}
slope <- -2.0
intercept <- 3.0
model1 <- function(x) {linear_regression_predict(x, slope, intercept)}
predict_values <- c(-1.0, 0.0, 1.0, 5.0)
model1_predictions <- sapply(predict_values, model1)
model1_predictions
rosen <- function(x) {rosenbrock(1, 100, x[1], x[2])} # or we could write a <- 1; b <- 100 above
optim(start_value, rosen)
start_value <- c(-1.2, 1)
rosenbrock <- function(a, b, x, y) {
(a-x)^2 + b*(y-x^2)^2
}
rosen <- function(x) {rosenbrock(1, 100, x[1], x[2])} # or we could write a <- 1; b <- 100 above
optim(start_value, rosen)
# With the gradient
gradient <- function(a, b, x, y) {
ddx <- -2*a + 4*b*x^3 - 4*b*x*y + 2*x
ddy <- 2*b*(y-x^2)
c(ddx, ddy)
}
rosen_g <- function(x) {gradient(1, 100, x[1], x[2])}
optim(start_value, rosen, rosen_g, method = "BFGS", control = list(trace = 1)
merge_sort <- function(my_list){
merge_sort <- function(my_list){
# split my_list into left and right
split_list <- SplitAt(my_list, ceiling(length(my_list)/2))
left <- split_list[[1]]
right <- split_list[[2]]
if (length(left) > 1){
left <- merge_sort(left)
}
if (length(right) > 1){
right <- merge_sort(right)
}
merge_lists(left, right)
}
merge_sort(c(1,5,4,2,6,3))
merge_sort <- function(my_list){
# split my_list into left and right
split_list <- SplitAt(my_list, ceiling(length(my_list)/2))
left <- split_list[[1]]
right <- split_list[[2]]
print(left)
print(right)
if (length(left) > 1){
left <- merge_sort(left)
}
if (length(right) > 1){
right <- merge_sort(right)
}
merge_lists(left, right)
}
merge_sort(c(1,5,4,2,6,3))
merge_sort(c(5,4))
merge_sort <- function(my_list){
# split my_list into left and right
split_list <- SplitAt(my_list, ceiling(length(my_list)/2))
left <- split_list[[1]]
right <- split_list[[2]]
print(length(left))
print(length(right))
if (length(left) > 1){
left <- merge_sort(left)
}
if (length(right) > 1){
right <- merge_sort(right)
}
merge_lists(left, right)
}
merge_sort(c(5,4))
SplitAt(c(5,4), ceiling(length(c(5,4))/2))
ceiling(length(c(5,4))/2)
SplitAt(c(1,2,3),2)
SplitAt(c(1,2,3),1)
SplitAt(c(1,2,3),3)
SplitAt(c(1,2,3),pos = 3)
SplitAt(c(1,2,3,4),pos = 3)
SplitAt(c(1,2,3,4),pos = 2)
SplitAt(c(1,2),pos = 1)
SplitAt(c(1,2),pos = 2)
SplitAt(c(1,2,3),pos = 2)
floor(3/2)
merge_sort <- function(my_list){
# split my_list into left and right
split_list <- SplitAt(my_list, floor(length(my_list)/2) + 1)
left <- split_list[[1]]
right <- split_list[[2]]
print(length(left))
print(length(right))
if (length(left) > 1){
left <- merge_sort(left)
}
if (length(right) > 1){
right <- merge_sort(right)
}
merge_lists(left, right)
}
merge_sort(c(1,5,4,2,6,3))
# merge_sort(c(1,5,4,2,6,3))
merge_sort(c(10,25,400,20,6,13, 70, 20, 11))
### Loading packages
# install.packages("drat") # -- if you don't have drat installed
# drat:::add("ncov-ic")
# install.packages("odin.dust")
library(odin.dust)
#install.packages("mcstate")
library(mcstate)
#install.packages("mcstate")
library(mcstate)
library(coda)
# read in model from file
WF <- odin.dust::odin_dust("NFDS_Model_PPxSero.R")
combined_compare <- function(state, observed, pars = NULL) {
result <- 0
#data_size <- sum(mass_cluster_freq_1)
#model_size = 15000
data_size <- sum(unlist(observed))
model_size = sum(unlist(state[2:mass_clusters+1, , drop = TRUE]))
for (i in 1:mass_clusters){
result <- result + ll_pois(observed[[as.character(i)]], state[1+i, , drop = TRUE]/model_size * data_size)
}
result
}
seq_clusters <- readRDS("PopPUNK_clusters.rds")
sero_no = length(unique(seq_clusters$Serotype))
intermed_gene_presence_absence_consensus <- readRDS(file = "ggCPP_intermed_gene_presence_absence_consensus.rds")
intermed_gene_presence_absence_consensus_matrix <- sapply(intermed_gene_presence_absence_consensus[-1,-1],as.double)
model_start_pop <- readRDS(file = "PPsero_startpop.rds")
delta_ranking <- readRDS(file = "ggC_delta_ranking.rds")
mass_cluster_freq_1 <- readRDS(file = "PP_mass_cluster_freq_1.rds")
mass_cluster_freq_2 <- readRDS(file = "PP_mass_cluster_freq_2.rds")
mass_cluster_freq_3 <- readRDS(file = "PP_mass_cluster_freq_3.rds")
mass_VT <- readRDS(file = "SeroVT.rds")
mass_clusters <- length(unique(seq_clusters$Cluster))
avg_cluster_freq <- readRDS(file = "PPsero_mig.rds")
output_filename <- "PPxSero_ggCaller_PopPUNK"
dim(model_start_pop)
# process data with particle filter:
dt <- 1/36 # we assume that the generation time of Strep. pneumo is 1 month
peripost_mass_cluster_freq <- data.frame("year" = c(1, 2), rbind(mass_cluster_freq_2, mass_cluster_freq_3))
names(peripost_mass_cluster_freq) <- c("year", as.character(1:mass_clusters))
fitting_mass_data <- mcstate::particle_filter_data(data = peripost_mass_cluster_freq,
time = "year",
rate = 1 / dt,
initial_time = 0)
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
# Using MCMC to infer parameters
pmcmc_sigma_f <- mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0, max = 1)
#pmcmc_sigma_w <- 0
pmcmc_sigma_w <- -1000
pmcmc_prop_f <- mcstate::pmcmc_parameter("prop_f", 0.2, min = 0, max = 1)
pmcmc_m <- mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1)
pmcmc_v <- mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)
species_no <- mass_clusters
no_clusters <- mass_clusters
gene_no <- nrow(intermed_gene_presence_absence_consensus_matrix)
Pop_ini <- model_start_pop
Pop_eq <- model_start_pop
Genotypes <- intermed_gene_presence_absence_consensus_matrix
capacity <- sum(model_start_pop)
delta <- delta_ranking
vaccTypes <- mass_VT
vacc_time <- 0
dt <- 1/36
migVec <- avg_cluster_freq
complex_params <- c(Pop_ini, Pop_eq, Genotypes, capacity, delta, vaccTypes, species_no, gene_no, vacc_time, dt, migVec, pmcmc_sigma_w)
dim(Pop_ini)
62*32
nrow(Pop_ini) * ncol(Pop_ini)
nrow(Pop_eq) * nrow(Pop_eq)
nrow(Pop_eq) * ncol(Pop_eq)
nrow(Genotypes) * ncol(Genotypes)
gene_no
mass_clusters
nrow(Pop_ini)
sero_no
length(vaccTypes)
dim(migVec)
make_transform <- function(p) {
function(theta){
c(list(Pop_ini = matrix(p[1:(nrow(Pop_ini) * ncol(Pop_ini))], nrow = mass_clusters, ncol = sero_no),
Pop_eq = matrix(p[((nrow(Pop_ini) * ncol(Pop_ini)) +1) : ((nrow(Pop_ini) * ncol(Pop_ini)) + nrow(Pop_eq) * ncol(Pop_eq))], nrow = mass_clusters, ncol = sero_no),
Genotypes = matrix(p[(((nrow(Pop_ini) * ncol(Pop_ini)) + nrow(Pop_eq) * ncol(Pop_eq))+ 1): (((nrow(Pop_ini) * ncol(Pop_ini)) + nrow(Pop_eq) * ncol(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes))], nrow = gene_no, ncol = species_no),
capacity = p[(((nrow(Pop_ini) * ncol(Pop_ini)) + nrow(Pop_eq) * ncol(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 1],
delta = p[((((nrow(Pop_ini) * ncol(Pop_ini)) + nrow(Pop_eq) * ncol(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2) : ((((nrow(Pop_ini) * ncol(Pop_ini)) + nrow(Pop_eq) * ncol(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no -1)],
vaccTypes = p[((((nrow(Pop_ini) * ncol(Pop_ini)) + nrow(Pop_eq) * ncol(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no) : (((((nrow(Pop_ini) * ncol(Pop_ini)) + nrow(Pop_eq) * ncol(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no) + sero_no -1)],
species_no = p[(((((nrow(Pop_ini) * ncol(Pop_ini)) + nrow(Pop_eq) * ncol(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no) + sero_no )],
gene_no = p[(((((nrow(Pop_ini) * ncol(Pop_ini)) + nrow(Pop_eq) * ncol(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no) + sero_no)+ 1],
vacc_time = p[(((((nrow(Pop_ini) * ncol(Pop_ini)) + nrow(Pop_eq) * ncol(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no) + sero_no) + 2],
dt = p[(((((nrow(Pop_ini) * ncol(Pop_ini)) + nrow(Pop_eq) * ncol(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no) + sero_no) + 3],
migVec = matrix(p[((((((nrow(Pop_ini) * ncol(Pop_ini)) + nrow(Pop_eq) * ncol(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no) + sero_no) + 4):((((((nrow(Pop_ini) * ncol(Pop_ini)) + nrow(Pop_eq) * ncol(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no) + sero_no) + 4 + (nrow(migVec) * ncol(migVec)) -1)], nrow = mass_clusters, ncol = sero_no),
sigma_w = p[((((((nrow(Pop_ini) * ncol(Pop_ini)) + nrow(Pop_eq) * ncol(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no) + sero_no) + 4 + (nrow(migVec) * ncol(migVec)))]), as.list(theta))
}
}
transform <- function(x) {
make_transform(complex_params)}
proposal_matrix <- diag(0.1,4) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 01), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars$initial()
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
n_steps <- 1000
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 4)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
complex_params <- c(Pop_ini, Pop_eq, Genotypes, capacity, delta, vaccTypes, species_no, gene_no, vacc_time, dt, migVec, pmcmc_sigma_w, sero_no)
make_transform <- function(p) {
function(theta){
c(list(Pop_ini = matrix(p[1:(nrow(Pop_ini) * ncol(Pop_ini))], nrow = mass_clusters, ncol = sero_no),
Pop_eq = matrix(p[((nrow(Pop_ini) * ncol(Pop_ini)) +1) : ((nrow(Pop_ini) * ncol(Pop_ini)) + nrow(Pop_eq) * ncol(Pop_eq))], nrow = mass_clusters, ncol = sero_no),
Genotypes = matrix(p[(((nrow(Pop_ini) * ncol(Pop_ini)) + nrow(Pop_eq) * ncol(Pop_eq))+ 1): (((nrow(Pop_ini) * ncol(Pop_ini)) + nrow(Pop_eq) * ncol(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes))], nrow = gene_no, ncol = species_no),
capacity = p[(((nrow(Pop_ini) * ncol(Pop_ini)) + nrow(Pop_eq) * ncol(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 1],
delta = p[((((nrow(Pop_ini) * ncol(Pop_ini)) + nrow(Pop_eq) * ncol(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2) : ((((nrow(Pop_ini) * ncol(Pop_ini)) + nrow(Pop_eq) * ncol(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no -1)],
vaccTypes = p[((((nrow(Pop_ini) * ncol(Pop_ini)) + nrow(Pop_eq) * ncol(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no) : (((((nrow(Pop_ini) * ncol(Pop_ini)) + nrow(Pop_eq) * ncol(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no) + sero_no -1)],
species_no = p[(((((nrow(Pop_ini) * ncol(Pop_ini)) + nrow(Pop_eq) * ncol(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no) + sero_no )],
gene_no = p[(((((nrow(Pop_ini) * ncol(Pop_ini)) + nrow(Pop_eq) * ncol(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no) + sero_no)+ 1],
vacc_time = p[(((((nrow(Pop_ini) * ncol(Pop_ini)) + nrow(Pop_eq) * ncol(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no) + sero_no) + 2],
dt = p[(((((nrow(Pop_ini) * ncol(Pop_ini)) + nrow(Pop_eq) * ncol(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no) + sero_no) + 3],
migVec = matrix(p[((((((nrow(Pop_ini) * ncol(Pop_ini)) + nrow(Pop_eq) * ncol(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no) + sero_no) + 4):((((((nrow(Pop_ini) * ncol(Pop_ini)) + nrow(Pop_eq) * ncol(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no) + sero_no) + 4 + (nrow(migVec) * ncol(migVec)) -1)], nrow = mass_clusters, ncol = sero_no),
sigma_w = p[((((((nrow(Pop_ini) * ncol(Pop_ini)) + nrow(Pop_eq) * ncol(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no) + sero_no) + 4 + (nrow(migVec) * ncol(migVec)))],
sero_no = p[((((((nrow(Pop_ini) * ncol(Pop_ini)) + nrow(Pop_eq) * ncol(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no) + sero_no) + 4 + (nrow(migVec) * ncol(migVec)) +1)]), as.list(theta))
}
}
transform <- function(x) {
make_transform(complex_params)}
proposal_matrix <- diag(0.1,4) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 01), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars$initial()
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
n_steps <- 1000
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 4)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
PPsero_startpop_corr
Pop_eq <- rowSums(model_start_pop)
Pop_eq
length(Pop_eq)
complex_params <- c(Pop_ini, Pop_eq, Genotypes, capacity, delta, vaccTypes, species_no, gene_no, vacc_time, dt, migVec, pmcmc_sigma_w, sero_no)
make_transform <- function(p) {
function(theta){
c(list(Pop_ini = matrix(p[1:(nrow(Pop_ini) * ncol(Pop_ini))], nrow = mass_clusters, ncol = sero_no),
Pop_eq = p[((nrow(Pop_ini) * ncol(Pop_ini)) +1) : ((nrow(Pop_ini) * ncol(Pop_ini)) + length(Pop_eq))],
Genotypes = matrix(p[(((nrow(Pop_ini) * ncol(Pop_ini)) + length(Pop_eq))+ 1): (((nrow(Pop_ini) * ncol(Pop_ini)) + length(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes))], nrow = gene_no, ncol = species_no),
capacity = p[(((nrow(Pop_ini) * ncol(Pop_ini)) + length(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 1],
delta = p[((((nrow(Pop_ini) * ncol(Pop_ini)) + length(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2) : ((((nrow(Pop_ini) * ncol(Pop_ini)) + length(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no -1)],
vaccTypes = p[((((nrow(Pop_ini) * ncol(Pop_ini)) + length(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no) : (((((nrow(Pop_ini) * ncol(Pop_ini)) + length(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no) + sero_no -1)],
species_no = p[(((((nrow(Pop_ini) * ncol(Pop_ini)) + length(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no) + sero_no )],
gene_no = p[(((((nrow(Pop_ini) * ncol(Pop_ini)) + length(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no) + sero_no)+ 1],
vacc_time = p[(((((nrow(Pop_ini) * ncol(Pop_ini)) + length(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no) + sero_no) + 2],
dt = p[(((((nrow(Pop_ini) * ncol(Pop_ini)) + length(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no) + sero_no) + 3],
migVec = matrix(p[((((((nrow(Pop_ini) * ncol(Pop_ini)) + length(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no) + sero_no) + 4):((((((nrow(Pop_ini) * ncol(Pop_ini)) + length(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no) + sero_no) + 4 + (nrow(migVec) * ncol(migVec)) -1)], nrow = mass_clusters, ncol = sero_no),
sigma_w = p[((((((nrow(Pop_ini) * ncol(Pop_ini)) + length(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no) + sero_no) + 4 + (nrow(migVec) * ncol(migVec)))],
sero_no = p[((((((nrow(Pop_ini) * ncol(Pop_ini)) + length(Pop_eq)) + nrow(Genotypes) * ncol(Genotypes)) + 2 + gene_no) + sero_no) + 4 + (nrow(migVec) * ncol(migVec)) +1)]), as.list(theta))
}
}
transform <- function(x) {
make_transform(complex_params)}
proposal_matrix <- diag(0.1,4) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 01), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars$initial()
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
n_steps <- 1000
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 4)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run, burnin = 250, thin = 1)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
print(parameter_mean_hpd)
mean(processed_chains$probabilities[,2])
det_mcmc1 <- coda::as.mcmc(cbind(det_pmcmc_run$probabilities, det_pmcmc_run$pars))
plot(det_mcmc1)
exp(-0.46054586)
log(0.1)
exp(0.1)
transform <- function(x) {
make_transform(complex_params)}
proposal_matrix <- diag(0.1,4) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
proposal_matrix[1,1] <- exp(0.1)
proposal_matrix[3,3] <- exp(0.1)
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 01), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars$initial()
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
n_steps <- 100
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 4)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run, burnin = 250, thin = 1)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
print(parameter_mean_hpd)
det_mcmc1 <- coda::as.mcmc(cbind(det_pmcmc_run$probabilities, det_pmcmc_run$pars))
plot(det_mcmc1)
