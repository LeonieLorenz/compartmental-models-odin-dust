xlim = c(0, 100), ylim=c(0, 1000),
main="SI phase plane for SIR model")
flow <- flowField(sir_equations_2d, xlim = c(0, 100), ylim = c(0, 1000),
parameters = parms)
sir_equations_2d <- function(time, variables, parameters) {
S <- variables[1]
I <- variables[2]
beta <- parameters[1]
gamma <- parameters[2]
dS <- - beta * I * S /1001
dI <-  beta * I * S /1001 - gamma * I
return(list(c(dS, dI)))
}
init <- c(1000, 1)
parms <- c(beta = 0.02, gamma = 1)
steps <- seq(0, 150)
sir_values_2d <- ode(
y = init,
times = steps,
func = sir_equations_2d,
parms = parms
)
par(mfrow = c(1, 1)) # reset plotting parameters
plot(sir_values_2d[,2], sir_values_2d[,3],
type = "l", xlab = "S", ylab="I",
col = "magenta", main = "SI phase plane for SIR model")
plot(sir_values_2d[, c(2, 3)], type = "l", col = "magenta",
xlim = c(0, 100), ylim=c(0, 1000),
main="SI phase plane for SIR model")
flow <- flowField(sir_equations_2d, xlim = c(0, 100), ylim = c(0, 1000),
parameters = parms)
init <- c(999, 1)
parms <- c(beta = 0.02, gamma = 1)
steps <- seq(0, 150)
sir_values_2d <- ode(
y = init,
times = steps,
func = sir_equations_2d,
parms = parms
)
par(mfrow = c(1, 1)) # reset plotting parameters
plot(sir_values_2d[,2], sir_values_2d[,3],
type = "l", xlab = "S", ylab="I",
col = "magenta", main = "SI phase plane for SIR model")
plot(sir_values_2d[, c(2, 3)], type = "l", col = "magenta",
xlim = c(0, 100), ylim=c(0, 1000),
main="SI phase plane for SIR model")
flow <- flowField(sir_equations_2d, xlim = c(0, 100), ylim = c(0, 1000),
parameters = parms)
dS <- - beta * I * S /1000
dI <-  beta * I * S /1000 - gamma * I
sir_equations_2d <- function(time, variables, parameters) {
S <- variables[1]
I <- variables[2]
beta <- parameters[1]
gamma <- parameters[2]
dS <- - beta * I * S /1000
dI <-  beta * I * S /1000 - gamma * I
return(list(c(dS, dI)))
}
init <- c(999, 1)
parms <- c(beta = 0.02, gamma = 1)
steps <- seq(0, 150)
sir_values_2d <- ode(
y = init,
times = steps,
func = sir_equations_2d,
parms = parms
)
par(mfrow = c(1, 1)) # reset plotting parameters
plot(sir_values_2d[,2], sir_values_2d[,3],
type = "l", xlab = "S", ylab="I",
col = "magenta", main = "SI phase plane for SIR model")
plot(sir_values_2d[, c(2, 3)], type = "l", col = "magenta",
xlim = c(0, 100), ylim=c(0, 1000),
main="SI phase plane for SIR model")
flow <- flowField(sir_equations_2d, xlim = c(0, 100), ylim = c(0, 1000),
parameters = parms)
plot(sir_values_2d[, c(2, 3)], type = "l", col = "magenta",
xlim = c(0, 1000), ylim=c(0, 20),
main="SI phase plane for SIR model")
flow <- flowField(sir_equations_2d, xlim = c(0, 1000), ylim = c(0, 20),
parameters = parms)
plot(sir_values_2d[, c(2, 3)], type = "l", col = "magenta",
xlim = c(0, 100), ylim=c(0, 20),
main="SI phase plane for SIR model")
flow <- flowField(sir_equations_2d, xlim = c(0, 100), ylim = c(0, 20),
parameters = parms)
init <- c(99.9, 0.1)
sir_equations_2d <- function(time, variables, parameters) {
S <- variables[1]
I <- variables[2]
beta <- parameters[1]
gamma <- parameters[2]
dS <- - beta * I * S
dI <-  beta * I * S  - gamma * I
return(list(c(dS, dI)))
}
init <- c(99.9, 0.1)
parms <- c(beta = 0.02, gamma = 1)
steps <- seq(0, 150)
sir_values_2d <- ode(
y = init,
times = steps,
func = sir_equations_2d,
parms = parms
)
par(mfrow = c(1, 1)) # reset plotting parameters
plot(sir_values_2d[,2], sir_values_2d[,3],
type = "l", xlab = "S", ylab="I",
col = "magenta", main = "SI phase plane for SIR model")
plot(sir_values_2d[, c(2, 3)], type = "l", col = "magenta",
xlim = c(0, 100), ylim=c(0, 20),
main="SI phase plane for SIR model")
flow <- flowField(sir_equations_2d, xlim = c(0, 100), ylim = c(0, 20),
parameters = parms)
sir_equations_2d <- function(time, variables, parameters) {
S <- variables[1]
I <- variables[2]
beta <- parameters[1]
gamma <- parameters[2]
dS <- - beta * I * S /10
dI <-  beta * I * S /10 - gamma * I
return(list(c(dS, dI)))
}
init <- c(999, 1)
parms <- c(beta = 0.02, gamma = 1)
steps <- seq(0, 150)
sir_values_2d <- ode(
y = init,
times = steps,
func = sir_equations_2d,
parms = parms
)
par(mfrow = c(1, 1)) # reset plotting parameters
plot(sir_values_2d[,2], sir_values_2d[,3],
type = "l", xlab = "S", ylab="I",
col = "magenta", main = "SI phase plane for SIR model")
plot(sir_values_2d[, c(2, 3)], type = "l", col = "magenta",
xlim = c(0, 1000), ylim=c(0, 150),
main="SI phase plane for SIR model")
flow <- flowField(sir_equations_2d, xlim = c(0, 1000), ylim = c(0, 150),
parameters = parms)
plot(sir_values_2d[, c(2, 3)], type = "l", col = "magenta",
xlim = c(0, 1000), ylim=c(0, 200),
main="SI phase plane for SIR model")
flow <- flowField(sir_equations_2d, xlim = c(0, 1000), ylim = c(0, 200),
parameters = parms)
sir_equations_2d <- function(time, variables, parameters) {
S <- variables[1]
I <- variables[2]
beta <- parameters[1]
gamma <- parameters[2]
dS <- - beta * I * S /20.1
dI <-  beta * I * S /20.1 - gamma * I
return(list(c(dS, dI)))
}
init <- c(2000, 10)
parms <- c(beta = 0.002, gamma = 1)
steps <- seq(0, 150)
sir_values_2d <- ode(
y = init,
times = steps,
func = sir_equations_2d,
parms = parms
)
par(mfrow = c(1, 1)) # reset plotting parameters
plot(sir_values_2d[,2], sir_values_2d[,3],
type = "l", xlab = "S", ylab="I",
col = "magenta", main = "SI phase plane for SIR model")
plot(sir_values_2d[, c(2, 3)], type = "l", col = "magenta",
xlim = c(0, 1000), ylim=c(0, 200),
main="SI phase plane for SIR model")
flow <- flowField(sir_equations_2d, xlim = c(0, 1000), ylim = c(0, 200),
parameters = parms)
sir_equations_2d <- function(time, variables, parameters) {
S <- variables[1]
I <- variables[2]
beta <- parameters[1]
gamma <- parameters[2]
dS <- - beta * I * S /10
dI <-  beta * I * S /10 - gamma * I
return(list(c(dS, dI)))
}
init <- c(999, 1)
parms <- c(beta = 0.02, gamma = 1)
steps <- seq(0, 150)
sir_values_2d <- ode(
y = init,
times = steps,
func = sir_equations_2d,
parms = parms
)
par(mfrow = c(1, 1)) # reset plotting parameters
plot(sir_values_2d[,2], sir_values_2d[,3],
type = "l", xlab = "S", ylab="I",
col = "magenta", main = "SI phase plane for SIR model")
plot(sir_values_2d[, c(2, 3)], type = "l", col = "magenta",
xlim = c(0, 1000), ylim=c(0, 200),
main="SI phase plane for SIR model")
flow <- flowField(sir_equations_2d, xlim = c(0, 1000), ylim = c(0, 200),
parameters = parms)
plot(sir_values_2d[, c(2, 3)], type = "l", col = "magenta",
xlim = c(0, 1000), ylim=c(0, 200), xlab = "S", ylab = "I")
flow <- flowField(sir_equations_2d, xlim = c(0, 1000), ylim = c(0, 200),
parameters = parms)
init <- c(999, 1)
parms <- c(beta = 0.002, gamma = 0.1)
steps <- seq(0, 150)
sir_values_2d <- ode(
y = init,
times = steps,
func = sir_equations_2d,
parms = parms
)
par(mfrow = c(1, 1)) # reset plotting parameters
plot(sir_values_2d[,2], sir_values_2d[,3],
type = "l", xlab = "S", ylab="I",
col = "magenta", main = "SI phase plane for SIR model")
plot(sir_values_2d[, c(2, 3)], type = "l", col = "magenta",
xlim = c(0, 1000), ylim=c(0, 200), xlab = "S", ylab = "I")
flow <- flowField(sir_equations_2d, xlim = c(0, 1000), ylim = c(0, 200),
parameters = parms)
nbinom(1,S, 1-exp(-beta * I / (S+I+R)))
binom(1,S, 1-exp(-beta * I / (S+I+R)))
n <- 2000
k <- seq(0, n, by = 20)
plot (k, dbinom(k, n, pi/10, log = TRUE), type = "l", ylab = "log density",
main = "dbinom(*, log=TRUE) is better than  log(dbinom(*))")
lines(k, log(dbinom(k, n, pi/10)), col = "red", lwd = 2)
n <- 2000
k <- seq(0, n, by = 20)
plot (k, dbinom(k, n, 1-exp(-0.25 * 10 / (2010)), log = TRUE), type = "l", ylab = "log density",
main = "dbinom(*, log=TRUE) is better than  log(dbinom(*))")
plot (k, pbinom(k, n, 1-exp(-0.25 * 10 / (2010)), log = TRUE), type = "l", ylab = "log density",
main = "dbinom(*, log=TRUE) is better than  log(dbinom(*))")
plot (k, dbinom(k, n, 1-exp(-0.25 * 10 / (2010)), log = FALSE), type = "l", ylab = "log density",
main = "dbinom(*, log=TRUE) is better than  log(dbinom(*))")
plot (k, pbinom(k, n, 1-exp(-0.25 * 10 / (2010)), log = FALSE), type = "l", ylab = "log density",
main = "dbinom(*, log=TRUE) is better than  log(dbinom(*))")
k
pbinom(1, 2000, 1-exp(-0.25 * 10 / (2010))
)
pbinom(200, 2000, 1-exp(-0.25 * 10 / (2010)))
dbinom(200, 2000, 1-exp(-0.25 * 10 / (2010)))
plot (k, dbinom(k, n, 1-exp(-0.25 * 10 / (2010)), log = FALSE), type = "l", ylab = "log density",
main = "dbinom(*, log=TRUE) is better than  log(dbinom(*))")
rbinom(1, 2000, 1-exp(-0.25 * 10 / (2010)))
rbinom(1, 2000, 1-exp(-0.25 * 10 / (2010)))
rbinom(1, 2000, 1-exp(-0.25 * 10 / (2010)))
rbinom(1, 2000, 1-exp(-0.25 * 10 / (2010)))
k <- seq(0, 200, by = 20)
plot (k, dbinom(k, n, 1-exp(-0.25 * 10 / (2010)), log = FALSE), type = "l", ylab = "log density",
main = "dbinom(*, log=TRUE) is better than  log(dbinom(*))")
k <- seq(0, 100, by = 10)
plot (k, pbinom(k, n, 1-exp(-0.25 * 10 / (2010)), log = FALSE), type = "l", ylab = "log density",
main = "dbinom(*, log=TRUE) is better than  log(dbinom(*))")
lines(k, log(dbinom(k, n, pi/10)), col = "red", lwd = 2)
plot (k, dbinom(k, n, 1-exp(-0.25 * 10 / (2010)), log = FALSE), type = "l", ylab = "log density",
main = "dbinom(*, log=TRUE) is better than  log(dbinom(*))")
lines(k, log(dbinom(k, n, pi/10)), col = "red", lwd = 2)
k <- seq(0, 20, by = 1)
plot (k, dbinom(k, n, 1-exp(-0.25 * 10 / (2010)), log = FALSE), type = "l", ylab = "log density",
main = "dbinom(*, log=TRUE) is better than  log(dbinom(*))")
lines(k, log(dbinom(k, n, pi/10)), col = "red", lwd = 2)
plot (k, dbinom(k, n, 1-exp(-0.25 * 10 / (2010)), log = TRUE), type = "l", ylab = "log density")
plot (k, dbinom(k, n, 1-exp(-0.25 * 10 / (2010)), log = FALSE), type = "l", ylab = "density")
lines(k, log(dbinom(k, n, pi/10)), col = "red", lwd = 2)
plot (k, dbinom(k, n, 1-exp(-0.25 * 10 / (2010)), log = FALSE), type = "l", ylab = "density")
lines(k, (dbinom(k, n, 1-exp(-0.25 * 10 / (2010))), col = "red", lwd = 2)
lines(k, (dbinom(k, n, 1-exp(-0.25 * 10 / (2010)))), col = "red", lwd = 2)
plot (k, dbinom(k, n, 1-exp(-0.25 * 10 / (2010)), log = FALSE), type = "l", ylab = "density")
n <- 10
k <- seq(0, 20, by = 1)
plot (k, dbinom(k, n, 1 - exp(-gamma)), log = FALSE), type = "l", ylab = "density")
plot (k, dbinom(k, n, 1 - exp(-gamma), log = FALSE), type = "l", ylab = "density")
plot (k, dbinom(k, n, 1 - exp(-0.1), log = FALSE), type = "l", ylab = "density")
k <- seq(0, 10, by = 1)
plot (k, dbinom(k, n, 1 - exp(-0.1), log = FALSE), type = "l", ylab = "density")
plot (k, dbinom(k, n, 1-exp(-0.25 * 10 / (2010)), log = FALSE), type = "l", ylab = "density")
# plot densities
n <- 2000
k <- seq(0, 20, by = 1)
plot (k, dbinom(k, n, 1-exp(-0.25 * 10 / (2010)), log = FALSE), type = "l", ylab = "density")
##https://rpubs.com/choisy/sir
#install.packages("deSolve")
library(deSolve) # using the "ode" function
sir_equations <- function(time, variables, parameters) {
with(as.list(c(variables, parameters)), {
dS <- -beta * I * S / (S + I + R)
dI <-  beta * I * S / (S + I + R) - gamma * I
dR <-  gamma * I
return(list(c(dS, dI, dR)))
})
}
parameters_values <- c(
beta  = 0.1, # infectious contact rate
gamma = 0.1    # recovery rate
)
initial_values <- c(
S = 800,  # number of susceptibles at time = 0
I =   1200,  # number of infectious at time = 0
R =   0   # number of recovered at time = 0
)
time_values <- seq(0, 150)
sir_values <- ode(
y = initial_values,
times = time_values,
func = sir_equations,
parms = parameters_values
)
cols <- c(S = "#000000", I = "#E69F00", R = "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") #8 colorblind friendly colors
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
matplot(sir_values[, 1], sir_values[, -1], xlab = "Time", ylab = "Number of individuals",
type = "l", col = cols, lty = 1)
legend("topright", lwd = 1, col = cols, legend = c("S", "I", "R"), bty = "n")
sir_equations <- function(time, variables, parameters) {
with(as.list(c(variables, parameters)), {
dS <- -beta * I * S / (S + I + R)
dI <-  beta * I * S / (S + I + R) - gamma * I
dR <-  gamma * I
return(list(c(dS, dI, dR)))
})
}
parameters_values <- c(
beta  = 0.1, # infectious contact rate
gamma = 0.1    # recovery rate
)
initial_values <- c(
S = 2000,  # number of susceptibles at time = 0
I =   10,  # number of infectious at time = 0
R =   0   # number of recovered at time = 0
)
time_values <- seq(0, 150)
sir_values <- ode(
y = initial_values,
times = time_values,
func = sir_equations,
parms = parameters_values
)
cols <- c(S = "#000000", I = "#E69F00", R = "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") #8 colorblind friendly colors
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
matplot(sir_values[, 1], sir_values[, -1], xlab = "Time", ylab = "Number of individuals",
type = "l", col = cols, lty = 1)
parameters_values <- c(
beta  = 0.05, # infectious contact rate
gamma = 0.1    # recovery rate
)
initial_values <- c(
S = 2000,  # number of susceptibles at time = 0
I =   10,  # number of infectious at time = 0
R =   0   # number of recovered at time = 0
)
time_values <- seq(0, 150)
sir_values <- ode(
y = initial_values,
times = time_values,
func = sir_equations,
parms = parameters_values
)
cols <- c(S = "#000000", I = "#E69F00", R = "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") #8 colorblind friendly colors
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
matplot(sir_values[, 1], sir_values[, -1], xlab = "Time", ylab = "Number of individuals",
type = "l", col = cols, lty = 1)
initial_values <- c(
S = 2000,  # number of susceptibles at time = 0
I =   100,  # number of infectious at time = 0
R =   0   # number of recovered at time = 0
)
time_values <- seq(0, 150)
sir_values <- ode(
y = initial_values,
times = time_values,
func = sir_equations,
parms = parameters_values
)
cols <- c(S = "#000000", I = "#E69F00", R = "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") #8 colorblind friendly colors
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
matplot(sir_values[, 1], sir_values[, -1], xlab = "Time", ylab = "Number of individuals",
type = "l", col = cols, lty = 1)
legend("topright", lwd = 1, col = cols, legend = c("S", "I", "R"), bty = "n")
initial_values <- c(
S = 2000,  # number of susceptibles at time = 0
I =   10,  # number of infectious at time = 0
R =   0   # number of recovered at time = 0
)
time_values <- seq(0, 50)
sir_values <- ode(
y = initial_values,
times = time_values,
func = sir_equations,
parms = parameters_values
)
cols <- c(S = "#000000", I = "#E69F00", R = "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") #8 colorblind friendly colors
parameters_values <- c(
beta  = 0.05, # infectious contact rate
gamma = 0.1    # recovery rate
)
initial_values <- c(
S = 2000,  # number of susceptibles at time = 0
I =   10,  # number of infectious at time = 0
R =   0   # number of recovered at time = 0
)
time_values <- seq(0, 50)
sir_values <- ode(
y = initial_values,
times = time_values,
func = sir_equations,
parms = parameters_values
)
cols <- c(S = "#000000", I = "#E69F00", R = "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") #8 colorblind friendly colors
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
matplot(sir_values[, 1], sir_values[, -1], xlab = "Time", ylab = "Number of individuals",
type = "l", col = cols, lty = 1)
time_values <- seq(0, 150)
sir_values <- ode(
y = initial_values,
times = time_values,
func = sir_equations,
parms = parameters_values
)
cols <- c(S = "#000000", I = "#E69F00", R = "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") #8 colorblind friendly colors
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
matplot(sir_values[, 1], sir_values[, -1], xlab = "Time", ylab = "Number of individuals",
type = "l", col = cols, lty = 1)
legend("topright", lwd = 1, col = cols, legend = c("S", "I", "R"), bty = "n")
initial_values <- c(
S = 2000,  # number of susceptibles at time = 0
I =   10,  # number of infectious at time = 0
R =   0   # number of recovered at time = 0
)
time_values <- seq(0, 50)
sir_values <- ode(
y = initial_values,
times = time_values,
func = sir_equations,
parms = parameters_values
)
cols <- c(S = "#000000", I = "#E69F00", R = "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") #8 colorblind friendly colors
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
matplot(sir_values[, 1], sir_values[, c(3,4)], xlab = "Time", ylab = "Number of individuals",
type = "l", col = cols, lty = 1)
legend("topright", lwd = 1, col = cols, legend = c("S", "I", "R"), bty = "n")
time_values <- seq(0, 150)
sir_values <- ode(
y = initial_values,
times = time_values,
func = sir_equations,
parms = parameters_values
)
cols <- c(S = "#000000", I = "#E69F00", R = "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") #8 colorblind friendly colors
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
matplot(sir_values[, 1], sir_values[, -1], xlab = "Time", ylab = "Number of individuals",
type = "l", col = cols, lty = 1)
legend("topright", lwd = 1, col = cols, legend = c("S", "I", "R"), bty = "n")
cols <- c(S = "#000000", I = "#E69F00", R = "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") #8 colorblind friendly colors
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
matplot(sir_values[, 1], sir_values[, c(3,4)], xlab = "Time", ylab = "Number of individuals",
type = "l", col = cols, lty = 1)
legend("topright", lwd = 1, col = cols, legend = c("S", "I", "R"), bty = "n")
time_values <- seq(0, 1500)
sir_values <- ode(
y = initial_values,
times = time_values,
func = sir_equations,
parms = parameters_values
)
cols <- c(S = "#000000", I = "#E69F00", R = "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") #8 colorblind friendly colors
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
matplot(sir_values[, 1], sir_values[, -1], xlab = "Time", ylab = "Number of individuals",
type = "l", col = cols, lty = 1)
legend("topright", lwd = 1, col = cols, legend = c("S", "I", "R"), bty = "n")
cols <- c(S = "#000000", I = "#E69F00", R = "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") #8 colorblind friendly colors
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
matplot(sir_values[, 1], sir_values[, c(3,4)], xlab = "Time", ylab = "Number of individuals",
type = "l", col = cols, lty = 1)
legend("topright", lwd = 1, col = cols, legend = c("S", "I", "R"), bty = "n")
cols <- c(I = "#E69F00", R = "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") #8 colorblind friendly colors
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
matplot(sir_values[, 1], sir_values[, c(3,4)], xlab = "Time", ylab = "Number of individuals",
type = "l", col = cols, lty = 1)
legend("topright", lwd = 1, col = cols, legend = c("I", "R"), bty = "n")
time_values <- seq(0, 150)
sir_values <- ode(
y = initial_values,
times = time_values,
func = sir_equations,
parms = parameters_values
)
cols <- c(S = "#000000", I = "#E69F00", R = "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") #8 colorblind friendly colors
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
matplot(sir_values[, 1], sir_values[, -1], xlab = "Time", ylab = "Number of individuals",
type = "l", col = cols, lty = 1)
legend("topright", lwd = 1, col = cols, legend = c("S", "I", "R"), bty = "n")
cols <- c(I = "#E69F00", R = "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") #8 colorblind friendly colors
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
matplot(sir_values[, 1], sir_values[, c(3,4)], xlab = "Time", ylab = "Number of individuals",
type = "l", col = cols, lty = 1)
legend("topright", lwd = 1, col = cols, legend = c("I", "R"), bty = "n")
setwd("~/Documents/PhD_Project/Code/1st_project/odin-dust-examples/WrightFisherModel")
# reading in the gene presence absence matrix produced by ggCaller
gene_presence_absence <- read.csv("~/Documents/PhD_Project/Code/1st_project/odin-dust-examples/Data/gene_presence_absence.csv", header=FALSE)
View(gene_presence_absence)
# converting the gene presence absence matrix into a boolean df (0 = gene not present, 1 = gene present)
convert_to_bool <- function(x){
if (x=="") 0 else 1
}
bool_gene_presence_absence <- gene_presence_absence
bool_gene_presence_absence[2:nrow(bool_gene_presence_absence),4:ncol(bool_gene_presence_absence)] <- apply(gene_presence_absence[2:nrow(gene_presence_absence),4:ncol(gene_presence_absence)],c(1,2), convert_to_bool)
View(bool_gene_presence_absence)
View(bool_gene_presence_absence)
View(bool_gene_presence_absence)
