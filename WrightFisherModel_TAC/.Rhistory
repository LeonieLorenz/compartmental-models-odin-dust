lollipop_data_2007_nVT <- data.frame(
x=which(isVT_vec==0),
model2007=x_mean[which(isVT_vec==0),73] / sum(x_mean[,73]),
data2007=as.numeric(cluster_freq_3[which(isVT_vec==0)] / sum(cluster_freq_3))
)
lollipop_data_2007_VT <- data.frame(
x=which(isVT_vec==1),
model2007=x_mean[which(isVT_vec==1),73] / sum(x_mean[,73]),
data2007=as.numeric(cluster_freq_3[which(isVT_vec==1)] / sum(cluster_freq_3))
)
# Change baseline
lollipop_plot_2001_nVT <- ggplot(lollipop_data_2001_nVT) +
geom_segment( aes(x=x, xend=x, y=model2001, yend=data2001), color="grey") +
geom_point( aes(x=x, y=model2001, color="Model non-VT"), size=3 ) +
geom_point( aes(x=x, y=data2001, color="Data non_VT"), size=3 ) +
scale_color_manual(values = c("#E69F00", "#56B4E9"),
guide  = guide_legend(),
name   = "Group") +
coord_flip()+
#theme_ipsum() +
theme(legend.position = "none") +
ggtitle("2001 Non-Vaccine Types") +
ylab("Frequency") +
xlab("Clusters") +
theme(axis.title  = element_text(size = 20), axis.text = element_text(size = 20), plot.title = element_text(size = 25,hjust = 0.5))  +
ylim(0, max(max(lollipop_data_2001_nVT$model2001),max(lollipop_data_2001_nVT$data2001),max(lollipop_data_2004_VT$model2004),max(lollipop_data_2004_VT$data2004),max(lollipop_data_2007_nVT$model2007),max(lollipop_data_2007_nVT$data2007)))
lollipop_plot_2001_VT <- ggplot(lollipop_data_2001_VT) +
geom_segment( aes(x=x, xend=x, y=model2001, yend=data2001), color="grey") +
geom_point( aes(x=x, y=model2001, color="Model non-VT"), size=3 ) +
geom_point( aes(x=x, y=data2001, color="Data non_VT"), size=3 ) +
scale_color_manual(values = c("#E69F00", "#56B4E9"),
guide  = guide_legend(),
name   = "Group") +
coord_flip()+
#theme_ipsum() +
theme(legend.position = "none") +
ggtitle("2001 Vaccine Types") +
ylab("Frequency") +
xlab("Clusters") +
theme(axis.title  = element_text(size = 20), axis.text = element_text(size = 20), plot.title = element_text(size = 25,hjust = 0.5))  +
ylim(0, max(max(lollipop_data_2001_nVT$model2001),max(lollipop_data_2001_nVT$data2001),max(lollipop_data_2004_VT$model2004),max(lollipop_data_2004_VT$data2004),max(lollipop_data_2007_nVT$model2007),max(lollipop_data_2007_nVT$data2007)))
lollipop_plot_2004_nVT <- ggplot(lollipop_data_2004_nVT) +
geom_segment( aes(x=x, xend=x, y=model2004, yend=data2004), color="grey") +
geom_point( aes(x=x, y=model2004, color="Model"), size=3 ) +
geom_point( aes(x=x, y=data2004, color="Data"), size=3 ) +
scale_color_manual(values = c("#E69F00", "#56B4E9"),
guide  = guide_legend(),
name   = "Group") +
coord_flip()+
#theme_ipsum() +
theme(legend.position = "none") +
ggtitle("2004 Non-Vaccine Types") +
ylab("Frequency") +
xlab("Clusters") +
theme(axis.title  = element_text(size = 20), axis.text = element_text(size = 20), plot.title = element_text(size = 25,hjust = 0.5))  +
ylim(0, max(max(lollipop_data_2001_nVT$model2001),max(lollipop_data_2001_nVT$data2001),max(lollipop_data_2004_VT$model2004),max(lollipop_data_2004_VT$data2004),max(lollipop_data_2007_nVT$model2007),max(lollipop_data_2007_nVT$data2007)))
lollipop_plot_2004_VT <- ggplot(lollipop_data_2004_VT) +
geom_segment( aes(x=x, xend=x, y=model2004, yend=data2004), color="grey") +
geom_point( aes(x=x, y=model2004, color="Model"), size=3 ) +
geom_point( aes(x=x, y=data2004, color="Data"), size=3 ) +
scale_color_manual(values = c("#E69F00", "#56B4E9"),
guide  = guide_legend(),
name   = "Group") +
coord_flip()+
#theme_ipsum() +
theme(legend.position = "none") +
ggtitle("2004 Vaccine Types") +
ylab("Frequency") +
xlab("Clusters") +
theme(axis.title  = element_text(size = 20), axis.text = element_text(size = 20), plot.title = element_text(size = 25,hjust = 0.5))  +
ylim(0, max(max(lollipop_data_2001_nVT$model2001),max(lollipop_data_2001_nVT$data2001),max(lollipop_data_2004_VT$model2004),max(lollipop_data_2004_VT$data2004),max(lollipop_data_2007_nVT$model2007),max(lollipop_data_2007_nVT$data2007)))
lollipop_plot_2007_nVT <- ggplot(lollipop_data_2007_nVT) +
geom_segment( aes(x=x, xend=x, y=model2007, yend=data2007), color="grey") +
geom_point( aes(x=x, y=model2007, color="Model"), size=3 ) +
geom_point( aes(x=x, y=data2007, color="Data"), size=3 ) +
scale_color_manual(values = c("#E69F00", "#56B4E9"),
guide  = guide_legend(),
name   = "Group") +
coord_flip()+
#theme_ipsum() +
theme(legend.position = "none") +
ggtitle("2007 Non-Vaccine Types") +
ylab("Frequency") +
xlab("Clusters") +
theme(axis.title  = element_text(size = 20), axis.text = element_text(size = 20), plot.title = element_text(size = 25,hjust = 0.5))  +
ylim(0, max(max(lollipop_data_2001_nVT$model2001),max(lollipop_data_2001_nVT$data2001),max(lollipop_data_2004_VT$model2004),max(lollipop_data_2004_VT$data2004),max(lollipop_data_2007_nVT$model2007),max(lollipop_data_2007_nVT$data2007)))
lollipop_plot_2007_VT <- ggplot(lollipop_data_2007_VT) +
geom_segment( aes(x=x, xend=x, y=model2007, yend=data2007), color="grey") +
geom_point( aes(x=x, y=model2007, color="Model"), size=3 ) +
geom_point( aes(x=x, y=data2007, color="Data"), size=3 ) +
scale_color_manual(values = c("#E69F00", "#56B4E9"),
guide  = guide_legend(),
name   = "Legend") +
coord_flip()+
#theme_ipsum() +
theme(legend.position = c(.8,.8),legend.text = element_text(size = 20),legend.title = element_text(size = 20)) +
ggtitle("2007 Vaccine Types") +
ylab("Frequency") +
xlab("Clusters") +
theme(axis.title  = element_text(size = 20), axis.text = element_text(size = 20), plot.title = element_text(size = 25,hjust = 0.5))  +
ylim(0, max(max(lollipop_data_2001_nVT$model2001),max(lollipop_data_2001_nVT$data2001),max(lollipop_data_2004_VT$model2004),max(lollipop_data_2004_VT$data2004),max(lollipop_data_2007_nVT$model2007),max(lollipop_data_2007_nVT$data2007)))
#save plot as a png
#g <- arrangeGrob(lollipop_plot_2001,lollipop_plot_2004, lollipop_plot_2007, ncol =3) #generates g
#ggsave(file=paste(paste("plot",as.character(counter), sep=""), ".png", sep=""), g, width = 16, height = 16) #saves g
grid.arrange(lollipop_plot_2001_nVT + theme(plot.margin = unit(c(.5,0.5,1,0.5), "cm")),lollipop_plot_2004_nVT+ theme(plot.margin = unit(c(.5,0.5,1,0.5), "cm")), lollipop_plot_2007_nVT + theme(plot.margin = unit(c(.5,0.5,1,0.5), "cm")),lollipop_plot_2001_VT + theme(plot.margin = unit(c(.5,0.5,.5,0.5), "cm")), lollipop_plot_2004_VT + theme(plot.margin = unit(c(.5,0.5,.5,0.5), "cm")), lollipop_plot_2007_VT + theme(plot.margin = unit(c(.5,0.5,.5,0.5), "cm")), ncol = 3, nrow=2)
# Using MCMC to infer parameters
pmcmc_sigma_f <- mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0)
pmcmc_sigma_w <- mcstate::pmcmc_parameter("sigma_w", 0.05, min = 0)
pmcmc_prop_f <- mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1)
pmcmc_m <- mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1)
pmcmc_v <- mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)
species_no <- no_clusters
gene_no <- nrow(cluster_gene_presence_absence)
Pop_ini <- cluster_freq_1
Pop_eq <- cluster_freq_1
Genotypes <-matrix_cluster_gene_presence_absence
capacity <- sum(cluster_freq_1)
delta <- delta_ranking
vaccTypes <- isVT_vec
vacc_time <- 100
dt <- 1/36
complex_params <- c(Pop_ini, Pop_eq, Genotypes, capacity, delta, vaccTypes, species_no, gene_no, vacc_time, dt, 0.15, 0.05, 0.25, 0.03, 0.05)
#set_names <- function(x, nms) {
#  names(x) <- nms
#  x
#}
#transform <- set_names(lapply(complex_params, make_transform), complex_params)
make_transform <- function(p) {
list(Pop_ini = p[1:62],
Pop_eq = p[63 : 124],
Genotypes = matrix(p[125 : (125 + (nrow(matrix_cluster_gene_presence_absence) * ncol(matrix_cluster_gene_presence_absence))-1)], nrow = gene_no, ncol = no_clusters),
capacity = p[(125 + (nrow(matrix_cluster_gene_presence_absence) * ncol(matrix_cluster_gene_presence_absence))-1) +1],
delta = p[((125 + (nrow(matrix_cluster_gene_presence_absence) * ncol(matrix_cluster_gene_presence_absence))-1) + 2) : (((125 + (nrow(matrix_cluster_gene_presence_absence) * ncol(matrix_cluster_gene_presence_absence))-1) + 2) + gene_no -1)],
vaccTypes = p[(((125 + (nrow(matrix_cluster_gene_presence_absence) * ncol(matrix_cluster_gene_presence_absence))-1) + 2) + gene_no) : (((125 + (nrow(matrix_cluster_gene_presence_absence) * ncol(matrix_cluster_gene_presence_absence))-1) + 2) + gene_no + 1 + no_clusters -2)],
species_no = p[(((125 + (nrow(matrix_cluster_gene_presence_absence) * ncol(matrix_cluster_gene_presence_absence))-1) + 2) + gene_no + 1 + no_clusters -1)],
gene_no = p[(((125 + (nrow(matrix_cluster_gene_presence_absence) * ncol(matrix_cluster_gene_presence_absence))-1) + 2) + gene_no + 1 + no_clusters)],
vacc_time = p[(((125 + (nrow(matrix_cluster_gene_presence_absence) * ncol(matrix_cluster_gene_presence_absence))-1) + 2) + gene_no + 1 + no_clusters) + 1],
dt = p[(((125 + (nrow(matrix_cluster_gene_presence_absence) * ncol(matrix_cluster_gene_presence_absence))-1) + 2) + gene_no + 1 + no_clusters) + 2],
sigma_f = p[(((125 + (nrow(matrix_cluster_gene_presence_absence) * ncol(matrix_cluster_gene_presence_absence))-1) + 2) + gene_no + 1 + no_clusters) + 3],
sigma_w = p[(((125 + (nrow(matrix_cluster_gene_presence_absence) * ncol(matrix_cluster_gene_presence_absence))-1) + 2) + gene_no + 1 + no_clusters) + 4],
prop_f = p[(((125 + (nrow(matrix_cluster_gene_presence_absence) * ncol(matrix_cluster_gene_presence_absence))-1) + 2) + gene_no + 1 + no_clusters) + 5],
m = p[(((125 + (nrow(matrix_cluster_gene_presence_absence) * ncol(matrix_cluster_gene_presence_absence))-1) + 2) + gene_no + 1 + no_clusters) + 6],
v = p[(((125 + (nrow(matrix_cluster_gene_presence_absence) * ncol(matrix_cluster_gene_presence_absence))-1) + 2) + gene_no + 1 + no_clusters) + 7])
}
transform <- function(x) {
make_transform(complex_params)}
proposal_matrix <- diag(0.1, 5) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
# here, all parameters are proposed independently.
# think about this, this might not actually be true
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(pmcmc_sigma_f, pmcmc_sigma_w, pmcmc_prop_f, pmcmc_m, pmcmc_v), proposal_matrix, transform)
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0), mcstate::pmcmc_parameter("sigma_w", 0.05, min = 0), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, transform)
#= make_transform(c(Pop_ini, Pop_eq, Genotypes, capacity, delta, vaccTypes, species_no, gene_no, vacc_time)))
#mcmc_pars$names()
#mcmc_pars$model(mcmc_pars$initial())
mcmc_pars$initial()
# read this: https://mrc-ide.github.io/mcstate/reference/pmcmc_parameters.html
# it explains how to not fit all parameters but just the ones I want
# non-scalar parameters have to be transformed for this.
n_steps <- 500
n_burnin <- 200
# do fitting with determinstic particle filter
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
n_chains = 2)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
par(mfrow = c(1,1))
plot_particle_filter(det_pmcmc_run$trajectories$state, true_history, 1:2)
det_proposal_matrix <- cov(det_pmcmc_run$pars)
det_mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0), mcstate::pmcmc_parameter("sigma_w", 0.05, min = 0), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, transform)
proposal_matrix
summary(det_p\)
summary(det_pmcmc_run)
library(coda)
det_mcmc1 <- coda::as.mcmc(cbind(det_pmcmc_run$probabilities, det_pmcmc_run$pars))
summary(det_mcmc1)
det_proposal_matrix <- cov(det_pmcmc_run$pars)
det_mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0), mcstate::pmcmc_parameter("sigma_w", 0.05, min = 0), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, transform)
proposal_matrix
det_proposal_matrix <- cov(det_pmcmc_run$pars)
det_mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0), mcstate::pmcmc_parameter("sigma_w", 0.05, min = 0), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), det_proposal_matrix, transform)
det_proposal_matrix
n_particles <- 20
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
n_chains = 4)
det_pmcmc_tuned_run <- mcstate::pmcmc(det_mcmc_pars, det_filter, control = control)
# runs in 4 minutes per chain right now
detmcmc2 <- coda::as.mcmc(cbind(
det_pmcmc_tuned_run$probabilities, pmcmc_tuned_run$pars))
par(mfrow = c(1,1))
plot_particle_filter(det_pmcmc_tuned_run$trajectories$state, true_history, 1:2)
summary(detmcmc2)
plot(detmcmc2)
detmcmc2 <- coda::as.mcmc(cbind(
det_pmcmc_tuned_run$probabilities, det_pmcmc_tuned_run$pars))
par(mfrow = c(1,1))
plot_particle_filter(det_pmcmc_tuned_run$trajectories$state, true_history, 1:2)
summary(detmcmc2)
plot(detmcmc2)
det_proposal_matrix <- cov(det_pmcmc_tuned_run$pars)
det_mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0), mcstate::pmcmc_parameter("sigma_w", 0.05, min = 0), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), det_proposal_matrix, transform)
det_proposal_matrix
n_particles <- 20
n_steps = 1000
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
n_chains = 4)
det_pmcmc_tuned_run <- mcstate::pmcmc(det_mcmc_pars, det_filter, control = control)
# runs in 4 minutes per chain right now
detmcmc2 <- coda::as.mcmc(cbind(
det_pmcmc_tuned_run$probabilities, det_pmcmc_tuned_run$pars))
par(mfrow = c(1,1))
plot_particle_filter(det_pmcmc_tuned_run$trajectories$state, true_history, 1:2)
summary(detmcmc2)
plot(detmcmc2)
det_proposal_matrix <- cov(det_pmcmc_tuned_run$pars)
det_mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0, max = 1), mcstate::pmcmc_parameter("sigma_w", 0.05, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), det_proposal_matrix, transform)
det_proposal_matrix
n_particles <- 20
n_steps = 1000
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
n_chains = 4)
det_pmcmc_tuned_run <- mcstate::pmcmc(det_mcmc_pars, det_filter, control = control)
# runs in 4 minutes per chain right now
detmcmc2 <- coda::as.mcmc(cbind(
det_pmcmc_tuned_run$probabilities, det_pmcmc_tuned_run$pars))
par(mfrow = c(1,1))
plot_particle_filter(det_pmcmc_tuned_run$trajectories$state, true_history, 1:2)
summary(detmcmc2)
plot(detmcmc2)
det_proposal_matrix <- cov(det_pmcmc_tuned_run$pars)
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0, max = 1), mcstate::pmcmc_parameter("sigma_w", 0.05, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), det_proposal_matrix, transform)
det_proposal_matrix
n_particles <- 20
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
n_chains = 2)
pmcmc_tuned_run <- mcstate::pmcmc(mcmc_pars, filter, control = control)
n_particles <- 20
n_steps = 500
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
n_chains = 2)
pmcmc_tuned_run <- mcstate::pmcmc(mcmc_pars, filter, control = control)
# runs in 4 minutes per chain right now
mcmc2 <- coda::as.mcmc(cbind(
pmcmc_tuned_run$probabilities, pmcmc_tuned_run$pars))
par(mfrow = c(1,1))
plot_particle_filter(pmcmc_tuned_run$trajectories$state, true_history, 1:2)
summary(mcmc2)
plot(mcmc2)
plot_particle_filter(pmcmc_tuned_run$trajectories$state, true_history, 1:2)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(hrbrthemes)
# Create data
lollipop_data_2004 <- data.frame(
x=1:no_clusters,
model2004=pmcmc_tuned_run$trajectories$state[2:63,1,2]/sum(pmcmc_tuned_run$trajectories$state[2:63,1,2]),
data2004=as.numeric(true_history[1,2:63])/sum(as.numeric(true_history[1,2:63]))
)
lollipop_data_2007 <- data.frame(
x=1:no_clusters,
model2007=pmcmc_tuned_run$trajectories$state[2:63,1,3]/sum(pmcmc_tuned_run$trajectories$state[2:63,1,3]),
data2007=as.numeric(true_history[2,2:63])/sum(as.numeric(true_history[2,2:63]))
)
# Change baseline
lollipop_plot_2004 <- ggplot(lollipop_data_2004) +
geom_segment( aes(x=x, xend=x, y=model2004, yend=data2004), color="grey") +
geom_point( aes(x=x, y=model2004, color="Model"), size=3 ) +
geom_point( aes(x=x, y=data2004, color="Data"), size=3 ) +
scale_color_manual(values = c("#E69F00", "#56B4E9"),
guide  = guide_legend(),
name   = "Group") +
coord_flip()+
theme_ipsum() +
theme(legend.position = "none") +
xlab("") +
ylab("Value of Y") +
ylim(0, max(max(lollipop_data_2004$model2004),max(lollipop_data_2004$data2004),max(lollipop_data_2007$model2007),max(lollipop_data_2007$data2007)))
lollipop_plot_2007 <- ggplot(lollipop_data_2007) +
geom_segment( aes(x=x, xend=x, y=model2007, yend=data2007), color="grey") +
geom_point( aes(x=x, y=model2007, color="Model"), size=3 ) +
geom_point( aes(x=x, y=data2007, color="Data"), size=3 ) +
scale_color_manual(values = c("#E69F00", "#56B4E9"),
guide  = guide_legend(),
name   = "Group") +
coord_flip()+
theme_ipsum() +
theme(legend.position = c(.8,.8)) +
xlab("") +
ylab("Value of Y") +
ylim(0, max(max(lollipop_data_2004$model2004),max(lollipop_data_2004$data2004),max(lollipop_data_2007$model2007),max(lollipop_data_2007$data2007)))
grid.arrange(lollipop_plot_2004, lollipop_plot_2007, ncol = 2)
#what do I learn from this? maybe that my model is making the bigger clusters too big and the smaller ones too small? So stochastic dying of the population is an issue.
#First Lollipop plot of a tuned model fit run. You can see that the model consistently overestimates the size of the big clusters and underestimates the size of the small clusters.
# Change baseline
lollipop_plot_2001_nVT <- ggplot(lollipop_data_2001_nVT) +
geom_segment( aes(x=x, xend=x, y=model2001, yend=data2001), color="grey") +
geom_point( aes(x=x, y=model2001, color="Model non-VT"), size=3 ) +
geom_point( aes(x=x, y=data2001, color="Data non_VT"), size=3 ) +
scale_color_manual(values = c("#E69F00", "#56B4E9"),
guide  = guide_legend(),
name   = "Group") +
coord_flip()+
#theme_ipsum() +
theme(legend.position = "none") +
ggtitle("2001 Non-Vaccine Types") +
ylab("Frequency") +
xlab("Clusters") +
theme(axis.title  = element_text(size = 20), axis.text = element_text(size = 20), plot.title = element_text(size = 25,hjust = 0.5))  +
ylim(0, max(max(lollipop_data_2001_nVT$model2001),max(lollipop_data_2001_nVT$data2001),max(lollipop_data_2004_VT$model2004),max(lollipop_data_2004_VT$data2004),max(lollipop_data_2007_nVT$model2007),max(lollipop_data_2007_nVT$data2007)))
lollipop_plot_2001_VT <- ggplot(lollipop_data_2001_VT) +
geom_segment( aes(x=x, xend=x, y=model2001, yend=data2001), color="grey") +
geom_point( aes(x=x, y=model2001, color="Model non-VT"), size=3 ) +
geom_point( aes(x=x, y=data2001, color="Data non_VT"), size=3 ) +
scale_color_manual(values = c("#E69F00", "#56B4E9"),
guide  = guide_legend(),
name   = "Group") +
coord_flip()+
#theme_ipsum() +
theme(legend.position = "none") +
ggtitle("2001 Vaccine Types") +
ylab("Frequency") +
xlab("Clusters") +
theme(axis.title  = element_text(size = 20), axis.text = element_text(size = 20), plot.title = element_text(size = 25,hjust = 0.5))  +
ylim(0, max(max(lollipop_data_2001_nVT$model2001),max(lollipop_data_2001_nVT$data2001),max(lollipop_data_2004_VT$model2004),max(lollipop_data_2004_VT$data2004),max(lollipop_data_2007_nVT$model2007),max(lollipop_data_2007_nVT$data2007)))
lollipop_plot_2004_nVT <- ggplot(lollipop_data_2004_nVT) +
geom_segment( aes(x=x, xend=x, y=model2004, yend=data2004), color="grey") +
geom_point( aes(x=x, y=model2004, color="Model"), size=3 ) +
geom_point( aes(x=x, y=data2004, color="Data"), size=3 ) +
scale_color_manual(values = c("#E69F00", "#56B4E9"),
guide  = guide_legend(),
name   = "Group") +
coord_flip()+
#theme_ipsum() +
theme(legend.position = "none") +
ggtitle("2004 Non-Vaccine Types") +
ylab("Frequency") +
xlab("Clusters") +
theme(axis.title  = element_text(size = 20), axis.text = element_text(size = 20), plot.title = element_text(size = 25,hjust = 0.5))  +
ylim(0, max(max(lollipop_data_2001_nVT$model2001),max(lollipop_data_2001_nVT$data2001),max(lollipop_data_2004_VT$model2004),max(lollipop_data_2004_VT$data2004),max(lollipop_data_2007_nVT$model2007),max(lollipop_data_2007_nVT$data2007)))
lollipop_plot_2004_VT <- ggplot(lollipop_data_2004_VT) +
geom_segment( aes(x=x, xend=x, y=model2004, yend=data2004), color="grey") +
geom_point( aes(x=x, y=model2004, color="Model"), size=3 ) +
geom_point( aes(x=x, y=data2004, color="Data"), size=3 ) +
scale_color_manual(values = c("#E69F00", "#56B4E9"),
guide  = guide_legend(),
name   = "Group") +
coord_flip()+
#theme_ipsum() +
theme(legend.position = "none") +
ggtitle("2004 Vaccine Types") +
ylab("Frequency") +
xlab("Clusters") +
theme(axis.title  = element_text(size = 20), axis.text = element_text(size = 20), plot.title = element_text(size = 25,hjust = 0.5))  +
ylim(0, max(max(lollipop_data_2001_nVT$model2001),max(lollipop_data_2001_nVT$data2001),max(lollipop_data_2004_VT$model2004),max(lollipop_data_2004_VT$data2004),max(lollipop_data_2007_nVT$model2007),max(lollipop_data_2007_nVT$data2007)))
lollipop_plot_2007_nVT <- ggplot(lollipop_data_2007_nVT) +
geom_segment( aes(x=x, xend=x, y=model2007, yend=data2007), color="grey") +
geom_point( aes(x=x, y=model2007, color="Model"), size=3 ) +
geom_point( aes(x=x, y=data2007, color="Data"), size=3 ) +
scale_color_manual(values = c("#E69F00", "#56B4E9"),
guide  = guide_legend(),
name   = "Group") +
coord_flip()+
#theme_ipsum() +
theme(legend.position = "none") +
ggtitle("2007 Non-Vaccine Types") +
ylab("Frequency") +
xlab("Clusters") +
theme(axis.title  = element_text(size = 20), axis.text = element_text(size = 20), plot.title = element_text(size = 25,hjust = 0.5))  +
ylim(0, max(max(lollipop_data_2001_nVT$model2001),max(lollipop_data_2001_nVT$data2001),max(lollipop_data_2004_VT$model2004),max(lollipop_data_2004_VT$data2004),max(lollipop_data_2007_nVT$model2007),max(lollipop_data_2007_nVT$data2007)))
lollipop_plot_2007_VT <- ggplot(lollipop_data_2007_VT) +
geom_segment( aes(x=x, xend=x, y=model2007, yend=data2007), color="grey") +
geom_point( aes(x=x, y=model2007, color="Model"), size=3 ) +
geom_point( aes(x=x, y=data2007, color="Data"), size=3 ) +
scale_color_manual(values = c("#E69F00", "#56B4E9"),
guide  = guide_legend(),
name   = "Legend") +
coord_flip()+
#theme_ipsum() +
theme(legend.position = c(.8,.8),legend.text = element_text(size = 20),legend.title = element_text(size = 20)) +
ggtitle("2007 Vaccine Types") +
ylab("Frequency") +
xlab("Clusters") +
theme(axis.title  = element_text(size = 20), axis.text = element_text(size = 20), plot.title = element_text(size = 25,hjust = 0.5))  +
ylim(0, max(max(lollipop_data_2001_nVT$model2001),max(lollipop_data_2001_nVT$data2001),max(lollipop_data_2004_VT$model2004),max(lollipop_data_2004_VT$data2004),max(lollipop_data_2007_nVT$model2007),max(lollipop_data_2007_nVT$data2007)))
#save plot as a png
#g <- arrangeGrob(lollipop_plot_2001,lollipop_plot_2004, lollipop_plot_2007, ncol =3) #generates g
#ggsave(file=paste(paste("plot",as.character(counter), sep=""), ".png", sep=""), g, width = 16, height = 16) #saves g
grid.arrange(lollipop_plot_2001_nVT + theme(plot.margin = unit(c(.5,0.5,1,0.5), "cm")),lollipop_plot_2004_nVT+ theme(plot.margin = unit(c(.5,0.5,1,0.5), "cm")), lollipop_plot_2007_nVT + theme(plot.margin = unit(c(.5,0.5,1,0.5), "cm")),lollipop_plot_2001_VT + theme(plot.margin = unit(c(.5,0.5,.5,0.5), "cm")), lollipop_plot_2004_VT + theme(plot.margin = unit(c(.5,0.5,.5,0.5), "cm")), lollipop_plot_2007_VT + theme(plot.margin = unit(c(.5,0.5,.5,0.5), "cm")), ncol = 3, nrow=2)
#grid.arrange(lollipop_plot_2001_VT,lollipop_plot_2004_VT, lollipop_plot_2007_VT, ncol = 3)
grid.arrange(lollipop_plot_2004_nVT+ theme(plot.margin = unit(c(.5,0.5,1,0.5), "cm")), lollipop_plot_2007_nVT + theme(plot.margin = unit(c(.5,0.5,1,0.5), "cm")), lollipop_plot_2004_VT + theme(plot.margin = unit(c(.5,0.5,.5,0.5), "cm")), lollipop_plot_2007_VT + theme(plot.margin = unit(c(.5,0.5,.5,0.5), "cm")), ncol = 2, nrow=2)
plot_particle_filter(pmcmc_tuned_run$trajectories$state, true_history, 1:2)
# Change baseline
lollipop_plot_2001_nVT <- ggplot(lollipop_data_2001_nVT) +
geom_segment( aes(x=x, xend=x, y=model2001, yend=data2001), color="grey") +
geom_point( aes(x=x, y=model2001, color="Model non-VT"), size=3 ) +
geom_point( aes(x=x, y=data2001, color="Data non_VT"), size=3 ) +
scale_color_manual(values = c("#E69F00", "#56B4E9"),
guide  = guide_legend(),
name   = "Group") +
coord_flip()+
#theme_ipsum() +
theme(legend.position = "none") +
ggtitle("2001 Non-Vaccine Types") +
ylab("Frequency") +
xlab("Clusters") +
theme(axis.title  = element_text(size = 20), axis.text = element_text(size = 20), plot.title = element_text(size = 25,hjust = 0.5))  +
ylim(0, max(max(lollipop_data_2001_nVT$model2001),max(lollipop_data_2001_nVT$data2001),max(lollipop_data_2004_VT$model2004),max(lollipop_data_2004_VT$data2004),max(lollipop_data_2007_nVT$model2007),max(lollipop_data_2007_nVT$data2007)))
lollipop_plot_2001_VT <- ggplot(lollipop_data_2001_VT) +
geom_segment( aes(x=x, xend=x, y=model2001, yend=data2001), color="grey") +
geom_point( aes(x=x, y=model2001, color="Model non-VT"), size=3 ) +
geom_point( aes(x=x, y=data2001, color="Data non_VT"), size=3 ) +
scale_color_manual(values = c("#E69F00", "#56B4E9"),
guide  = guide_legend(),
name   = "Group") +
coord_flip()+
#theme_ipsum() +
theme(legend.position = "none") +
ggtitle("2001 Vaccine Types") +
ylab("Frequency") +
xlab("Clusters") +
theme(axis.title  = element_text(size = 20), axis.text = element_text(size = 20), plot.title = element_text(size = 25,hjust = 0.5))  +
ylim(0, max(max(lollipop_data_2001_nVT$model2001),max(lollipop_data_2001_nVT$data2001),max(lollipop_data_2004_VT$model2004),max(lollipop_data_2004_VT$data2004),max(lollipop_data_2007_nVT$model2007),max(lollipop_data_2007_nVT$data2007)))
lollipop_plot_2004_nVT <- ggplot(lollipop_data_2004_nVT) +
geom_segment( aes(x=x, xend=x, y=model2004, yend=data2004), color="grey") +
geom_point( aes(x=x, y=model2004, color="Model"), size=3 ) +
geom_point( aes(x=x, y=data2004, color="Data"), size=3 ) +
scale_color_manual(values = c("#E69F00", "#56B4E9"),
guide  = guide_legend(),
name   = "Group") +
coord_flip()+
#theme_ipsum() +
theme(legend.position = "none") +
ggtitle("2004 Non-Vaccine Types") +
ylab("Frequency") +
xlab("Clusters") +
theme(axis.title  = element_text(size = 20), axis.text = element_text(size = 20), plot.title = element_text(size = 25,hjust = 0.5))  +
ylim(0, max(max(lollipop_data_2001_nVT$model2001),max(lollipop_data_2001_nVT$data2001),max(lollipop_data_2004_VT$model2004),max(lollipop_data_2004_VT$data2004),max(lollipop_data_2007_nVT$model2007),max(lollipop_data_2007_nVT$data2007)))
lollipop_plot_2004_VT <- ggplot(lollipop_data_2004_VT) +
geom_segment( aes(x=x, xend=x, y=model2004, yend=data2004), color="grey") +
geom_point( aes(x=x, y=model2004, color="Model"), size=3 ) +
geom_point( aes(x=x, y=data2004, color="Data"), size=3 ) +
scale_color_manual(values = c("#E69F00", "#56B4E9"),
guide  = guide_legend(),
name   = "Group") +
coord_flip()+
#theme_ipsum() +
theme(legend.position = "none") +
ggtitle("2004 Vaccine Types") +
ylab("Frequency") +
xlab("Clusters") +
theme(axis.title  = element_text(size = 20), axis.text = element_text(size = 20), plot.title = element_text(size = 25,hjust = 0.5))  +
ylim(0, max(max(lollipop_data_2001_nVT$model2001),max(lollipop_data_2001_nVT$data2001),max(lollipop_data_2004_VT$model2004),max(lollipop_data_2004_VT$data2004),max(lollipop_data_2007_nVT$model2007),max(lollipop_data_2007_nVT$data2007)))
lollipop_plot_2007_nVT <- ggplot(lollipop_data_2007_nVT) +
geom_segment( aes(x=x, xend=x, y=model2007, yend=data2007), color="grey") +
geom_point( aes(x=x, y=model2007, color="Model"), size=3 ) +
geom_point( aes(x=x, y=data2007, color="Data"), size=3 ) +
scale_color_manual(values = c("#E69F00", "#56B4E9"),
guide  = guide_legend(),
name   = "Group") +
coord_flip()+
#theme_ipsum() +
theme(legend.position = "none") +
ggtitle("2007 Non-Vaccine Types") +
ylab("Frequency") +
xlab("Clusters") +
theme(axis.title  = element_text(size = 20), axis.text = element_text(size = 20), plot.title = element_text(size = 25,hjust = 0.5))  +
ylim(0, max(max(lollipop_data_2001_nVT$model2001),max(lollipop_data_2001_nVT$data2001),max(lollipop_data_2004_VT$model2004),max(lollipop_data_2004_VT$data2004),max(lollipop_data_2007_nVT$model2007),max(lollipop_data_2007_nVT$data2007)))
lollipop_plot_2007_VT <- ggplot(lollipop_data_2007_VT) +
geom_segment( aes(x=x, xend=x, y=model2007, yend=data2007), color="grey") +
geom_point( aes(x=x, y=model2007, color="Model"), size=3 ) +
geom_point( aes(x=x, y=data2007, color="Data"), size=3 ) +
scale_color_manual(values = c("#E69F00", "#56B4E9"),
guide  = guide_legend(),
name   = "Legend") +
coord_flip()+
#theme_ipsum() +
theme(legend.position = c(.8,.8),legend.text = element_text(size = 20),legend.title = element_text(size = 20)) +
ggtitle("2007 Vaccine Types") +
ylab("Frequency") +
xlab("Clusters") +
theme(axis.title  = element_text(size = 20), axis.text = element_text(size = 20), plot.title = element_text(size = 25,hjust = 0.5))  +
ylim(0, max(max(lollipop_data_2001_nVT$model2001),max(lollipop_data_2001_nVT$data2001),max(lollipop_data_2004_VT$model2004),max(lollipop_data_2004_VT$data2004),max(lollipop_data_2007_nVT$model2007),max(lollipop_data_2007_nVT$data2007)))
#save plot as a png
#g <- arrangeGrob(lollipop_plot_2001,lollipop_plot_2004, lollipop_plot_2007, ncol =3) #generates g
#ggsave(file=paste(paste("plot",as.character(counter), sep=""), ".png", sep=""), g, width = 16, height = 16) #saves g
grid.arrange(lollipop_plot_2001_nVT + theme(plot.margin = unit(c(.5,0.5,1,0.5), "cm")),lollipop_plot_2004_nVT+ theme(plot.margin = unit(c(.5,0.5,1,0.5), "cm")), lollipop_plot_2007_nVT + theme(plot.margin = unit(c(.5,0.5,1,0.5), "cm")),lollipop_plot_2001_VT + theme(plot.margin = unit(c(.5,0.5,.5,0.5), "cm")), lollipop_plot_2004_VT + theme(plot.margin = unit(c(.5,0.5,.5,0.5), "cm")), lollipop_plot_2007_VT + theme(plot.margin = unit(c(.5,0.5,.5,0.5), "cm")), ncol = 3, nrow=2)
#grid.arrange(lollipop_plot_2001_VT,lollipop_plot_2004_VT, lollipop_plot_2007_VT, ncol = 3)
grid.arrange(lollipop_plot_2004_nVT+ theme(plot.margin = unit(c(.5,0.5,1,0.5), "cm")), lollipop_plot_2007_nVT + theme(plot.margin = unit(c(.5,0.5,1,0.5), "cm")), lollipop_plot_2004_VT + theme(plot.margin = unit(c(.5,0.5,.5,0.5), "cm")), lollipop_plot_2007_VT + theme(plot.margin = unit(c(.5,0.5,.5,0.5), "cm")), ncol = 2, nrow=2)
summary(mcmc2)
