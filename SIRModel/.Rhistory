setwd("~/Documents/PhD_Project/Code/1st_project/odin-dust-examples/SIRModel")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
lang_output <- function(x, lang) {
cat(c(sprintf("```%s", lang), x, "```"), sep = "\n")
}
cc_output <- function(x) lang_output(x, "cc")
r_output <- function(x) lang_output(x, "r")
plain_output <- function(x) lang_output(x, "plain")
r_output(readLines(file.path("sir.R")))
library(odin.dust)
gen_sir <- odin.dust::odin_dust("sir.R")
sir_model <- gen_sir$new(pars = list(dt = 1,
S_ini = 2000,
I_ini = 5,
beta = 0.15,
gamma = 0.1),
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
sir_model$state()
sir_model$run(10)
sir_model$run(20)
dt <- 1
n_particles <- 10L
p_new <- list(dt = dt, S_ini = 2000, I_ini = 10, beta = 0.25, gamma = 0.1)
sir_model$update_state(pars = p_new, time = 0)
sir_model$state()
n_times <- 200
x <- array(NA, dim = c(sir_model$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- sir_model$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
cols <- c(S = "#000000", I = "#E69F00", R = "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") #8 colorblind friendly colors
#cols <- c(S = "#8c8cd9", I = "#cc0044", R = "#999966")
matplot(time, t(x[1, , ]), type = "l",
xlab = "Time", ylab = "Number of individuals",
col = cols[["S"]], lty = 1, ylim = range(x))
matlines(time, t(x[2, , ]), col = cols[["I"]], lty = 1)
matlines(time, t(x[3, , ]), col = cols[["R"]], lty = 1)
legend("right", lwd = 1, col = cols, legend = names(cols[1:3]), bty = "n")
# create a data frame based on the simulation 1 that I can use to fit the model to
df_SIRinfected <- data.frame(unlist(x[2,1,]))
names(df_SIRinfected)[names(df_SIRinfected)=="unlist.x.2..1...."] <- "Infected"
df_SIRinfected$day <- c(1:200)
#install.packages("drat") # -- if you don't have drat installed
drat:::add("ncov-ic")
#install.packages("mcstate")
library(mcstate)
#dt <- 0.25
dt <- 1
sir_data <- mcstate::particle_filter_data(data = df_SIRinfected,
time = "day",
rate = 1 / dt)
rmarkdown::paged_table(sir_data)
plot(df_SIRinfected$day, df_SIRinfected$Infected,
type = "l", xlab = "Day", ylab = "Total cases")
case_compare <- function(state, observed, pars = NULL) {
exp_noise <- 1e6
incidence_modelled <- state[3, , drop = TRUE] # "1," should be time, "2," should be S, "3," should be I, "4," R
incidence_observed <- observed$Infected
lambda <- incidence_modelled
+
rexp(n = length(incidence_modelled), rate = exp_noise)
dpois(x = incidence_observed, lambda = lambda, log = TRUE)
}
gen_sir$new(pars = list(), time = 0, n_particles = 1L)$info()
n_particles <- 1000
filter <- mcstate::particle_filter$new(data = sir_data,
model = gen_sir,
n_particles = n_particles,
compare = case_compare,
seed = 1L)
case_compare(gen_sir, sir_data)
gen_sir
sir_model
sir_model$state()
case_compare(sir_model$state(), sir_data)
sir_model$state()[3,,drop=TRUE]
sir_model$state()[3,]
sir_model$state()[3,,]
dim(sir_model$state())
dim(sir_data)
sir_data$Infected
gen_sir$new(pars = list(), time = 0, n_particles = 1L)$info()
n_particles <- 1000
filter <- mcstate::particle_filter$new(data = sir_data,
model = gen_sir,
n_particles = n_particles,
compare = case_compare,
seed = 1L)
filter$run(save_history = TRUE, pars = list(dt = dt))
beta <- mcstate::pmcmc_parameter("beta", 0.2, min = 0.1)
gamma <- mcstate::pmcmc_parameter("gamma", 0.1, min = 0.075, prior = function(p)
dgamma(p, shape = 1, scale = 0.2, log = TRUE))
#gamma <- mcstate::pmcmc_parameter("gamma", 0.1, min = 0.1)
proposal_matrix <- diag(0.1, 2)
mcmc_pars <- mcstate::pmcmc_parameters$new(list(beta = beta, gamma = gamma),
proposal_matrix)
mcmc_pars$initial()
mcmc_pars$model(mcmc_pars$initial())
n_steps <- 500
n_burnin <- 200
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE)
pmcmc_run <- mcstate::pmcmc(mcmc_pars, filter, control = control)
#> Running chain 1 / 1
#> Finished 500 steps in 14 secs
plot_particle_filter(pmcmc_run$trajectories$state, true_history, df_infected$day)
dpois(c(1,2,3),lambda = c(1,2,3))
dpois(c(1,2,3),lambda = c(1,1,1))
pmcmc_run$trajectories$state
pmcmc_run$trajectories$state()[3,]
pmcmc_run$trajectories$state[3,]
pmcmc_run$trajectories$state[3,,]
pmcmc_run$trajectories$state[,2,]
pmcmc_run$trajectories$state[,,1]
pmcmc_run$trajectories$state[,,2]
dim(pmcmc_run$trajectories$state)
df_infected$day
true_history
df_SIRinfected$Infected
length(df_SIRinfected$Infected)
pmcmc_run$trajectories$state[,,3]
pmcmc_run$trajectories$state[,,4]
pmcmc_run$trajectories$state[,,200]
dim(pmcmc_run$trajectories$state)
pmcmc_run$trajectories$state[,1,1]
pmcmc_run$trajectories$state[,2,1]
pmcmc_run$trajectories$state[,20,10]
pmcmc_run$trajectories$state[,30,10]
pmcmc_run$trajectories$state[,60,10]
pmcmc_run$trajectories$state[,100,10]
pmcmc_run$trajectories$state[,100,20]
pmcmc_run$trajectories$state[,400,20]
pmcmc_run$trajectories$state[,40,20]
pmcmc_run$trajectories$state[,50,20]
pmcmc_run$trajectories$state[,70,20]
