Pop_ini <- pre_vacc_pop
Pop_eq <- pre_vacc_pop
Genotypes <-genotype_matr
capacity <- sum(pre_vacc_pop)
delta <- delta_rank
vaccTypes <- is_vaccType
vacc_time <- vacc_time
make_transform <- function(m) {
function(theta) {
c(list(m = m), as.list(theta))
}
}
proposal_matrix <- diag(0.1, 5) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
# here, all parameters are proposed independently.
# think about this, this might not actually be true
mcmc_pars <- mcstate::pmcmc_parameters$new(list(sigma_f = sigma_f, sigma_w = sigma_w, prop_f = prop_f, m = m, v = v, species_no = species_no,  gene_no = gene_no, vacc_time = vacc_time), proposal_matrix, transform = make_transform(c(Pop_ini, Pop_eq, Genotypes, capacity, delta, vaccTypes, species_no, gene_no, vacc_time)))
# Using MCMC to infer parameters
sigma_f <- mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0)
sigma_w <- mcstate::pmcmc_parameter("sigma_w", 0.05, min = 0)
prop_f <- mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1)
m <- mcstate::pmcmc_parameter("m", 0.03, min = 0)
v <- mcstate::pmcmc_parameter("v", 0.05, min = 0)
species_no <- 4
gene_no <- 5
Pop_ini <- pre_vacc_pop
Pop_eq <- pre_vacc_pop
Genotypes <-genotype_matr
capacity <- sum(pre_vacc_pop)
delta <- delta_rank
vaccTypes <- is_vaccType
vacc_time <- vacc_time
make_transform <- function(m) {
function(theta) {
c(list(m = m), as.list(theta))
}
}
proposal_matrix <- diag(0.1, 5) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
# here, all parameters are proposed independently.
# think about this, this might not actually be true
mcmc_pars <- mcstate::pmcmc_parameters$new(list(sigma_f = sigma_f, sigma_w = sigma_w, prop_f = prop_f, m = m, v = v), proposal_matrix, transform = make_transform(c(Pop_ini, Pop_eq, Genotypes, capacity, delta, vaccTypes, species_no, gene_no, vacc_time)))
# read this: https://mrc-ide.github.io/mcstate/reference/pmcmc_parameters.html
# it explains how to not fit all parameters but just the ones I want
# non-scalar parameters have to be transformed for this.
n_steps <- 500
n_burnin <- 200
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE)
pmcmc_run <- mcstate::pmcmc(mcmc_pars, filter, control = control)
pars$initial()
mcmc_pars$initial()
pars$model(mcmc_pars$initial())
mcmc_pars$model(mcmc_pars$initial())
pre_vacc_pop
genotype_matr
vacc_time
# Using MCMC to infer parameters
sigma_f <- mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0)
sigma_w <- mcstate::pmcmc_parameter("sigma_w", 0.05, min = 0)
prop_f <- mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1)
m <- mcstate::pmcmc_parameter("m", 0.03, min = 0)
v <- mcstate::pmcmc_parameter("v", 0.05, min = 0)
species_no <- 4
gene_no <- 5
Pop_ini <- pre_vacc_pop
Pop_eq <- pre_vacc_pop
Genotypes <-genotype_matr
capacity <- sum(pre_vacc_pop)
delta <- delta_rank
vaccTypes <- is_vaccType
vacc_time <- 5
make_transform <- function(m) {
function(theta) {
c(list(m = m), as.list(theta))
}
}
proposal_matrix <- diag(0.1, 5) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
# here, all parameters are proposed independently.
# think about this, this might not actually be true
mcmc_pars <- mcstate::pmcmc_parameters$new(list(sigma_f = sigma_f, sigma_w = sigma_w, prop_f = prop_f, m = m, v = v), proposal_matrix, transform = make_transform(c(Pop_ini, Pop_eq, Genotypes, capacity, delta, vaccTypes, species_no, gene_no, vacc_time)))
# read this: https://mrc-ide.github.io/mcstate/reference/pmcmc_parameters.html
# it explains how to not fit all parameters but just the ones I want
# non-scalar parameters have to be transformed for this.
vaccTypes
delta
capacity
n_steps <- 500
n_burnin <- 200
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE)
pmcmc_run <- mcstate::pmcmc(mcmc_pars, filter, control = control)
mcmc_pars$model(mcmc_pars$initial())
# Using MCMC to infer parameters
sigma_f <- mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0)
sigma_w <- mcstate::pmcmc_parameter("sigma_w", 0.05, min = 0)
prop_f <- mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1)
m <- mcstate::pmcmc_parameter("m", 0.03, min = 0)
v <- mcstate::pmcmc_parameter("v", 0.05, min = 0)
species_no <- 4
gene_no <- 5
Pop_ini <- pre_vacc_pop
Pop_eq <- pre_vacc_pop
Genotypes <-genotype_matr
capacity <- sum(pre_vacc_pop)
delta <- delta_rank
vaccTypes <- is_vaccType
vacc_time <- 5
make_transform <- function(m) {
function(theta) {
c(list(m = m), as.list(theta))
}
}
proposal_matrix <- diag(0.1, 5) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
# here, all parameters are proposed independently.
# think about this, this might not actually be true
mcmc_pars <- mcstate::pmcmc_parameters$new(list(sigma_f = sigma_f, sigma_w = sigma_w, prop_f = prop_f, m = m, v = v), proposal_matrix, transform = make_transform(Pop_ini))
#, Pop_eq, Genotypes, capacity, delta, vaccTypes, species_no, gene_no, vacc_time)))
mcmc_pars$model(mcmc_pars$initial())
# read this: https://mrc-ide.github.io/mcstate/reference/pmcmc_parameters.html
# it explains how to not fit all parameters but just the ones I want
# non-scalar parameters have to be transformed for this.
n_steps <- 500
n_burnin <- 200
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE)
pmcmc_run <- mcstate::pmcmc(mcmc_pars, filter, control = control)
# Using MCMC to infer parameters
sigma_f <- mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0)
sigma_w <- mcstate::pmcmc_parameter("sigma_w", 0.05, min = 0)
prop_f <- mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1)
m <- mcstate::pmcmc_parameter("m", 0.03, min = 0)
v <- mcstate::pmcmc_parameter("v", 0.05, min = 0)
species_no <- 4
gene_no <- 5
Pop_ini <- pre_vacc_pop
Pop_eq <- pre_vacc_pop
Genotypes <-genotype_matr
capacity <- sum(pre_vacc_pop)
delta <- delta_rank
vaccTypes <- is_vaccType
vacc_time <- 5
make_transform <- function(m) {
function(theta) {
c(list(m = m), as.list(theta))
}
}
proposal_matrix <- diag(0.1, 5) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
# here, all parameters are proposed independently.
# think about this, this might not actually be true
mcmc_pars <- mcstate::pmcmc_parameters$new(list(sigma_f = sigma_f, sigma_w = sigma_w, prop_f = prop_f, m = m, v = v), proposal_matrix, transform = make_transform(c(Pop_iniPop_eq, Genotypes, capacity, delta, vaccTypes, species_no, gene_no, vacc_time)))
mcmc_pars$model(mcmc_pars$initial())
# here, all parameters are proposed independently.
# think about this, this might not actually be true
mcmc_pars <- mcstate::pmcmc_parameters$new(list(sigma_f = sigma_f, sigma_w = sigma_w, prop_f = prop_f, m = m, v = v), proposal_matrix, transform = make_transform(c(Pop_ini, Pop_eq, Genotypes, capacity, delta, vaccTypes, species_no, gene_no, vacc_time)))
mcmc_pars$model(mcmc_pars$initial())
n_steps <- 500
n_burnin <- 200
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE)
pmcmc_run <- mcstate::pmcmc(mcmc_pars, filter, control = control)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
lang_output <- function(x, lang) {
cat(c(sprintf("```%s", lang), x, "```"), sep = "\n")
}
cc_output <- function(x) lang_output(x, "cc")
r_output <- function(x) lang_output(x, "r")
plain_output <- function(x) lang_output(x, "plain")
r_output(readLines(file.path("sir.R")))
setwd("~/Documents/PhD_Project/Code/1st_project/odin-dust-examples/TestModels")
r_output(readLines(file.path("sir.R")))
library(odin.dust)
gen_sir <- odin.dust::odin_dust("sir.R")
sir_model <- gen_sir$new(pars = list(dt = 1,
S_ini = 2000,
I_ini = 5,
beta = 0.15,
gamma = 0.1),
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
sir_model$state()
sir_model$run(10)
sir_model$run(20)
dt <- 1
n_particles <- 10L
p_new <- list(dt = dt, S_ini = 2000, I_ini = 10, beta = 0.25, gamma = 0.1)
sir_model$update_state(pars = p_new, time = 0)
sir_model$state()
n_times <- 200
x <- array(NA, dim = c(sir_model$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- sir_model$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
cols <- c(S = "#000000", I = "#E69F00", R = "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") #8 colorblind friendly colors
#cols <- c(S = "#8c8cd9", I = "#cc0044", R = "#999966")
matplot(time, t(x[1, , ]), type = "l",
xlab = "Time", ylab = "Number of individuals",
col = cols[["S"]], lty = 1, ylim = range(x))
matlines(time, t(x[2, , ]), col = cols[["I"]], lty = 1)
matlines(time, t(x[3, , ]), col = cols[["R"]], lty = 1)
legend("right", lwd = 1, col = cols, legend = names(cols[1:3]), bty = "n")
# create a data frame based on the simulation 1 that I can use to fit the model to
df_SIRinfected <- data.frame(unlist(x[2,1,]))
names(df_SIRinfected)[names(df_SIRinfected)=="unlist.x.2..1...."] <- "Infected"
df_SIRinfected$day <- c(1:200)
#install.packages("drat") # -- if you don't have drat installed
drat:::add("ncov-ic")
#install.packages("mcstate")
library(mcstate)
#dt <- 0.25
dt <- 1
sir_data <- mcstate::particle_filter_data(data = df_SIRinfected,
time = "day",
rate = 1 / dt)
rmarkdown::paged_table(sir_data)
plot(df_SIRinfected$day, df_SIRinfected$Infected,
type = "l", xlab = "Day", ylab = "Total cases")
case_compare <- function(state, observed, pars = NULL) {
exp_noise <- 1e6
incidence_modelled <- state[3, , drop = TRUE] # "1," should be time, "2," should be S, "3," should be I, "4," R
incidence_observed <- observed$Infected
lambda <- incidence_modelled
+
rexp(n = length(incidence_modelled), rate = exp_noise)
dpois(x = incidence_observed, lambda = lambda, log = TRUE)
}
gen_sir$new(pars = list(), time = 0, n_particles = 1L)$info()
n_particles <- 1000
filter <- mcstate::particle_filter$new(data = sir_data,
model = gen_sir,
n_particles = n_particles,
compare = case_compare,
seed = 1L)
filter$run(save_history = TRUE, pars = list(dt = dt))
plot_particle_filter <- function(history, true_history, times, obs_end = NULL) {
if (is.null(obs_end)) {
obs_end <- max(times)
}
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
cols <- c(S = "#8c8cd9", I = "#cc0044", R = "#999966", TH = "#000000")
matplot(times, t(history[2, , -1]), type = "l",
xlab = "Time", ylab = "Number of individuals",
col = cols[["S"]], lty = 1, ylim = range(history))
matlines(times, t(history[3, , -1]), col = cols[["I"]], lty = 1)
matlines(times, t(history[4, , -1]), col = cols[["R"]], lty = 1)
matpoints(times[1:obs_end], (true_history), pch = 19, col = cols[["TH"]])
legend("left", lwd = 1, col = cols, legend = names(cols), bty = "n")
}
#true_history <- readRDS("seir_true_history.rds")
true_history <- df_SIRinfected$Infected
plot_particle_filter(filter$history(), true_history, df_infected$day)
filter$run(save_history = TRUE, pars = list(dt = dt, beta = 0.15, gamma = 0.1))
plot_particle_filter(filter$history(), true_history, df_infected$day)
beta <- mcstate::pmcmc_parameter("beta", 0.2, min = 0.1)
gamma <- mcstate::pmcmc_parameter("gamma", 0.1, min = 0.075, prior = function(p)
dgamma(p, shape = 1, scale = 0.2, log = TRUE))
#gamma <- mcstate::pmcmc_parameter("gamma", 0.1, min = 0.1)
proposal_matrix <- diag(0.1, 2)
mcmc_pars <- mcstate::pmcmc_parameters$new(list(beta = beta, gamma = gamma),
proposal_matrix)
mcmc_pars$initial()
mcmc_pars$model(mcmc_pars$initial())
n_steps <- 500
n_burnin <- 200
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE)
pmcmc_run <- mcstate::pmcmc(mcmc_pars, filter, control = control)
#> Running chain 1 / 1
#> Finished 500 steps in 14 secs
plot_particle_filter(pmcmc_run$trajectories$state, true_history, df_infected$day)
plot_particle_filter <- function(history, true_history, times, obs_end = NULL) {
if (is.null(obs_end)) {
obs_end <- max(times)
}
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
#cols <- c(S = "#8c8cd9", I = "#cc0044", R = "#999966", TH = "#000000")
cols <- c(S = "#000000", I = "#E69F00", R = "#56B4E9", TH = "#009E73")
matplot(times, t(history[2, , -1]), type = "l",
xlab = "Time", ylab = "Number of individuals",
col = cols[["S"]], lty = 1, ylim = range(history))
matlines(times, t(history[3, , -1]), col = cols[["I"]], lty = 1)
matlines(times, t(history[4, , -1]), col = cols[["R"]], lty = 1)
matpoints(times[1:obs_end], (true_history), pch = 20, col = cols[["TH"]])
legend("left", lwd = 1, col = cols, legend = c("S","I","R","Data"), bty = "n")
}
#true_history <- readRDS("seir_true_history.rds")
true_history <- df_SIRinfected$Infected
plot_particle_filter(filter$history(), true_history, df_infected$day)
#> Running chain 1 / 1
#> Finished 500 steps in 14 secs
plot_particle_filter(pmcmc_run$trajectories$state, true_history, df_infected$day)
plot(pmcmc_run$pars[,"beta"],pmcmc_run$pars[,"gamma"])
print(length(pmcmc_run$pars[,"beta"]))
print(unique(pmcmc_run$pars[,"beta"]))
processed_chains <- mcstate::pmcmc_thin(pmcmc_run, burnin = n_burnin, thin = 2)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
parameter_mean_hpd
library(coda)
mcmc1 <- coda::as.mcmc(cbind(pmcmc_run$probabilities, pmcmc_run$pars))
summary(mcmc1)
plot(mcmc1)
print("effective Sample Size")
coda::effectiveSize(mcmc1)
print("Rejection Rate")
1 - coda::rejectionRate(mcmc1)
proposal_matrix <- cov(pmcmc_run$pars)
mcmc_pars <- mcstate::pmcmc_parameters$new(
list(beta = beta, gamma = gamma),
proposal_matrix)
proposal_matrix
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
n_chains = 4)
pmcmc_tuned_run <- mcstate::pmcmc(mcmc_pars, filter, control = control)
mcmc2 <- coda::as.mcmc(cbind(
pmcmc_tuned_run$probabilities, pmcmc_tuned_run$pars))
summary(mcmc2)
print("effective Sample Size")
coda::effectiveSize(mcmc2)
print("Rejection Rate")
1 - coda::rejectionRate(mcmc2)
plot(pmcmc_tuned_run$pars[,"beta"],pmcmc_tuned_run$pars[,"gamma"])
print(length(pmcmc_tuned_run$pars[,"beta"]))
plot_particle_filter(pmcmc_tuned_run$trajectories$state, true_history, df_infected$day)
pmcmc_tuned_run$trajectories$state
head(pmcmc_tuned_run$trajectories$state)
head(pmcmc_tuned_run$trajectories$state[1])
head(pmcmc_tuned_run$trajectories$state[2])
head(pmcmc_tuned_run$trajectories$state[3])
head(pmcmc_tuned_run$trajectories$state[4])
head(pmcmc_tuned_run$trajectories$state[5])
dim(pmcmc_tuned_run$trajectories$state)
pmcmc_tuned_run$trajectories$state[1,,]
pmcmc_tuned_run$trajectories$state[2,,]
pmcmc_tuned_run$trajectories$state[,1,]
plot_particle_filter(pmcmc_tuned_run$trajectories$state[,1,], true_history, df_infected$day)
pmcmc_tuned_run$trajectories$state[2,,-1]
pmcmc_tuned_run$trajectories$state[2,,-1]
pmcmc_tuned_run$trajectories$state[2,,1]
pmcmc_tuned_run$trajectories$state[2,,-1]
pmcmc_tuned_run$trajectories$state[2,,]
pmcmc_tuned_run$trajectories$state[2,1,-1]
matplot(times, t(history[2, 1, -1]))
matplot(df_infected$day, t(pmcmc_tuned_run$trajectories$state[2, 1, -1]))
dim(df_infected$day)
length(df_infected$day)
dim(matplot(times, t(history[2, 1, -1])))
dim(pmcmc_tuned_run$trajectories$state[2,1,-1])
length(pmcmc_tuned_run$trajectories$state[2,1,-1])
matplot(df_infected$day, (pmcmc_tuned_run$trajectories$state[2, 1, -1]))
mean(pmcmc_tuned_run$trajectories$state[2, 1:2000, -1]))
mean(pmcmc_tuned_run$trajectories$state[2, 1:2000, -1])
pmcmc_tuned_run$trajectories$state[2, 1:2000, -1])
pmcmc_tuned_run$trajectories$state[2, 1:2000, -1]
rowMeans(pmcmc_tuned_run$trajectories$state[2, 1:2000, -1])
matplot(df_infected$day, rowMeans(pmcmc_tuned_run$trajectories$state[2, 1:2000, -1]))
rowMeans(pmcmc_tuned_run$trajectories$state[2, , -1])
mean(pmcmc_tuned_run$trajectories$state[2, , -1])
mean(pmcmc_tuned_run$trajectories$state[2, , -1], dims=2)
mean(pmcmc_tuned_run$trajectories$state[2, , -1], dims=1)
mean(pmcmc_tuned_run$trajectories$state[2, , -1], dims=3)
mean(pmcmc_tuned_run$trajectories$state[2,1:2000 , -1], dims=3)
mean(pmcmc_tuned_run$trajectories$state[2,1:2000 , -1], dims=2)
mean(pmcmc_tuned_run$trajectories$state[2,1:2000 , -1], dims=1)
rowMeans(pmcmc_tuned_run$trajectories$state[2,1:2000 , -1], dims=1)
rowMeans(pmcmc_tuned_run$trajectories$state[2,1:2000 , -1], dims=2)
colMeans(pmcmc_tuned_run$trajectories$state[2,1:2000 , -1])
colMeans(pmcmc_tuned_run$trajectories$state[2, , -1])
matplot(df_infected$day, colMeans(pmcmc_tuned_run$trajectories$state[2, , -1]))
plot_particle_filter_avg <- function(history, true_history, times, obs_end = NULL) {
if (is.null(obs_end)) {
obs_end <- max(times)
}
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
#cols <- c(S = "#8c8cd9", I = "#cc0044", R = "#999966", TH = "#000000")
cols <- c(S = "#000000", I = "#E69F00", R = "#56B4E9", TH = "#009E73")
matplot(times, colMeans(history[2, , -1]), type = "l",
xlab = "Time", ylab = "Number of individuals",
col = cols[["S"]], lty = 1, ylim = range(history))
matlines(times, colMeans(history[3, , -1]), col = cols[["I"]], lty = 1)
matlines(times, colMeans(history[4, , -1]), col = cols[["R"]], lty = 1)
matpoints(times[1:obs_end], (true_history), pch = 20, col = cols[["TH"]])
legend("left", lwd = 1, col = cols, legend = c("S","I","R","Data"), bty = "n")
}
plot_particle_filter_avg(pmcmc_tuned_run$trajectories$state, true_history, df_infected$day)
plot_particle_filter_avg <- function(history, true_history, times, obs_end = NULL) {
if (is.null(obs_end)) {
obs_end <- max(times)
}
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
#cols <- c(S = "#8c8cd9", I = "#cc0044", R = "#999966", TH = "#000000")
cols <- c(S = "#000000", I = "#E69F00", R = "#56B4E9", TH = "#009E73")
matplot(times, colMeans(history[2, , -1]), type = "l", lwd = 5,
xlab = "Time", ylab = "Number of individuals",
col = cols[["S"]], lty = 1, ylim = range(history))
matlines(times, colMeans(history[3, , -1]), col = cols[["I"]], lty = 1)
matlines(times, colMeans(history[4, , -1]), col = cols[["R"]], lty = 1)
matpoints(times[1:obs_end], (true_history), pch = 20, col = cols[["TH"]])
legend("left", lwd = 1, col = cols, legend = c("S","I","R","Data"), bty = "n")
}
plot_particle_filter_avg(pmcmc_tuned_run$trajectories$state, true_history, df_infected$day)
plot_particle_filter_avg <- function(history, true_history, times, obs_end = NULL) {
if (is.null(obs_end)) {
obs_end <- max(times)
}
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
#cols <- c(S = "#8c8cd9", I = "#cc0044", R = "#999966", TH = "#000000")
cols <- c(S = "#000000", I = "#E69F00", R = "#56B4E9", TH = "#009E73")
matplot(times, colMeans(history[2, , -1]), type = "l", lwd = 5,
xlab = "Time", ylab = "Number of individuals",
col = cols[["S"]], lty = 1, ylim = range(history))
matlines(times, colMeans(history[3, , -1]), col = cols[["I"]], lty = 1,lwd = 5)
matlines(times, colMeans(history[4, , -1]), col = cols[["R"]], lty = 1,lwd = 5)
matpoints(times[1:obs_end], (true_history), pch = 20, col = cols[["TH"]])
legend("left", lwd = 1, col = cols, legend = c("S","I","R","Data"), bty = "n")
}
plot_particle_filter_avg(pmcmc_tuned_run$trajectories$state, true_history, df_infected$day)
plot(pmcmc_tuned_run$pars[,"beta"],pmcmc_tuned_run$pars[,"gamma"])
print(length(pmcmc_tuned_run$pars[,"beta"]))
processed_chains <- mcstate::pmcmc_thin(pmcmc_tuned_run, burnin = n_burnin, thin = 2)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
parameter_mean_hpd
apply(pmcmc_tuned_run$pars, 2, mean)
library(odin.dust)
LotVolCompN <- odin.dust::odin_dust("LotkaVolterraCompN.R")
#params <- list(dt = 1, species_no = 3, C_ini = c(200,200,200), r_C = c(0.2,0.2,0.1), K = c(200,200,200), alpha = matrix(data = c(1,0,.1,.5,1,-.2,.1,.4,1),nrow = 3, ncol = 3, byrow = TRUE))
params <- list(dt = 1, species_no = 4, C_ini = c(200,200,200,200), r_C = c(0.2,0.2,0.1,0.2), K = c(200,200,200,200), alpha = matrix(data = c(1,0,.1,.5, .2,1,.4,-.2, .1,.4,1,.3, .1,-.4,-.2,1),nrow = 4, ncol = 4, byrow = TRUE))
# Parameter values that lead to complex co-existence where two species (2 and 4) are present on a high level, and two (1 and 3) are present on a low level
params <- list(dt = 1, species_no = 4, C_ini = c(200,200,200,200), r_C = c(0.2,0.2,0.1,0.2), K = c(200,200,200,200), alpha = matrix(data = c(1,0.2,.1,.5, .2,1,.4,-.2, .1,.4,1,.3, .1,.1,-.2,1),nrow = 4, ncol = 4, byrow = TRUE))
#params <- list(dt = 1, species_no = 4, C_ini = c(200,200,200,200), r_C = c(0.1,0.25,0.1,0.17), K = c(200,200,200,200), alpha = matrix(data = c(1,0,.1,.5, .3,1,.4,.05, .1,.4,1,.3, .1,-.05,.2,1),nrow = 4, ncol = 4, byrow = TRUE))
#params <- list(dt = 1, species_no = 9, C_ini = rep(200,9), r_C = rep(.2,9), K = rep(200,9), alpha = diag(9)) #test with nine compartments
### parameter values that cause issues with version 1
#params <- list(dt = 1, species_no = 2, C_ini = c(50,200), r_C = c(.2,.2), K = c(200,200), alpha = matrix(data = c(1,-.2,.5,1),nrow = 2, ncol = 2, byrow = TRUE))
#### parameter values that cause issues with version 2
#params <- list(dt = 1, species_no = 2, C_ini = c(500,200), r_C = c(.2,.2), K = c(200,200), alpha = matrix(data = c(1,-.5,.2,1),nrow = 2, ncol = 2, byrow = TRUE))
LVC_modelN <- LotVolCompN$new(pars = params,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
LVC_modelN$state()
LVC_modelN$run(1)
LVC_modelN$run(2)
LVC_modelN$run(3)
dt <- 1
n_particles <- 10L
p_new <- params
LVC_modelN$update_state(pars = p_new, time = 0)
LVC_modelN$state()
n_times <- 500
#n_times <- 200
x <- array(NA, dim = c(LVC_modelN$info()$len, n_particles, n_times+1))
for (t in 0:n_times) {
x[ , , t+1] <- LVC_modelN$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
if (length(x[,1,1]) <= 8){
cols <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") #8 colorblind friendly colors
} else {
cols <- rainbow(length(x[,1,1]))
}
# probably should find a more dynamic way for models with >8 species?
matplot(time, (x[1,1 , ]), type = "l",
xlab = "Time", ylab = "Number of individuals",
col = cols[1], lty = 1, ylim = range(x))
for (species in 2:length(x[,1,1])) {
matlines(time, (x[species,1 , ]), col = cols[species:length(x[,1,1])], lty = 1)
}
legend("topright", lwd = 1, col = cols[1:length(x[,1,1])], legend = 1:length(x[,1,1]), bty = "n")
op <- par(mar = c(5,7,4,2) + 0.1,mgp=c(3,1,0))
matplot(time, (x[1,1 , ]), type = "l", lwd = 2,
xlab = "Time", ylab = "Number of individuals", cex.lab = 1.5, cex.axis = 1.5,
col = cols[1], lty = 1, ylim = c(0,350), axes = FALSE, ann = FALSE)
for (species in 2:length(x[,1,1])) {
matlines(time, (x[species,1 , ]), col = cols[species:length(x[,1,1])], lty = 1, lwd = 2)
}
axis(1,cex.axis = 1.5)
axis(2, cex.axis = 1.5)
title(xlab = "Time", cex.lab=1.5)
title(ylab = "Number of individuals", cex.lab = 1.5,
line = 4.5)
legend("topright", lwd = 2, col = cols[1:length(x[,1,1])], legend = 1:length(x[,1,1]), cex = 1.2, ncol = 2)
box()
par(op)
proposal_matrix
mcmc_pars$model(mcmc_pars$initial())
