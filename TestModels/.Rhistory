seir_model$run(10)
seir_model$run(20)
dt <- 0.25
n_particles <- 10L
p_new <- list(dt = dt, S_ini = 2000, E_ini = 5, I_ini = 10, beta = 0.3, delta = 0.2, gamma = 0.1)
seir_model$update_state(pars = p_new, time = 0)
seir_model$state()
n_times <- 1000
x <- array(NA, dim = c(seir_model$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- seir_model$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
cols <- c(S = "#8c8cd9", E = "#FFA500", I = "#cc0044", R = "#999966")
matplot(time, t(x[1, , ]), type = "l",
xlab = "Time", ylab = "Number of individuals",
col = cols[["S"]], lty = 1, ylim = range(x))
matlines(time, t(x[2, , ]), col = cols[["E"]], lty = 1)
matlines(time, t(x[3, , ]), col = cols[["I"]], lty = 1)
matlines(time, t(x[4, , ]), col = cols[["R"]], lty = 1)
legend("left", lwd = 1, col = cols, legend = names(cols), bty = "n")
# sanity check whether the total amount of individuals is constant
for (t in seq_len(n_times)) {
for(j in 1:10){
sum_groups <- 0
for (i in 1:4){
sum_groups <- sum_groups + x[ i,j,t]
}
if(sum_groups!=2015){
print("Population size not constant!")
}
}
}
# create a data frame based on the simulation 1 that I can use to fit the model to
df_infected <- data.frame(unlist(x[3,1,]))
#install.packages("drat") # -- if you don't have drat installed
drat:::add("ncov-ic")
install.packages("mcstate")
library(mcstate)
install.packages("mcstate")
#install.packages("drat") # -- if you don't have drat installed
drat:::add("ncov-ic")
#install.packages("mcstate")
library(mcstate)
dt <- 0.25
#dt <- 1
seir_data <- mcstate::particle_filter_data(data = df_infected,
time = "day",
rate = 1 / dt)
name(df_infected)
names(df_infected)
# create a data frame based on the simulation 1 that I can use to fit the model to
df_infected <- data.frame(unlist(x[3,1,]))
names(df_infected)[names(df_infected)=="unlist.x.3..1...."] <- "Infected"
#install.packages("drat") # -- if you don't have drat installed
drat:::add("ncov-ic")
#install.packages("mcstate")
library(mcstate)
dt <- 0.25
#dt <- 1
seir_data <- mcstate::particle_filter_data(data = df_infected,
time = "day",
rate = 1 / dt)
# create a data frame based on the simulation 1 that I can use to fit the model to
df_infected <- data.frame(unlist(x[3,1,]))
names(df_infected)[names(df_infected)=="unlist.x.3..1...."] <- "Infected"
df_infected$day <- c(1:1000)
#install.packages("drat") # -- if you don't have drat installed
drat:::add("ncov-ic")
#install.packages("mcstate")
library(mcstate)
#install.packages("drat") # -- if you don't have drat installed
drat:::add("ncov-ic")
#install.packages("mcstate")
library(mcstate)
dt <- 0.25
#dt <- 1
seir_data <- mcstate::particle_filter_data(data = df_infected,
time = "day",
rate = 1 / dt)
rmarkdown::paged_table(seir_data)
plot(df_infected$day, df_infected$Infected,
type = "l", xlab = "Day", ylab = "Total cases")
case_compare <- function(state, observed, pars = NULL) {
exp_noise <- 1e6
incidence_modelled <- state[5, , drop = TRUE]
incidence_observed <- observed$Infected
lambda <- incidence_modelled +
rexp(n = length(incidence_modelled), rate = exp_noise)
dpois(x = incidence_observed, lambda = lambda, log = TRUE)
}
gen_seir$new(pars = list(), time = 0, n_particles = 1L)$info()
incidence_compare <- function(state, prev_state, observed, pars = NULL) {
exp_noise <- 1e6
lambda <- state[4, , drop = TRUE] +
rexp(n = length(incidence_modelled), rate = exp_noise)
dpois(x = observed$Infected, lambda = lambda, log = TRUE)
}
n_particles <- 100
filter <- mcstate::particle_filter$new(data = seir_data,
model = gen_seir,
n_particles = n_particles,
compare = case_compare,
seed = 1L)
filter$run(save_history = TRUE, pars = list(dt = dt))
plot_particle_filter <- function(history, true_history, times, obs_end = NULL) {
if (is.null(obs_end)) {
obs_end <- max(times)
}
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
cols <- c(S = "#8c8cd9", I = "#cc0044", R = "#999966")
matplot(times, t(history[2, , -1]), type = "l",
xlab = "Time", ylab = "Number of individuals",
col = cols[["S"]], lty = 1, ylim = range(history))
matlines(times, t(history[4, , -1]), col = cols[["I"]], lty = 1)
matlines(times, t(history[5, , -1]), col = cols[["R"]], lty = 1)
#matpoints(times[1:obs_end], t(true_history), pch = 19, col = cols)
legend("left", lwd = 1, col = cols, legend = names(cols), bty = "n")
}
#true_history <- readRDS("seir_true_history.rds")
true_history <- df_infected$Infected
plot_particle_filter(filter$history(), true_history, df_infected$day)
plot_particle_filter <- function(history, true_history, times, obs_end = NULL) {
if (is.null(obs_end)) {
obs_end <- max(times)
}
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
cols <- c(S = "#8c8cd9", E = "#FFA500", I = "#cc0044", R = "#999966")
matplot(times, t(history[2, , -1]), type = "l",
xlab = "Time", ylab = "Number of individuals",
col = cols[["S"]], lty = 1, ylim = range(history))
matlines(times, t(history[3, , -1]), col = cols[["E"]], lty = 1)
matlines(times, t(history[4, , -1]), col = cols[["I"]], lty = 1)
matlines(times, t(history[5, , -1]), col = cols[["R"]], lty = 1)
#matpoints(times[1:obs_end], t(true_history), pch = 19, col = cols)
legend("left", lwd = 1, col = cols, legend = names(cols), bty = "n")
}
#true_history <- readRDS("seir_true_history.rds")
true_history <- df_infected$Infected
plot_particle_filter(filter$history(), true_history, df_infected$day)
t(history[5, , -1])
t(filter$history[5, , -1])
t(filter$history()[5, , -1])
n_particles <- 100
filter <- mcstate::particle_filter$new(data = seir_data,
model = gen_seir,
n_particles = n_particles,
compare = case_compare)
#seed = 1L)
filter$run(save_history = TRUE, pars = list(dt = dt))
plot_particle_filter <- function(history, true_history, times, obs_end = NULL) {
if (is.null(obs_end)) {
obs_end <- max(times)
}
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
cols <- c(S = "#8c8cd9", E = "#FFA500", I = "#cc0044", R = "#999966")
matplot(times, t(history[2, , -1]), type = "l",
xlab = "Time", ylab = "Number of individuals",
col = cols[["S"]], lty = 1, ylim = range(history))
matlines(times, t(history[3, , -1]), col = cols[["E"]], lty = 1)
matlines(times, t(history[4, , -1]), col = cols[["I"]], lty = 1)
matlines(times, t(history[5, , -1]), col = cols[["R"]], lty = 1)
#matpoints(times[1:obs_end], t(true_history), pch = 19, col = cols)
legend("left", lwd = 1, col = cols, legend = names(cols), bty = "n")
}
#true_history <- readRDS("seir_true_history.rds")
true_history <- df_infected$Infected
plot_particle_filter(filter$history(), true_history, df_infected$day)
n_particles <- 100
filter <- mcstate::particle_filter$new(data = seir_data,
model = gen_seir,
n_particles = n_particles,
compare = case_compare,
seed = 1L)
filter$run(save_history = TRUE, pars = list(dt = dt))
plot_particle_filter <- function(history, true_history, times, obs_end = NULL) {
if (is.null(obs_end)) {
obs_end <- max(times)
}
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
cols <- c(S = "#8c8cd9", E = "#FFA500", I = "#cc0044", R = "#999966")
matplot(times, t(history[2, , -1]), type = "l",
xlab = "Time", ylab = "Number of individuals",
col = cols[["S"]], lty = 1, ylim = range(history))
matlines(times, t(history[3, , -1]), col = cols[["E"]], lty = 1)
matlines(times, t(history[4, , -1]), col = cols[["I"]], lty = 1)
matlines(times, t(history[5, , -1]), col = cols[["R"]], lty = 1)
#matpoints(times[1:obs_end], t(true_history), pch = 19, col = cols)
legend("left", lwd = 1, col = cols, legend = names(cols), bty = "n")
}
#true_history <- readRDS("seir_true_history.rds")
true_history <- df_infected$Infected
plot_particle_filter(filter$history(), true_history, df_infected$day)
t(true_history)
t(filter$history()[4,,-1])
tail(t(filter$history()[4,,-1]))
true_history
plot_particle_filter <- function(history, true_history, times, obs_end = NULL) {
if (is.null(obs_end)) {
obs_end <- max(times)
}
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
cols <- c(S = "#8c8cd9", E = "#FFA500", I = "#cc0044", R = "#999966")
matplot(times, t(history[2, , -1]), type = "l",
xlab = "Time", ylab = "Number of individuals",
col = cols[["S"]], lty = 1, ylim = range(history))
matlines(times, t(history[3, , -1]), col = cols[["E"]], lty = 1)
matlines(times, t(history[4, , -1]), col = cols[["I"]], lty = 1)
matlines(times, t(history[5, , -1]), col = cols[["R"]], lty = 1)
matpoints(times[1:obs_end], (true_history), pch = 19, col = cols)
legend("left", lwd = 1, col = cols, legend = names(cols), bty = "n")
}
#true_history <- readRDS("seir_true_history.rds")
true_history <- df_infected$Infected
plot_particle_filter(filter$history(), true_history, df_infected$day)
plot_particle_filter <- function(history, true_history, times, obs_end = NULL) {
if (is.null(obs_end)) {
obs_end <- max(times)
}
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
cols <- c(S = "#8c8cd9", E = "#FFA500", I = "#cc0044", R = "#999966", TH = "#000000")
matplot(times, t(history[2, , -1]), type = "l",
xlab = "Time", ylab = "Number of individuals",
col = cols[["S"]], lty = 1, ylim = range(history))
matlines(times, t(history[3, , -1]), col = cols[["E"]], lty = 1)
matlines(times, t(history[4, , -1]), col = cols[["I"]], lty = 1)
matlines(times, t(history[5, , -1]), col = cols[["R"]], lty = 1)
matpoints(times[1:obs_end], (true_history), pch = 19, col = TH)
legend("left", lwd = 1, col = cols, legend = names(cols), bty = "n")
}
#true_history <- readRDS("seir_true_history.rds")
true_history <- df_infected$Infected
plot_particle_filter(filter$history(), true_history, df_infected$day)
plot_particle_filter <- function(history, true_history, times, obs_end = NULL) {
if (is.null(obs_end)) {
obs_end <- max(times)
}
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
cols <- c(S = "#8c8cd9", E = "#FFA500", I = "#cc0044", R = "#999966", TH = "#000000")
matplot(times, t(history[2, , -1]), type = "l",
xlab = "Time", ylab = "Number of individuals",
col = cols[["S"]], lty = 1, ylim = range(history))
matlines(times, t(history[3, , -1]), col = cols[["E"]], lty = 1)
matlines(times, t(history[4, , -1]), col = cols[["I"]], lty = 1)
matlines(times, t(history[5, , -1]), col = cols[["R"]], lty = 1)
matpoints(times[1:obs_end], (true_history), pch = 19, col = cols[["TH"]])
legend("left", lwd = 1, col = cols, legend = names(cols), bty = "n")
}
#true_history <- readRDS("seir_true_history.rds")
true_history <- df_infected$Infected
plot_particle_filter(filter$history(), true_history, df_infected$day)
seed = 1L
n_times <- 1000
x <- array(NA, dim = c(seir_model$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- seir_model$run(t)
}
seir_model <- gen_seir$new(pars = list(dt = 1,
S_ini = 2000,
E_ini = 5,
I_ini = 10,
beta = 0.2,
delta = 0.3,
gamma = 0.1),
time = 1,
n_particles = 10L,
n_threads = 5L,
seed = 1L)
seir_model$state()
seir_model$run(10)
seir_model$run(20)
seir_model$run(10)
seir_model$run(10)
seir_model$run(10)
library(odin.dust)
gen_seir <- odin.dust::odin_dust("seir.R")
seir_model <- gen_seir$new(pars = list(dt = 1,
S_ini = 2000,
E_ini = 5,
I_ini = 10,
beta = 0.2,
delta = 0.3,
gamma = 0.1),
time = 1,
n_particles = 10L,
n_threads = 5L,
seed = 1L)
seir_model$state()
seir_model$run(10)
seir_model$run(20)
dt <- 0.25
n_particles <- 10L
p_new <- list(dt = dt, S_ini = 2000, E_ini = 5, I_ini = 10, beta = 0.3, delta = 0.2, gamma = 0.1)
seir_model$update_state(pars = p_new, time = 0)
seir_model$state()
seed = 1L
n_times <- 1000
x <- array(NA, dim = c(seir_model$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- seir_model$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
cols <- c(S = "#8c8cd9", E = "#FFA500", I = "#cc0044", R = "#999966")
matplot(time, t(x[1, , ]), type = "l",
xlab = "Time", ylab = "Number of individuals",
col = cols[["S"]], lty = 1, ylim = range(x))
matlines(time, t(x[2, , ]), col = cols[["E"]], lty = 1)
matlines(time, t(x[3, , ]), col = cols[["I"]], lty = 1)
matlines(time, t(x[4, , ]), col = cols[["R"]], lty = 1)
legend("left", lwd = 1, col = cols, legend = names(cols), bty = "n")
# sanity check whether the total amount of individuals is constant
for (t in seq_len(n_times)) {
for(j in 1:10){
sum_groups <- 0
for (i in 1:4){
sum_groups <- sum_groups + x[ i,j,t]
}
if(sum_groups!=2015){
print("Population size not constant!")
}
}
}
# create a data frame based on the simulation 1 that I can use to fit the model to
df_infected <- data.frame(unlist(x[3,1,]))
names(df_infected)[names(df_infected)=="unlist.x.3..1...."] <- "Infected"
df_infected$day <- c(1:1000)
#install.packages("drat") # -- if you don't have drat installed
drat:::add("ncov-ic")
#install.packages("mcstate")
library(mcstate)
dt <- 0.25
#dt <- 1
seir_data <- mcstate::particle_filter_data(data = df_infected,
time = "day",
rate = 1 / dt)
rmarkdown::paged_table(seir_data)
plot(df_infected$day, df_infected$Infected,
type = "l", xlab = "Day", ylab = "Total cases")
case_compare <- function(state, observed, pars = NULL) {
exp_noise <- 1e6
incidence_modelled <- state[5, , drop = TRUE]
incidence_observed <- observed$Infected
lambda <- incidence_modelled +
rexp(n = length(incidence_modelled), rate = exp_noise)
dpois(x = incidence_observed, lambda = lambda, log = TRUE)
}
gen_seir$new(pars = list(), time = 0, n_particles = 1L)$info()
incidence_compare <- function(state, prev_state, observed, pars = NULL) {
exp_noise <- 1e6
lambda <- state[4, , drop = TRUE] +
rexp(n = length(incidence_modelled), rate = exp_noise)
dpois(x = observed$Infected, lambda = lambda, log = TRUE)
}
n_particles <- 100
filter <- mcstate::particle_filter$new(data = seir_data,
model = gen_seir,
n_particles = n_particles,
compare = case_compare,
seed = 1L)
filter$run(save_history = TRUE, pars = list(dt = dt))
plot_particle_filter <- function(history, true_history, times, obs_end = NULL) {
if (is.null(obs_end)) {
obs_end <- max(times)
}
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
cols <- c(S = "#8c8cd9", E = "#FFA500", I = "#cc0044", R = "#999966", TH = "#000000")
matplot(times, t(history[2, , -1]), type = "l",
xlab = "Time", ylab = "Number of individuals",
col = cols[["S"]], lty = 1, ylim = range(history))
matlines(times, t(history[3, , -1]), col = cols[["E"]], lty = 1)
matlines(times, t(history[4, , -1]), col = cols[["I"]], lty = 1)
matlines(times, t(history[5, , -1]), col = cols[["R"]], lty = 1)
matpoints(times[1:obs_end], (true_history), pch = 19, col = cols[["TH"]])
legend("left", lwd = 1, col = cols, legend = names(cols), bty = "n")
}
#true_history <- readRDS("seir_true_history.rds")
true_history <- df_infected$Infected
plot_particle_filter(filter$history(), true_history, df_infected$day)
incidence_compare <- function(state, prev_state, observed, pars = NULL) {
exp_noise <- 1e13
lambda <- state[4, , drop = TRUE] +
rexp(n = length(incidence_modelled), rate = exp_noise)
dpois(x = observed$Infected, lambda = lambda, log = TRUE)
}
n_particles <- 100
filter <- mcstate::particle_filter$new(data = seir_data,
model = gen_seir,
n_particles = n_particles,
compare = case_compare,
seed = 1L)
filter$run(save_history = TRUE, pars = list(dt = dt))
plot_particle_filter <- function(history, true_history, times, obs_end = NULL) {
if (is.null(obs_end)) {
obs_end <- max(times)
}
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
cols <- c(S = "#8c8cd9", E = "#FFA500", I = "#cc0044", R = "#999966", TH = "#000000")
matplot(times, t(history[2, , -1]), type = "l",
xlab = "Time", ylab = "Number of individuals",
col = cols[["S"]], lty = 1, ylim = range(history))
matlines(times, t(history[3, , -1]), col = cols[["E"]], lty = 1)
matlines(times, t(history[4, , -1]), col = cols[["I"]], lty = 1)
matlines(times, t(history[5, , -1]), col = cols[["R"]], lty = 1)
matpoints(times[1:obs_end], (true_history), pch = 19, col = cols[["TH"]])
legend("left", lwd = 1, col = cols, legend = names(cols), bty = "n")
}
#true_history <- readRDS("seir_true_history.rds")
true_history <- df_infected$Infected
plot_particle_filter(filter$history(), true_history, df_infected$day)
incidence_compare <- function(state, prev_state, observed, pars = NULL) {
exp_noise <- 1e1
lambda <- state[4, , drop = TRUE] +
rexp(n = length(incidence_modelled), rate = exp_noise)
dpois(x = observed$Infected, lambda = lambda, log = TRUE)
}
n_particles <- 100
filter <- mcstate::particle_filter$new(data = seir_data,
model = gen_seir,
n_particles = n_particles,
compare = case_compare,
seed = 1L)
filter$run(save_history = TRUE, pars = list(dt = dt))
plot_particle_filter <- function(history, true_history, times, obs_end = NULL) {
if (is.null(obs_end)) {
obs_end <- max(times)
}
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
cols <- c(S = "#8c8cd9", E = "#FFA500", I = "#cc0044", R = "#999966", TH = "#000000")
matplot(times, t(history[2, , -1]), type = "l",
xlab = "Time", ylab = "Number of individuals",
col = cols[["S"]], lty = 1, ylim = range(history))
matlines(times, t(history[3, , -1]), col = cols[["E"]], lty = 1)
matlines(times, t(history[4, , -1]), col = cols[["I"]], lty = 1)
matlines(times, t(history[5, , -1]), col = cols[["R"]], lty = 1)
matpoints(times[1:obs_end], (true_history), pch = 19, col = cols[["TH"]])
legend("left", lwd = 1, col = cols, legend = names(cols), bty = "n")
}
#true_history <- readRDS("seir_true_history.rds")
true_history <- df_infected$Infected
plot_particle_filter(filter$history(), true_history, df_infected$day)
incidence_compare <- function(state, prev_state, observed, pars = NULL) {
exp_noise <- 1e10
lambda <- state[4, , drop = TRUE] +
rexp(n = length(incidence_modelled), rate = exp_noise)
dpois(x = observed$Infected, lambda = lambda, log = TRUE)
}
n_particles <- 100
filter <- mcstate::particle_filter$new(data = seir_data,
model = gen_seir,
n_particles = n_particles,
compare = case_compare,
seed = 1L)
filter$run(save_history = TRUE, pars = list(dt = dt))
plot_particle_filter <- function(history, true_history, times, obs_end = NULL) {
if (is.null(obs_end)) {
obs_end <- max(times)
}
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
cols <- c(S = "#8c8cd9", E = "#FFA500", I = "#cc0044", R = "#999966", TH = "#000000")
matplot(times, t(history[2, , -1]), type = "l",
xlab = "Time", ylab = "Number of individuals",
col = cols[["S"]], lty = 1, ylim = range(history))
matlines(times, t(history[3, , -1]), col = cols[["E"]], lty = 1)
matlines(times, t(history[4, , -1]), col = cols[["I"]], lty = 1)
matlines(times, t(history[5, , -1]), col = cols[["R"]], lty = 1)
matpoints(times[1:obs_end], (true_history), pch = 19, col = cols[["TH"]])
legend("left", lwd = 1, col = cols, legend = names(cols), bty = "n")
}
#true_history <- readRDS("seir_true_history.rds")
true_history <- df_infected$Infected
plot_particle_filter(filter$history(), true_history, df_infected$day)
incidence_compare <- function(state, prev_state, observed, pars = NULL) {
exp_noise <- 1e6
lambda <- state[4, , drop = TRUE] +
rexp(n = length(incidence_modelled), rate = exp_noise)
dpois(x = observed$Infected, lambda = lambda, log = TRUE)
}
incidence_compare <- function(state, prev_state, observed, pars = NULL) {
exp_noise <- 1e6
lambda <- state[4, , drop = TRUE] +
rexp(n = length(incidence_modelled), rate = exp_noise)
dpois(x = observed$Infected, lambda = lambda, log = TRUE)
}
n_particles <- 100
filter <- mcstate::particle_filter$new(data = seir_data,
model = gen_seir,
n_particles = n_particles,
compare = case_compare,
seed = 1L)
filter$run(save_history = TRUE, pars = list(dt = dt))
plot_particle_filter <- function(history, true_history, times, obs_end = NULL) {
if (is.null(obs_end)) {
obs_end <- max(times)
}
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
cols <- c(S = "#8c8cd9", E = "#FFA500", I = "#cc0044", R = "#999966", TH = "#000000")
matplot(times, t(history[2, , -1]), type = "l",
xlab = "Time", ylab = "Number of individuals",
col = cols[["S"]], lty = 1, ylim = range(history))
matlines(times, t(history[3, , -1]), col = cols[["E"]], lty = 1)
matlines(times, t(history[4, , -1]), col = cols[["I"]], lty = 1)
matlines(times, t(history[5, , -1]), col = cols[["R"]], lty = 1)
matpoints(times[1:obs_end], (true_history), pch = 19, col = cols[["TH"]])
legend("left", lwd = 1, col = cols, legend = names(cols), bty = "n")
}
#true_history <- readRDS("seir_true_history.rds")
true_history <- df_infected$Infected
plot_particle_filter(filter$history(), true_history, df_infected$day)
