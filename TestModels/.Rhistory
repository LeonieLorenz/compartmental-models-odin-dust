state_x[ , , t] <- state
}
state_x <- state_x[-1, , ]
clusters_modelled <- state_x[,1,]
clusters_observed <- observed$cluster_frequency
lambda <- clusters_modelled +
rexp(n = length(clusters_modelled), rate = exp_noise)
dpois(x = clusters_observed, lambda = lambda, log = TRUE)
}
### Inferring parameters
n_particles <- 100
filter <- mcstate::particle_filter$new(data = mass_data,
model = WF_nG_h_vP,
n_particles = n_particles,
compare = cluster_compare,
seed = 1L)
filter$run(save_history = TRUE, pars = params_n_vP)
cluster_compare(WFmodel_nG_h_vP$run(t), mass_data)
# Defining the comparison function
# state is the model state at some point in time
# observed is the real data
cluster_compare <- function(state, observed, pars = NULL) {
exp_noise <- 1e6
state_x[ , ] <- state
state_x <- state_x[-1, ]
clusters_modelled <- state_x[,1,]
clusters_observed <- observed$cluster_frequency
lambda <- clusters_modelled +
rexp(n = length(clusters_modelled), rate = exp_noise)
dpois(x = clusters_observed, lambda = lambda, log = TRUE)
}
cluster_compare(WFmodel_nG_h_vP$run(t), mass_data)
# Defining the comparison function
# state is the model state at some point in time
# observed is the real data
cluster_compare <- function(state, observed, pars = NULL) {
exp_noise <- 1e6
#state_x[ , ] <- state
state <- state[-1, ]
clusters_modelled <- state[,1,]
clusters_observed <- observed$cluster_frequency
lambda <- clusters_modelled +
rexp(n = length(clusters_modelled), rate = exp_noise)
dpois(x = clusters_observed, lambda = lambda, log = TRUE)
}
cluster_compare(WFmodel_nG_h_vP$run(t), mass_data)
# Defining the comparison function
# state is the model state at some point in time
# observed is the real data
cluster_compare <- function(state, observed, pars = NULL) {
exp_noise <- 1e6
print(dim(state))
#state_x[ , ] <- state
state <- state[-1, ]
clusters_modelled <- state[,1,]
clusters_observed <- observed$cluster_frequency
lambda <- clusters_modelled +
rexp(n = length(clusters_modelled), rate = exp_noise)
dpois(x = clusters_observed, lambda = lambda, log = TRUE)
}
cluster_compare(WFmodel_nG_h_vP$run(t), mass_data)
# Defining the comparison function
# state is the model state at some point in time
# observed is the real data
cluster_compare <- function(state, observed, pars = NULL) {
exp_noise <- 1e6
print(dim(state))
#state_x[ , ] <- state
state <- state[-1, ]
clusters_modelled <- state[,1]
clusters_observed <- observed$cluster_frequency
lambda <- clusters_modelled +
rexp(n = length(clusters_modelled), rate = exp_noise)
dpois(x = clusters_observed, lambda = lambda, log = TRUE)
}
cluster_compare(WFmodel_nG_h_vP$run(t), mass_data)
### Inferring parameters
n_particles <- 100
filter <- mcstate::particle_filter$new(data = mass_data,
model = WF_nG_h_vP,
n_particles = n_particles,
compare = cluster_compare,
seed = 1L)
filter$run(save_history = TRUE, pars = params_n_vP)
### Inferring parameters
n_particles <- 10
filter <- mcstate::particle_filter$new(data = mass_data,
model = WF_nG_h_vP,
n_particles = n_particles,
compare = cluster_compare,
seed = 1L)
filter$run(save_history = TRUE, pars = params_n_vP)
model$reorder(kappa)
WFmodel_nG_h_vP$run(t)
### Inferring parameters
n_particles <- 62
filter <- mcstate::particle_filter$new(data = mass_data,
model = WF_nG_h_vP,
n_particles = n_particles,
compare = cluster_compare,
seed = 1L)
filter$run(save_history = TRUE, pars = params_n_vP)
# Defining the comparison function
# state is the model state at some point in time
# observed is the real data
cluster_compare <- function(state, observed, pars = NULL) {
exp_noise <- 1e6
#print(dim(state))
#state_x[ , ] <- state
state <- state[-1, ]
clusters_modelled <- state[,1]
clusters_observed <- observed$cluster_frequency
lambda <- clusters_modelled +
rexp(n = length(clusters_modelled), rate = exp_noise)
dpois(x = clusters_observed, lambda = lambda, log = TRUE)
}
### Inferring parameters
n_particles <- 62
filter <- mcstate::particle_filter$new(data = mass_data,
model = WF_nG_h_vP,
n_particles = n_particles,
compare = cluster_compare,
seed = 1L)
filter$run(save_history = TRUE, pars = params_n_vP)
View(cluster_freq_df)
# plot particle filter
plot_particle_filter <- function(history, true_history, times, obs_end = NULL) {
if (is.null(obs_end)) {
obs_end <- max(times)
}
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
cols <- c(S = "#8c8cd9", I = "#cc0044", R = "#999966")
matplot(times, t(history[1, , -1]), type = "l",
xlab = "Time", ylab = "Number of individuals",
col = cols[["S"]], lty = 1, ylim = range(history))
matlines(times, t(history[2, , -1]), col = cols[["I"]], lty = 1)
matlines(times, t(history[3, , -1]), col = cols[["R"]], lty = 1)
matpoints(times[1:obs_end], t(true_history[1:3, , -1]), pch = 19,
col = cols)
legend("left", lwd = 1, col = cols, legend = names(cols), bty = "n")
}
true_history <- cluster_freq_df$cluster_freq_all_times
plot_particle_filter(filter$history(), true_history, 1:180)
nrow(filter$history())
nrow(true_history
)
nrow(true_history)
nrow(cluster_freq_df)
186/3
head(filter$history())
fitting_cluster_freq_df <- data_frame(rbind(cluster_freq_1, cluster_freq_2, cluster_freq_3))
View(fitting_cluster_freq_df)
row.names(fitting_cluster_freq_df) <- as.character(1:62)
col.names(fitting_cluster_freq_df) <- as.character(1:62)
column.names(fitting_cluster_freq_df) <- as.character(1:62)
fitting_cluster_freq_df <- data_frame(as.character(1:62) = rbind(cluster_freq_1, cluster_freq_2, cluster_freq_3))
fitting_cluster_freq_df <- data_frame(rbind(cluster_freq_1, cluster_freq_2, cluster_freq_3))
names(fitting_cluster_freq_df) <- as.character(1:62)
names(fitting_cluster_freq_df) <- (1:62)
1:62
as.character(1:62)
ncol(fitting_cluster_freq_df)
fitting_cluster_freq_df <- data_frame(rbind(cluster_freq_1, cluster_freq_2, cluster_freq_3))
names(fitting_cluster_freq_df) <- as.character(1:62)
ncol(fitting_cluster_freq_df)
nrow(fitting_cluster_freq_df)
as.character(1:62)
names(fitting_cluster_freq_df)
names(cluster_freq_df)
names(fitting_cluster_freq_df) <- c(as.character(1:62))
c(as.character(1:62))
names(fitting_cluster_freq_df)[1] <- "1"
cluster_freqs <- rbind(cluster_freq_1, cluster_freq_2, cluster_freq_3)
fitting_cluster_freq_df <- data_frame(rbind(cluster_freq_1, cluster_freq_2, cluster_freq_3))
fitting_cluster_freq_df <- data_frame(as.character(1:62) = rbind(cluster_freq_1, cluster_freq_2, cluster_freq_3))
fitting_cluster_freq_df <- data_frame("1" = rbind(cluster_freq_1, cluster_freq_2, cluster_freq_3)[,1])
fitting_cluster_freq_df <- data_frame(as.character(1:62) = rbind(cluster_freq_1, cluster_freq_2, cluster_freq_3)[,1:62])
fitting_cluster_freq_df <- data_frame(rbind(cluster_freq_1, cluster_freq_2, cluster_freq_3))
names(fitting_cluster_freq_df)
fitting_cluster_freq_df <- data_frame()
names(fitting_cluster_freq_df) <- c(as.character(1:62))
cluster_freqs <- rbind(cluster_freq_1, cluster_freq_2, cluster_freq_3)
for (i in 1:62){
fitting_cluster_freq_df[,i] <- cluster_freqs[,i]
}
for (i in 1:62){
fitting_cluster_freq_df$as.character(i) <- cluster_freqs[,i]
}
for (i in 1:62){
a <- as.character(i)
fitting_cluster_freq_df$a <- cluster_freqs[,i]
}
fitting_cluster_freq_df <- data_frame()
for (i in 1:62){
a <- as.character(i)
fitting_cluster_freq_df$a <- cluster_freqs[,i]
}
cluster_freqs[,i]
fitting_cluster_freq_df <- data_frame("year" = c(2001, 2004, 2007))
fitting_cluster_freq_df <- data.frame("year" = c(2001, 2004, 2007))
fitting_cluster_freq_df <- data.frame("year" = c(2001, 2004, 2007))
fitting_cluster_freq_df <- data.frame(c(2001, 2004, 2007))
fitting_cluster_freq_df <- data.frame("year" = c(2001, 2004, 2007), "1" = c(cluster_freq_1[1], cluster_freq_2[1], cluster_freq_3[1]))
View(fitting_cluster_freq_df)
fitting_cluster_freq_df <- data.frame("year" = c(2001, 2004, 2007))
fitting_cluster_freq_df <- data.frame("year" = c(2001, 2004, 2007), as.character(1:62) = rbind(cluster_freq_1, cluster_freq_2, cluster_freq_3))
fitting_cluster_freq_df <- data.frame("year" = c(2001, 2004, 2007), rbind(cluster_freq_1, cluster_freq_2, cluster_freq_3))
names(fitting_cluster_freq_df) <- c("year", as.character(1:62))
length(cluster_freq_1)
fitting_cluster_freq_df <- data.frame("year" = c(2001, 2004, 2007), rbind(cluster_freq_1, cluster_freq_2, cluster_freq_3))
names(fitting_cluster_freq_df) <- c("year", as.character(1:62))
# process data with particle filter:
dt <- 1/36 # we assume that the generation time of Strep. pneumo is 1 month
# we have data from 2001, 2004, 2007, so we want 3 (years) * 12 (months) = 36 updates in-between
mass_data <- mcstate::particle_filter_data(data = cluster_freq_df,
time = "year",
rate = 1 / dt,
initial_time = 2001)
# process data with particle filter:
dt <- 1/36 # we assume that the generation time of Strep. pneumo is 1 month
# we have data from 2001, 2004, 2007, so we want 3 (years) * 12 (months) = 36 updates in-between
mass_data <- mcstate::particle_filter_data(data = fitting_cluster_freq_df,
time = "year",
rate = 1 / dt,
initial_time = 2001)
# Defining the comparison function
# state is the model state at some point in time
# observed is the real data
cluster_compare <- function(state, observed, pars = NULL) {
exp_noise <- 1e6
#print(dim(state))
#state_x[ , ] <- state
state <- state[-1, ]
clusters_modelled <- state[,1]
clusters_observed <- observed$cluster_frequency
lambda <- clusters_modelled +
rexp(n = length(clusters_modelled), rate = exp_noise)
dpois(x = clusters_observed, lambda = lambda, log = TRUE)
}
### Inferring parameters
n_particles <- 10
### I have an issue with the dimensions!
# these three blocks of code only run if n_particles = 62.
# so probably it confuses the number of strains and the number of particles.
# that is a bit weird, I think.
# maybe in my data, it think that the three times points are the three compartments?
# but that does not really make sense - it recognizes 2001, 2004 and 2007 as times.
# BUT the info about the different strains got lost - it is not in the dataset.
# SO that is because for the SIR they only had the data for one compartment, the I, here I have infos about all compartments.
filter <- mcstate::particle_filter$new(data = mass_data,
model = WF_nG_h_vP,
n_particles = n_particles,
compare = cluster_compare,
seed = 1L)
filter$run(save_history = TRUE, pars = params_n_vP)
# Defining the comparison function
# state is the model state at some point in time
# observed is the real data
cluster_compare <- function(state, observed, pars = NULL) {
exp_noise <- 1e6
#print(dim(state))
#state_x[ , ] <- state
state <- state[-1, ]
clusters_modelled <- state[,1]
clusters_observed <- observed[, 2:ncol(observed)]
lambda <- clusters_modelled +
rexp(n = length(clusters_modelled), rate = exp_noise)
dpois(x = clusters_observed, lambda = lambda, log = TRUE)
}
### Inferring parameters
n_particles <- 10
### I have an issue with the dimensions!
# these three blocks of code only run if n_particles = 62.
# so probably it confuses the number of strains and the number of particles.
# that is a bit weird, I think.
# maybe in my data, it think that the three times points are the three compartments?
# but that does not really make sense - it recognizes 2001, 2004 and 2007 as times.
# BUT the info about the different strains got lost - it is not in the dataset.
# SO that is because for the SIR they only had the data for one compartment, the I, here I have infos about all compartments.
filter <- mcstate::particle_filter$new(data = mass_data,
model = WF_nG_h_vP,
n_particles = n_particles,
compare = cluster_compare,
seed = 1L)
filter$run(save_history = TRUE, pars = params_n_vP)
# Defining the comparison function
# state is the model state at some point in time
# observed is the real data
cluster_compare <- function(state, observed, pars = NULL) {
exp_noise <- 1e6
#print(dim(state))
#state_x[ , ] <- state
state <- state[-1, ]
clusters_modelled <- state[,1]
clusters_observed <- observed[, 2:63]
lambda <- clusters_modelled +
rexp(n = length(clusters_modelled), rate = exp_noise)
dpois(x = clusters_observed, lambda = lambda, log = TRUE)
}
### Inferring parameters
n_particles <- 10
### I have an issue with the dimensions!
# these three blocks of code only run if n_particles = 62.
# so probably it confuses the number of strains and the number of particles.
# that is a bit weird, I think.
# maybe in my data, it think that the three times points are the three compartments?
# but that does not really make sense - it recognizes 2001, 2004 and 2007 as times.
# BUT the info about the different strains got lost - it is not in the dataset.
# SO that is because for the SIR they only had the data for one compartment, the I, here I have infos about all compartments.
filter <- mcstate::particle_filter$new(data = mass_data,
model = WF_nG_h_vP,
n_particles = n_particles,
compare = cluster_compare,
seed = 1L)
filter$run(save_history = TRUE, pars = params_n_vP)
# Defining the comparison function
# state is the model state at some point in time
# observed is the real data
cluster_compare <- function(state, observed, pars = NULL) {
exp_noise <- 1e6
#print(dim(state))
#state_x[ , ] <- state
state <- state[-1, ]
clusters_modelled <- state[,1]
clusters_observed <- observed[, 5:66]
lambda <- clusters_modelled +
rexp(n = length(clusters_modelled), rate = exp_noise)
dpois(x = clusters_observed, lambda = lambda, log = TRUE)
}
### Inferring parameters
n_particles <- 10
### I have an issue with the dimensions!
# these three blocks of code only run if n_particles = 62.
# so probably it confuses the number of strains and the number of particles.
# that is a bit weird, I think.
# maybe in my data, it think that the three times points are the three compartments?
# but that does not really make sense - it recognizes 2001, 2004 and 2007 as times.
# BUT the info about the different strains got lost - it is not in the dataset.
# SO that is because for the SIR they only had the data for one compartment, the I, here I have infos about all compartments.
filter <- mcstate::particle_filter$new(data = mass_data,
model = WF_nG_h_vP,
n_particles = n_particles,
compare = cluster_compare,
seed = 1L)
filter$run(save_history = TRUE, pars = params_n_vP)
# Defining the comparison function
# state is the model state at some point in time
# observed is the real data
cluster_compare <- function(state, observed, pars = NULL) {
exp_noise <- 1e6
#print(dim(state))
#state_x[ , ] <- state
state <- state[-1, ]
clusters_modelled <- state[,1]
clusters_observed <- observed[, 5]
lambda <- clusters_modelled +
rexp(n = length(clusters_modelled), rate = exp_noise)
dpois(x = clusters_observed, lambda = lambda, log = TRUE)
}
### Inferring parameters
n_particles <- 10
### I have an issue with the dimensions!
# these three blocks of code only run if n_particles = 62.
# so probably it confuses the number of strains and the number of particles.
# that is a bit weird, I think.
# maybe in my data, it think that the three times points are the three compartments?
# but that does not really make sense - it recognizes 2001, 2004 and 2007 as times.
# BUT the info about the different strains got lost - it is not in the dataset.
# SO that is because for the SIR they only had the data for one compartment, the I, here I have infos about all compartments.
filter <- mcstate::particle_filter$new(data = mass_data,
model = WF_nG_h_vP,
n_particles = n_particles,
compare = cluster_compare,
seed = 1L)
filter$run(save_history = TRUE, pars = params_n_vP)
# Defining the comparison function
# state is the model state at some point in time
# observed is the real data
cluster_compare <- function(state, observed, pars = NULL) {
exp_noise <- 1e6
#print(dim(state))
#state_x[ , ] <- state
state <- state[-1, ]
clusters_modelled <- state[,1]
print(dim(observed))
clusters_observed <- observed[, 5]
lambda <- clusters_modelled +
rexp(n = length(clusters_modelled), rate = exp_noise)
dpois(x = clusters_observed, lambda = lambda, log = TRUE)
}
### Inferring parameters
n_particles <- 10
### I have an issue with the dimensions!
# these three blocks of code only run if n_particles = 62.
# so probably it confuses the number of strains and the number of particles.
# that is a bit weird, I think.
# maybe in my data, it think that the three times points are the three compartments?
# but that does not really make sense - it recognizes 2001, 2004 and 2007 as times.
# BUT the info about the different strains got lost - it is not in the dataset.
# SO that is because for the SIR they only had the data for one compartment, the I, here I have infos about all compartments.
filter <- mcstate::particle_filter$new(data = mass_data,
model = WF_nG_h_vP,
n_particles = n_particles,
compare = cluster_compare,
seed = 1L)
filter$run(save_history = TRUE, pars = params_n_vP)
# Defining the comparison function
# state is the model state at some point in time
# observed is the real data
cluster_compare <- function(state, observed, pars = NULL) {
exp_noise <- 1e6
#print(dim(state))
#state_x[ , ] <- state
state <- state[-1, ]
clusters_modelled <- state[,1]
print(head(observed))
clusters_observed <- observed[, 5]
lambda <- clusters_modelled +
rexp(n = length(clusters_modelled), rate = exp_noise)
dpois(x = clusters_observed, lambda = lambda, log = TRUE)
}
### Inferring parameters
n_particles <- 10
### I have an issue with the dimensions!
# these three blocks of code only run if n_particles = 62.
# so probably it confuses the number of strains and the number of particles.
# that is a bit weird, I think.
# maybe in my data, it think that the three times points are the three compartments?
# but that does not really make sense - it recognizes 2001, 2004 and 2007 as times.
# BUT the info about the different strains got lost - it is not in the dataset.
# SO that is because for the SIR they only had the data for one compartment, the I, here I have infos about all compartments.
filter <- mcstate::particle_filter$new(data = mass_data,
model = WF_nG_h_vP,
n_particles = n_particles,
compare = cluster_compare,
seed = 1L)
filter$run(save_history = TRUE, pars = params_n_vP)
# Defining the comparison function
# state is the model state at some point in time
# observed is the real data
cluster_compare <- function(state, observed, pars = NULL) {
exp_noise <- 1e6
#print(dim(state))
#state_x[ , ] <- state
state <- state[-1, ]
clusters_modelled <- state[,1]
print(head(observed))
clusters_observed <- observed$"1"
lambda <- clusters_modelled +
rexp(n = length(clusters_modelled), rate = exp_noise)
dpois(x = clusters_observed, lambda = lambda, log = TRUE)
}
### Inferring parameters
n_particles <- 10
### I have an issue with the dimensions!
# these three blocks of code only run if n_particles = 62.
# so probably it confuses the number of strains and the number of particles.
# that is a bit weird, I think.
# maybe in my data, it think that the three times points are the three compartments?
# but that does not really make sense - it recognizes 2001, 2004 and 2007 as times.
# BUT the info about the different strains got lost - it is not in the dataset.
# SO that is because for the SIR they only had the data for one compartment, the I, here I have infos about all compartments.
filter <- mcstate::particle_filter$new(data = mass_data,
model = WF_nG_h_vP,
n_particles = n_particles,
compare = cluster_compare,
seed = 1L)
filter$run(save_history = TRUE, pars = params_n_vP)
WFmodel_nG_h_vP$index()
WFmodel_nG_h_vP$index(t)
WFmodel_nG_h_vP$run(t)
View(WFmodel_nG_h_vP)
par(mfrow=c(1,1))
dt <- 1
n_particles <- 10L
#WFmodel_nG_h_vP$update_state(pars = params_n_vP, time = 0)
WFmodel_nG_h_vP <- WF_nG_h_vP$new(pars = params_n_vP,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_times <- 180
x <- array(NA, dim = c(WFmodel_nG_h_vP$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel_nG_h_vP$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
if (length(x[,1,1]) <= 8){
cols <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") #8 colorblind friendly colors
} else {
cols <- rainbow(length(x[,1,1]))
}
library(dplyr)
library(zoo)
matplot(time, rollmean(x[1,1 , ], k=30, fill=NA), type = "l",
xlab = "Time", ylab = "Number of individuals",
col = cols[1], lty = 1, ylim = range(x))
for (species in 2:length(x[,1,1])) {
matlines(time, rollmean(x[species,1 , ], k=30, fill=NA), col = cols[species], lty = 1)
}
# or
# matplot(time,(x[1,1 , ]), type = "l",
#         xlab = "Time", ylab = "Number of individuals",
#         col = cols[1], lty = 1, ylim = range(x))
#for (species in 2:length(x[,1,1])) {
#  matlines(time, (x[species,1 , ]), col = cols[species], lty = 1)
#}
#if you want to see all single values, not the monthly rolling mean
legend("bottomright", lwd = 1, col = cols[1:length(x[,1,1])], legend = 1:length(x[,1,1]), bty = "n")
View(sir_model)
