if (x=="") 0 else 1
}
bool_gene_presence_absence <- gene_presence_absence
for (i in 4:length(bool_gene_presence_absence[1,])) {
bool_gene_presence_absence[,i] <- unlist(lapply(bool_gene_presence_absence[,i], FUN =  convert_to_bool))
bool_gene_presence_absence[,i] <- as.integer(bool_gene_presence_absence[,i])
}
bool_gene_presence_absence[1,] <- gene_presence_absence[1,]
as.integer(bool_gene_presence_absence[2,4])
bool_gene_presence_absence[2,4]
bool_gene_presence_absence <- gene_presence_absence
bool_gene_presence_absence <- gene_presence_absence
for (i in 4:length(bool_gene_presence_absence[1,])) {
bool_gene_presence_absence[,i] <- unlist(lapply(bool_gene_presence_absence[,i], FUN =  convert_to_bool))
bool_gene_presence_absence[,i] <- lapply(bool_gene_presence_absence[,i], FUN = as.integer)
}
bool_gene_presence_absence <- gene_presence_absence
bool_gene_presence_absence <- gene_presence_absence
bool_gene_presence_absence <- gene_presence_absence
for (i in 4:length(bool_gene_presence_absence[1,])) {
bool_gene_presence_absence[,i] <- unlist(lapply(bool_gene_presence_absence[,i], FUN =  convert_to_bool))
}
bool_gene_presence_absence[1,] <- gene_presence_absence[1,]
sum(as.integer(bool_gene_presence_absence[2,4:10]))
# calculate frequency of genes to only keep those which appear in 5-95% of the genomes
gene_freq <-
sum(as.integer(bool_gene_presence_absence[1,4:length(bool_gene_presence_absence[1,])]))
length(bool_gene_presence_absence[1,])
# calculate frequency of genes to only keep those which appear in 5-95% of the genomes
gene_freq <-
sum(as.integer(bool_gene_presence_absence[2,4:length(bool_gene_presence_absence[2,])]))
# calculate frequency of genes to only keep those which appear in 5-95% of the genomes
gene_freq <- rep(0, length(bool_gene_presence_absence[,1]))
# calculate frequency of genes to only keep those which appear in 5-95% of the genomes
gene_freq <- rep(0, length(bool_gene_presence_absence[,1]))
for (i in 1:length(gene_freq)) {
gene_freq[i] <- sum(as.integer(bool_gene_presence_absence[i,4:length(bool_gene_presence_absence[2,])]))
}
gene_freq
gene_freq <- gene_freq / length(bool_gene_presence_absence[2,])
head(gene_freq)
# calculate frequency of genes to only keep those which appear in 5-95% of the genomes
gene_freq <- rep(0, length(bool_gene_presence_absence[,1])-1)
for (i in 1:length(gene_freq)) {
gene_freq[i] <- sum(as.integer(bool_gene_presence_absence[i,4:length(bool_gene_presence_absence[2,])]))
}
gene_freq <- gene_freq / (length(bool_gene_presence_absence[2,])-1)
# calculate frequency of genes to only keep those which appear in 5-95% of the genomes
gene_freq <- rep(0, length(bool_gene_presence_absence[,1])-1)
for (i in 2:length(gene_freq)) {
gene_freq[i] <- sum(as.integer(bool_gene_presence_absence[i,4:length(bool_gene_presence_absence[2,])]))
}
gene_freq <- gene_freq / (length(bool_gene_presence_absence[2,])-1)
head(gene_freq)
# calculate frequency of genes to only keep those which appear in 5-95% of the genomes
gene_freq <- rep(0, length(bool_gene_presence_absence[,1])-1)
for (i in 1:length(gene_freq)) {
gene_freq[i] <- sum(as.integer(bool_gene_presence_absence[i+1,4:length(bool_gene_presence_absence[2,])]))
}
gene_freq <- gene_freq / (length(bool_gene_presence_absence[2,])-1)
# calculate frequency of genes to only keep those which appear in 5-95% of the genomes
gene_freq <- rep(0, length(bool_gene_presence_absence[,1])-1)
for (i in 1:length(gene_freq)) {
gene_freq[i] <- sum(as.integer(bool_gene_presence_absence[i+1,4:length(bool_gene_presence_absence[2,])]))
}
gene_freq <- gene_freq / (length(bool_gene_presence_absence[2,])-3)
head(gene_freq)
tail(gene_freq)
# create a dataframe that only contains the genes that appear in 5-95% of the genomes
filtered_bool_gene_presence_absence <- bool_gene_presence_absence
# create a dataframe that only contains the genes that appear in 5-95% of the genomes
filtered_bool_gene_presence_absence <- bool_gene_presence_absence[1,]
View(filtered_bool_gene_presence_absence)
# create a dataframe that only contains the genes that appear in 5-95% of the genomes
filtered_bool_gene_presence_absence <- bool_gene_presence_absence[1,]
for (i in 1:gene_freq){
if (0.05 < gene_freq[i] < 0.95 ){
# create a dataframe that only contains the genes that appear in 5-95% of the genomes
filtered_bool_gene_presence_absence <- bool_gene_presence_absence[1,]
for (i in 1:gene_freq){
if (0.05 < gene_freq[i] & gene_freq[i] < 0.95 ){
filtered_bool_gene_presence_absence[nrow(filtered_bool_gene_presence_absence)+1,] <- bool_gene_presence_absence[i+1,]
}
}
# create a dataframe that only contains the genes that appear in 5-95% of the genomes
filtered_bool_gene_presence_absence <- bool_gene_presence_absence[1,]
for (i in 1:length(gene_freq)){
if (0.05 < gene_freq[i] & gene_freq[i] < 0.95 ){
filtered_bool_gene_presence_absence[nrow(filtered_bool_gene_presence_absence)+1,] <- bool_gene_presence_absence[i+1,]
}
}
nrow(filtered_bool_gene_presence_absence)
nrow(bool_gene_presence_absence)
nrow(gene_presence_absence)
# calculate frequency of genes to only keep those which appear in 5-95% of the genomes
gene_freq <- rep(0, nrow(bool_gene_presence_absence)-1)
for (i in 1:length(gene_freq)) {
gene_freq[i] <- sum(as.integer(bool_gene_presence_absence[i+1,4:ncol(bool_gene_presence_absence)]))
}
gene_freq <- gene_freq / (length(bool_gene_presence_absence[2,])-3)
# create a dataframe that only contains the genes that appear in 5-95% of the genomes
filtered_bool_gene_presence_absence <- bool_gene_presence_absence[1,]
for (i in 1:length(gene_freq)){
if (0.05 < gene_freq[i] & gene_freq[i] < 0.95 ){
filtered_bool_gene_presence_absence[nrow(filtered_bool_gene_presence_absence)+1,] <- bool_gene_presence_absence[i+1,]
}
}
# reading in the cluster produced by PopPUNK
database_k3_clusters <- read.csv("~/Documents/PhD_Project/Code/1st_project/odin-dust-examples/Data/refined_modelfitk3_clusters.csv")
no_clusters <- max(database_k3_clusters[,2])
no_clusters
# create a dataframe that only contains the genes that appear in 5-95% of the genomes
filtered_bool_gene_presence_absence <- data.frame(colnames(bool_gene_presence_absence[1,]))
# create a dataframe that only contains the genes that appear in 5-95% of the genomes
filtered_bool_gene_presence_absence <- data.frame(col.names(bool_gene_presence_absence[1,]))
# create a dataframe that only contains the genes that appear in 5-95% of the genomes
filtered_bool_gene_presence_absence <- data.frame()
colnames(filtered_bool_gene_presence_absence) <- bool_gene_presence_absence[1,])
colnames(filtered_bool_gene_presence_absence) <- bool_gene_presence_absence[1,]
# create a dataframe that only contains the genes that appear in 5-95% of the genomes
filtered_bool_gene_presence_absence <- data.frame(matrix(nrow = 0, ncol = length(bool_gene_presence_absence[1,])))
colnames(filtered_bool_gene_presence_absence) <- bool_gene_presence_absence[1,]
for (i in 1:length(gene_freq)){
if (0.05 < gene_freq[i] & gene_freq[i] < 0.95 ){
filtered_bool_gene_presence_absence[nrow(filtered_bool_gene_presence_absence)+1,] <- bool_gene_presence_absence[i+1,]
}
}
# create a dataframe that only contains the genes that appear in 5-95% of the genomes
filtered_bool_gene_presence_absence <- data.frame(matrix(nrow = 0, ncol = length(bool_gene_presence_absence[1,])))
colnames(filtered_bool_gene_presence_absence) <- bool_gene_presence_absence[1,]
# create a dataframe that only contains the genes that appear in 5-95% of the genomes
filtered_bool_gene_presence_absence <- data.frame(matrix(nrow = 0, ncol = length(bool_gene_presence_absence[1,])))
# create a dataframe that only contains the genes that appear in 5-95% of the genomes
filtered_bool_gene_presence_absence <- data.frame(matrix(nrow = 0, ncol = length(bool_gene_presence_absence[1,])))
View(bool_gene_presence_absence)
View(filtered_bool_gene_presence_absence)
for (i in 1:length(gene_freq)){
if (0.05 < gene_freq[i] & gene_freq[i] < 0.95 ){
filtered_bool_gene_presence_absence[nrow(filtered_bool_gene_presence_absence)+1,] <- bool_gene_presence_absence[i+1,]
}
}
colnames(filtered_bool_gene_presence_absence) <- bool_gene_presence_absence[1,]
cluster_gene_presence_absence <- data.frame(matrix(nrow = nrow(filtered_bool_gene_presence_absence), ncol = no_clusters))
View(cluster_gene_presence_absence)
colnames(cluster_gene_presence_absence)[1:3] <- colnames(filtered_bool_gene_presence_absence)[1:3]
cluster_gene_presence_absence <- data.frame(matrix(nrow = nrow(filtered_bool_gene_presence_absence), ncol = no_clusters+3))
colnames(cluster_gene_presence_absence)[1:3] <- colnames(filtered_bool_gene_presence_absence)[1:3]
colnames(cluster_gene_presence_absence)[4:ncol(cluster_gene_presence_absence)] <- 1:no_clusters
median(c(c(1,2,3),c(1,2,3))
)
median(c(c(1,2,3),c(1,2,3)))
database_k3_clusters$Cluster
database_k3_clusters$Cluster==1
filter(database_k3_clusters, Cluster == 1)
filter(database_k3_clusters, database_k3_clusters$Cluster == 1)
database_k3_clusters[1,1]
database_k3_clusters[1,2]
subset(database_k3_clusters, database_k3_clusters$Cluster == 1)
subset(database_k3_clusters, database_k3_clusters$Cluster == 1)[,1]
filtered_bool_gene_presence_absence(,"6930_8#8")
filtered_bool_gene_presence_absence[,"6930_8#8"]
filtered_bool_gene_presence_absence[,c("6930_8#8","7622_4#1")]
cluster_gene_presence_absence <- data.frame(matrix(nrow = nrow(filtered_bool_gene_presence_absence), ncol = no_clusters+3))
colnames(cluster_gene_presence_absence)[1:3] <- colnames(filtered_bool_gene_presence_absence)[1:3]
colnames(cluster_gene_presence_absence)[4:ncol(cluster_gene_presence_absence)] <- 1:no_clusters
for (i in 1:no_clusters){
curr_cluster <- subset(database_k3_clusters, database_k3_clusters$Cluster == i)[,1] # select all genomes in cluster i
curr_genomes <- filtered_bool_gene_presence_absence[,curr_cluster]
for (j in 1:nrow(filtered_bool_gene_presence_absence)){
cluster_gene_presence_absence[j,i] <- median(curr_genomes[j,])
}
}
cluster_gene_presence_absence <- data.frame(matrix(nrow = nrow(filtered_bool_gene_presence_absence), ncol = no_clusters+3))
colnames(cluster_gene_presence_absence)[1:3] <- colnames(filtered_bool_gene_presence_absence)[1:3]
colnames(cluster_gene_presence_absence)[4:ncol(cluster_gene_presence_absence)] <- 1:no_clusters
for (i in 1:no_clusters){
curr_cluster <- subset(database_k3_clusters, database_k3_clusters$Cluster == i)[,1] # select all genomes in cluster i
curr_genomes <- filtered_bool_gene_presence_absence[,curr_cluster]
for (j in 1:nrow(filtered_bool_gene_presence_absence)){
cluster_gene_presence_absence[j,i] <- median(as.integer(curr_genomes[j,]))
}
}
curr_genomes
curr_cluster
database_k3_clusters$Cluster
median(1)
curr_genomes[10,]
cluster_gene_presence_absence <- data.frame(matrix(nrow = nrow(filtered_bool_gene_presence_absence), ncol = no_clusters+3))
colnames(cluster_gene_presence_absence)[1:3] <- colnames(filtered_bool_gene_presence_absence)[1:3]
colnames(cluster_gene_presence_absence)[4:ncol(cluster_gene_presence_absence)] <- 1:no_clusters
for (i in 1:no_clusters){
curr_cluster <- subset(database_k3_clusters, database_k3_clusters$Cluster == i)[,1] # select all genomes in cluster i
curr_genomes <- as.matrix(filtered_bool_gene_presence_absence[,curr_cluster])
for (j in 1:nrow(filtered_bool_gene_presence_absence)){
cluster_gene_presence_absence[j,i] <- median(as.integer(curr_genomes[j,]))
}
}
cluster_gene_presence_absence <- data.frame(matrix(nrow = nrow(filtered_bool_gene_presence_absence), ncol = no_clusters+3))
colnames(cluster_gene_presence_absence)[1:3] <- colnames(filtered_bool_gene_presence_absence)[1:3]
colnames(cluster_gene_presence_absence)[4:ncol(cluster_gene_presence_absence)] <- 1:no_clusters
for (i in 1:no_clusters){
curr_cluster <- subset(database_k3_clusters, database_k3_clusters$Cluster == i)[,1] # select all genomes in cluster i
curr_genomes <- as.matrix(filtered_bool_gene_presence_absence[,curr_cluster])
for (j in 1:nrow(filtered_bool_gene_presence_absence)){
cluster_gene_presence_absence[j,i] <- as.integer(median(as.integer(curr_genomes[j,])))
}
}
cluster_gene_presence_absence <- data.frame(matrix(nrow = nrow(filtered_bool_gene_presence_absence), ncol = no_clusters+3))
colnames(cluster_gene_presence_absence)[1:3] <- colnames(filtered_bool_gene_presence_absence)[1:3]
colnames(cluster_gene_presence_absence)[4:ncol(cluster_gene_presence_absence)] <- 1:no_clusters
for (i in 1:no_clusters){
curr_cluster <- subset(database_k3_clusters, database_k3_clusters$Cluster == i)[,1] # select all genomes in cluster i
curr_genomes <- as.matrix(filtered_bool_gene_presence_absence[,curr_cluster])
for (j in 1:nrow(filtered_bool_gene_presence_absence)){
cluster_gene_presence_absence[j,i+3] <- as.integer(median(as.integer(curr_genomes[j,])))
}
}
cluster_gene_presence_absence[1:3] <- filtered_bool_gene_presence_absence[1:3]
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
lang_output <- function(x, lang) {
cat(c(sprintf("```%s", lang), x, "```"), sep = "\n")
}
cc_output <- function(x) lang_output(x, "cc")
r_output <- function(x) lang_output(x, "r")
plain_output <- function(x) lang_output(x, "plain")
r_output(readLines(file.path("WrightFisher_nGenotypes_haploid_PopsizeVariablePois.R")))
# install.packages("drat") # -- if you don't have drat installed
# drat:::add("ncov-ic")
# install.packages("odin.dust")
library(odin.dust)
WF_nG_h_vP <- odin.dust::odin_dust("WrightFisher_nGenotypes_haploid_PopsizeVariablePois.R")
# reading in the cluster produced by PopPUNK
clusters <- read.csv("~/Documents/PhD_Project/Code/1st_project/odin-dust-examples/Data/refined_modelfitk3_clusters.csv")
no_clusters <- max(clusters[,2]) # number of clusters in dataset
# reading in the gene presence absence matrix produced by ggCaller
gene_presence_absence <- read.csv("~/Documents/PhD_Project/Code/1st_project/odin-dust-examples/Data/gene_presence_absence.csv", header=FALSE)
# converting the gene presence absence matrix into a boolean df (0 = gene not present, 1 = gene present)
convert_to_bool <- function(x){
if (x=="") 0 else 1
}
bool_gene_presence_absence <- gene_presence_absence
for (i in 4:length(bool_gene_presence_absence[1,])) {
bool_gene_presence_absence[,i] <- unlist(lapply(bool_gene_presence_absence[,i], FUN =  convert_to_bool))
}
bool_gene_presence_absence[1,] <- gene_presence_absence[1,]
# calculate frequency of genes to only keep those which appear in 5-95% of the genomes
gene_freq <- rep(0, nrow(bool_gene_presence_absence)-1)
for (i in 1:length(gene_freq)) {
gene_freq[i] <- sum(as.integer(bool_gene_presence_absence[i+1,4:ncol(bool_gene_presence_absence)]))
}
gene_freq <- gene_freq / (length(bool_gene_presence_absence[2,])-3)
# create a dataframe that only contains the genes that appear in 5-95% of the genomes
filtered_bool_gene_presence_absence <- data.frame(matrix(nrow = 0, ncol = length(bool_gene_presence_absence[1,])))
for (i in 1:length(gene_freq)){
if (0.05 < gene_freq[i] & gene_freq[i] < 0.95 ){
filtered_bool_gene_presence_absence[nrow(filtered_bool_gene_presence_absence)+1,] <- bool_gene_presence_absence[i+1,]
}
}
colnames(filtered_bool_gene_presence_absence) <- bool_gene_presence_absence[1,]
### make consensus genome for clusters
# attempt 1: always let majority decide (if more than 50% in the cluster don't have gene then 0, else 1)
# should be easy to do with median
# would be nice to have the genome names as column names though. yupp.
cluster_gene_presence_absence <- data.frame(matrix(nrow = nrow(filtered_bool_gene_presence_absence), ncol = no_clusters+3))
colnames(cluster_gene_presence_absence)[1:3] <- colnames(filtered_bool_gene_presence_absence)[1:3]
cluster_gene_presence_absence[1:3] <- filtered_bool_gene_presence_absence[1:3]
colnames(cluster_gene_presence_absence)[4:ncol(cluster_gene_presence_absence)] <- 1:no_clusters
for (i in 1:no_clusters){
curr_cluster <- subset(clusters, clusters$Cluster == i)[,1] # select all genomes in cluster i
curr_genomes <- as.matrix(filtered_bool_gene_presence_absence[,curr_cluster])
for (j in 1:nrow(filtered_bool_gene_presence_absence)){
cluster_gene_presence_absence[j,i+3] <- as.integer(median(as.integer(curr_genomes[j,])))
}
}
# attempt 2: record relative frequencies. Probably not advantageous.
# attempt 3: keep track of all existing variants. This can be done later
length(subset(clusters, clusters$Cluster == i)[,1])
length(subset(clusters, clusters$Cluster == 1)[,1])
#calculate the frequency of the gene clusters
cluster_freq <- rep(0,no_clusters)
for (i in 1:no_clusters){
cluster_freq[i] <- length(subset(clusters, clusters$Cluster == i)[,1])
}
cluster_freq <- cluster_freq / no_clusters
cluster_freq
#calculate the frequency of the gene clusters
cluster_freq <- rep(0,no_clusters)
for (i in 1:no_clusters){
cluster_freq[i] <- length(subset(clusters, clusters$Cluster == i)[,1])
}
cluster_freq <- cluster_freq / length(clusters)
cluster_freq
length(clusters)
#calculate the frequency of the gene clusters
cluster_freq <- rep(0,no_clusters)
for (i in 1:no_clusters){
cluster_freq[i] <- length(subset(clusters, clusters$Cluster == i)[,1])
}
cluster_freq <- cluster_freq / length(clusters[,1])
cluster_freq
sum(cluster_freq)
#calculate the frequency of the gene clusters
cluster_freq <- rep(0,no_clusters)
for (i in 1:no_clusters){
cluster_freq[i] <- length(subset(clusters, clusters$Cluster == i)[,1])
}
#cluster_freq <- cluster_freq / length(clusters[,1])
# I think I don't want frequency but more the absolute numbers?
params_n_vP <- list(dt = 1, species_no = no_clusters,  gene_no = nrow(cluster_gene_presence_absence), Pop_ini = cluster_freq, Pop_eq = cluster_freq, capacity = 1000, Genotypes = cluster_gene_presence_absence, sigma = 0.02, m = 0.00, vaccTypes = c(0,0,1,0), v = 0, vacc_time = 100)
# the following parameters show the expected behaviour in about 50% of the times. Probably stochastic effects because the population sizes of gt 1, 3 and 4 are so small in the beginning?
# params_n_vP <- list(dt = 1, species_no = 4,  gene_no = 5, Pop_ini = c(150,550,250,150), Pop_eq = c(100,400,400,100), capacity = 1000, Genotypes = cbind(c(1,0,0,0,0),c(0,0,1,0,0),c(1,0,0,1,1),c(0,0,0,1,1)), sigma = 0.02)
### maybe I can investigate whether binomial draws are more robust? (later)
#params_n_vP <- list(dt = 1, species_no = 4,  gene_no = 5, Pop_ini = rep(100,4), Pop_eq = c(20, 20, 400, 20), capacity = 300, Genotypes = cbind(c(1,0,0,0,0),c(0,1,0,0,0),c(1,0,0,1,1),c(0,0,0,0,1)), GeneFitness = c(0.1, 0.1, 0.2, 0.1, 0.1))
WFmodel_nG_h_vP <- WF_nG_h_vP$new(pars = params_n_vP,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
WF_nG_h_vP <- odin.dust::odin_dust("WrightFisher_nGenotypes_haploid_PopsizeVariablePois.R")
WF_nG_h_vP <- odin.dust::odin_dust("WrightFisher_nGenotypes_haploid_PopsizeVariablePois.R")
setwd("~/Documents/PhD_Project/Code/1st_project/odin-dust-examples/TestModels")
# install.packages("drat") # -- if you don't have drat installed
# drat:::add("ncov-ic")
# install.packages("odin.dust")
library(odin.dust)
WF_nG_h_vP <- odin.dust::odin_dust("WrightFisher_nGenotypes_haploid_PopsizeVariablePois.R")
WF_nG_h_vP <- odin.dust::odin_dust("WrightFisher_nGenotypes_haploid_PopsizeVariablePois.R")
params_n_vP <- list(dt = 1, species_no = no_clusters,  gene_no = nrow(cluster_gene_presence_absence), Pop_ini = cluster_freq, Pop_eq = cluster_freq, capacity = 1000, Genotypes = cluster_gene_presence_absence, sigma = 0.02, m = 0.00, vaccTypes = c(0,0,1,0), v = 0, vacc_time = 100)
WFmodel_nG_h_vP <- WF_nG_h_vP$new(pars = params_n_vP,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
params_n_vP <- list(dt = 1, species_no = no_clusters,  gene_no = nrow(cluster_gene_presence_absence), Pop_ini = cluster_freq, Pop_eq = cluster_freq, capacity = 1000, Genotypes = cluster_gene_presence_absence, sigma = 0.02, m = 0.00, vaccTypes = rep(0, no_clusters), v = 0, vacc_time = 100)
params_n_vP <- list(dt = 1, species_no = no_clusters,  gene_no = nrow(cluster_gene_presence_absence), Pop_ini = cluster_freq, Pop_eq = cluster_freq, capacity = 1000, Genotypes = cluster_gene_presence_absence, sigma = 0.02, m = 0.00, vaccTypes = rep(0, no_clusters), v = 0, vacc_time = 100)
WFmodel_nG_h_vP <- WF_nG_h_vP$new(pars = params_n_vP,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
as.matrix(cluster_gene_presence_absence)
matrix_cluster_gene_presence_absence <- as.matrix(as.integer(cluster_gene_presence_absence[,4:ncol(cluster_gene_presence_absence)]))
matrix_cluster_gene_presence_absence <- as.matrix((cluster_gene_presence_absence[,4:ncol(cluster_gene_presence_absence)]))
head(matrix_cluster_gene_presence_absence)
matrix_cluster_gene_presence_absence[1,1]
matrix_cluster_gene_presence_absence[1,2]
matrix_cluster_gene_presence_absence[1,20]
params_n_vP <- list(dt = 1, species_no = no_clusters,  gene_no = nrow(cluster_gene_presence_absence), Pop_ini = cluster_freq, Pop_eq = cluster_freq, capacity = 1000, Genotypes = matrix_cluster_gene_presence_absence, sigma = 0.02, m = 0.00, vaccTypes = rep(0, no_clusters), v = 0, vacc_time = 100)
WFmodel_nG_h_vP <- WF_nG_h_vP$new(pars = params_n_vP,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
params_n_vP <- list(dt = 1, species_no = no_clusters,  gene_no = nrow(cluster_gene_presence_absence), Pop_ini = cluster_freq, Pop_eq = cluster_freq, capacity = 1000, Genotypes = matrix_cluster_gene_presence_absence, sigma = 0.02, m = 0.00, vaccTypes = rep(0.00, no_clusters), v = 0, vacc_time = 100)
WFmodel_nG_h_vP <- WF_nG_h_vP$new(pars = params_n_vP,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
### make consensus genome for clusters
# attempt 1: always let majority decide (if more than 50% in the cluster don't have gene then 0, else 1)
# should be easy to do with median
cluster_gene_presence_absence <- data.frame(matrix(nrow = nrow(filtered_bool_gene_presence_absence), ncol = no_clusters+3))
colnames(cluster_gene_presence_absence)[1:3] <- colnames(filtered_bool_gene_presence_absence)[1:3]
cluster_gene_presence_absence[1:3] <- filtered_bool_gene_presence_absence[1:3]
colnames(cluster_gene_presence_absence)[4:ncol(cluster_gene_presence_absence)] <- 1:no_clusters
for (i in 1:no_clusters){
curr_cluster <- subset(clusters, clusters$Cluster == i)[,1] # select all genomes in cluster i
curr_genomes <- as.matrix(filtered_bool_gene_presence_absence[,curr_cluster])
for (j in 1:nrow(filtered_bool_gene_presence_absence)){
cluster_gene_presence_absence[j,i+3] <- as.double(median(as.integer(curr_genomes[j,])))
}
}
matrix_cluster_gene_presence_absence <- as.matrix((cluster_gene_presence_absence[,4:ncol(cluster_gene_presence_absence)]))
# attempt 2: record relative frequencies. Probably not advantageous.
# attempt 3: keep track of all existing variants. This can be done later
#calculate the frequency of the gene clusters
cluster_freq <- rep(0,no_clusters)
for (i in 1:no_clusters){
cluster_freq[i] <- length(subset(clusters, clusters$Cluster == i)[,1])
}
#cluster_freq <- cluster_freq / length(clusters[,1])
# I think I don't want frequency but rather the absolute numbers?
params_n_vP <- list(dt = 1, species_no = no_clusters,  gene_no = nrow(cluster_gene_presence_absence), Pop_ini = cluster_freq, Pop_eq = cluster_freq, capacity = 1000, Genotypes = matrix_cluster_gene_presence_absence, sigma = 0.02, m = 0.00, vaccTypes = rep(0, no_clusters), v = 0, vacc_time = 100)
WFmodel_nG_h_vP <- WF_nG_h_vP$new(pars = params_n_vP,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
WFmodel_nG_h_vP$state()
WFmodel_nG_h_vP$run(1)
WFmodel_nG_h_vP$run(2)
WFmodel_nG_h_vP$run(3)
dt <- 1
n_particles <- 10L
#WFmodel_nG_h_vP$update_state(pars = params_n_vP, time = 0)
WFmodel_nG_h_vP <- WF_nG_h_vP$new(pars = params_n_vP,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_times <- 1000
x <- array(NA, dim = c(WFmodel_nG_h_vP$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel_nG_h_vP$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
if (length(x[,1,1]) <= 8){
cols <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") #8 colorblind friendly colors
} else {
cols <- rainbow(length(x[,1,1]))
}
# probably should find a more dynamic way for models with >8 species?
matplot(time, (x[1,1 , ]), type = "l",
xlab = "Time", ylab = "Number of individuals",
col = cols[1], lty = 1, ylim = range(x))
for (species in 2:length(x[,1,1])) {
matlines(time, (x[species,1 , ]), col = cols[species], lty = 1)
}
legend("bottomright", lwd = 1, col = cols[1:length(x[,1,1])], legend = 1:length(x[,1,1]), bty = "n")
dt <- 1
n_particles <- 10L
#WFmodel_nG_h_vP$update_state(pars = params_n_vP, time = 0)
WFmodel_nG_h_vP <- WF_nG_h_vP$new(pars = params_n_vP,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_times <- 1000
x <- array(NA, dim = c(WFmodel_nG_h_vP$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel_nG_h_vP$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
if (length(x[,1,1]) <= 8){
cols <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") #8 colorblind friendly colors
} else {
cols <- rainbow(length(x[,1,1]))
}
# probably should find a more dynamic way for models with >8 species?
matplot(time, (x[1,1 , ]), type = "l",
xlab = "Time", ylab = "Number of individuals",
col = cols[1], lty = 1, ylim = range(x))
for (species in 2:length(x[,1,1])) {
matlines(time, (x[species,1 , ]), col = cols[species], lty = 1)
}
legend("bottomright", lwd = 1, col = cols[1:length(x[,1,1])], legend = 1:length(x[,1,1]), bty = "n")
dt <- 1
n_particles <- 10L
#WFmodel_nG_h_vP$update_state(pars = params_n_vP, time = 0)
WFmodel_nG_h_vP <- WF_nG_h_vP$new(pars = params_n_vP,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_times <- 1000
x <- array(NA, dim = c(WFmodel_nG_h_vP$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel_nG_h_vP$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
if (length(x[,1,1]) <= 8){
cols <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") #8 colorblind friendly colors
} else {
cols <- rainbow(length(x[,1,1]))
}
# probably should find a more dynamic way for models with >8 species?
matplot(time, (x[1,1 , ]), type = "l",
xlab = "Time", ylab = "Number of individuals",
col = cols[1], lty = 1, ylim = range(x))
for (species in 2:length(x[,1,1])) {
matlines(time, (x[species,1 , ]), col = cols[species], lty = 1)
}
legend("bottomright", lwd = 1, col = cols[1:length(x[,1,1])], legend = 1:length(x[,1,1]), bty = "n")
dt <- 1
n_particles <- 10L
#WFmodel_nG_h_vP$update_state(pars = params_n_vP, time = 0)
WFmodel_nG_h_vP <- WF_nG_h_vP$new(pars = params_n_vP,
time = 1,
n_particles = 10L,
n_threads = 4L,
seed = 1L)
n_times <- 1000
x <- array(NA, dim = c(WFmodel_nG_h_vP$info()$len, n_particles, n_times))
for (t in seq_len(n_times)) {
x[ , , t] <- WFmodel_nG_h_vP$run(t)
}
time <- x[1, 1, ]
x <- x[-1, , ]
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
if (length(x[,1,1]) <= 8){
cols <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") #8 colorblind friendly colors
} else {
cols <- rainbow(length(x[,1,1]))
}
# probably should find a more dynamic way for models with >8 species?
matplot(time, (x[1,1 , ]), type = "l",
xlab = "Time", ylab = "Number of individuals",
col = cols[1], lty = 1, ylim = range(x))
for (species in 2:length(x[,1,1])) {
matlines(time, (x[species,1 , ]), col = cols[species], lty = 1)
}
legend("bottomright", lwd = 1, col = cols[1:length(x[,1,1])], legend = 1:length(x[,1,1]), bty = "n")
